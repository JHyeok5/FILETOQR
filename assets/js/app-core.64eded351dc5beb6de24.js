"use strict";(self.webpackChunkfiletoqr=self.webpackChunkfiletoqr||[]).push([[704],{950:()=>{eval('\n// UNUSED EXPORTS: default\n\n;// ./assets/js/core/config.js\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n/**\n * config.js - FileToQR 애플리케이션 설정\n * 버전: 1.1.0\n * 최종 업데이트: 2025-07-26\n * \n * 이 모듈은 애플리케이션 전반에서 사용되는 설정과 상수를 제공합니다.\n * - 지원 언어 목록\n * - 기본 언어 설정\n * - 페이지 경로 정보\n * - 기타 앱 상수\n */\n\n// 전역 객체 설정\nwindow.FileToQR = window.FileToQR || {};\nwindow.FileToQR.config = window.FileToQR.config || {};\n\n/**\n * 애플리케이션 버전\n */\nvar APP_VERSION = \'2.0.0\';\n\n/**\n * 지원 언어 설정\n */\nvar LANGUAGE_CONFIG = {\n  // 지원하는 언어 목록\n  supportedLanguages: [\'ko\', \'en\', \'zh\', \'ja\'],\n  // 기본 언어 (언어를 감지할 수 없는 경우 사용)\n  defaultLanguage: \'ko\',\n  // RTL(오른쪽에서 왼쪽) 언어 목록\n  rtlLanguages: [\'ar\', \'he\']\n};\n\n/**\n * 페이지 관련 설정\n */\nvar PAGE_CONFIG = {\n  // 기본 페이지 목록 및 HTML 파일명\n  pages: {\n    home: \'index.html\',\n    convert: \'convert.html\',\n    qrcode: \'qrcode.html\',\n    timer: \'timer.html\',\n    help: \'help.html\',\n    contact: \'contact.html\',\n    privacy: \'privacy.html\',\n    terms: \'terms.html\'\n  },\n  // i18n 경로 키와 페이지 매핑\n  i18nKeys: {\n    \'home\': \'urls.home\',\n    \'convert\': \'urls.convert\',\n    \'qrcode\': \'urls.qrcode\',\n    \'timer\': \'urls.timer\',\n    \'help\': \'urls.help\',\n    \'contact\': \'urls.contact\',\n    \'privacy\': \'urls.privacy\',\n    \'terms\': \'urls.terms\'\n  }\n};\n\n/**\n * UI 관련 설정\n */\nvar UI_CONFIG = {\n  // 링크 표준화 설정\n  linkStandardization: {\n    includeExtension: true\n  },\n  // 로딩 설정\n  loading: {\n    minDisplayTime: 500,\n    // 로딩 표시 최소 시간(ms)\n    fadeOutTime: 300 // 페이드 아웃 시간(ms)\n  }\n};\n\n/**\n * 경로 관련 설정\n */\nvar PATH_CONFIG = {\n  i18n: \'/assets/i18n/\',\n  components: \'/components/\',\n  partials: \'/components/partials/\',\n  assets: \'/assets/\'\n};\n\n/**\n * 저장소 관련 설정\n */\nvar STORAGE_CONFIG = {\n  // 로컬 스토리지 키 목록\n  keys: {\n    language: \'fileToQR_lang\',\n    theme: \'fileToQR_theme\',\n    lastVisit: \'fileToQR_lastVisit\'\n  }\n};\n\n// 설정 객체 생성\nvar Config = {\n  APP_VERSION: APP_VERSION,\n  LANGUAGE_CONFIG: LANGUAGE_CONFIG,\n  PAGE_CONFIG: PAGE_CONFIG,\n  UI_CONFIG: UI_CONFIG,\n  PATH_CONFIG: PATH_CONFIG,\n  STORAGE_CONFIG: STORAGE_CONFIG,\n  /**\n   * 현재 언어가 RTL 언어인지 확인\n   * @param {string} lang - 언어 코드\n   * @returns {boolean} RTL 언어 여부\n   */\n  isRTL: function isRTL(lang) {\n    return LANGUAGE_CONFIG.rtlLanguages.includes(lang);\n  },\n  /**\n   * 지원하는 언어인지 확인\n   * @param {string} lang - 언어 코드\n   * @returns {boolean} 지원 언어 여부\n   */\n  isSupportedLanguage: function isSupportedLanguage(lang) {\n    return LANGUAGE_CONFIG.supportedLanguages.includes(lang);\n  },\n  /**\n   * 페이지 ID로 HTML 파일 경로 가져오기\n   * @param {string} pageId - 페이지 ID\n   * @returns {string} HTML 파일 경로\n   */\n  getPagePath: function getPagePath(pageId) {\n    return PAGE_CONFIG.pages[pageId] || null;\n  },\n  /**\n   * 페이지 ID로 i18n URL 키 가져오기\n   * @param {string} pageId - 페이지 ID\n   * @returns {string} i18n URL 키\n   */\n  getPageI18nKey: function getPageI18nKey(pageId) {\n    return PAGE_CONFIG.i18nKeys[pageId] || null;\n  },\n  /**\n   * 파일 경로에서 페이지 ID 추출\n   * @param {string} path - 파일 경로\n   * @returns {string|null} 페이지 ID 또는 null\n   */\n  getPageIdFromPath: function getPageIdFromPath(path) {\n    var cleanPath = path.endsWith(\'.html\') ? path.slice(0, -5) : path;\n    for (var _i = 0, _Object$entries = Object.entries(PAGE_CONFIG.pages); _i < _Object$entries.length; _i++) {\n      var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n        id = _Object$entries$_i[0],\n        pagePath = _Object$entries$_i[1];\n      var pageCleanPath = pagePath.endsWith(\'.html\') ? pagePath.slice(0, -5) : pagePath;\n      if (cleanPath === pageCleanPath) {\n        return id;\n      }\n    }\n    return null;\n  }\n};\n\n// 전역 객체에 등록\nwindow.FileToQR.config = Config;\n\n// Export for ES modules\n/* harmony default export */ const config = (Config);\n;// ./assets/js/utils/url-utils.js\nfunction _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }\nfunction _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }\nfunction url_utils_slicedToArray(r, e) { return url_utils_arrayWithHoles(r) || url_utils_iterableToArrayLimit(r, e) || url_utils_unsupportedIterableToArray(r, e) || url_utils_nonIterableRest(); }\nfunction url_utils_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction url_utils_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction url_utils_arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = url_utils_unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }\nfunction url_utils_unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return url_utils_arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? url_utils_arrayLikeToArray(r, a) : void 0; } }\nfunction url_utils_arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\n/**\n * url-utils.js - FileToQR URL 유틸리티\n * 버전: 1.3.0\n * 최종 업데이트: 2025-07-26\n * \n * 이 모듈은 URL과 관련된 유틸리티 함수를 제공합니다.\n * - URL 매개변수 처리\n * - 다국어 URL 경로 처리\n * - 내부 페이지 URL 관리\n */\n\n\n\n// 전역 객체 설정\nwindow.FileToQR = window.FileToQR || {};\nwindow.FileToQR.utils = window.FileToQR.utils || {};\n\n/**\n * URL 유틸리티 모듈\n */\nvar UrlUtils = {\n  /**\n   * URL 쿼리 매개변수를 객체로 변환\n   * @param {string} [url=window.location.href] - 분석할 URL (기본값: 현재 URL)\n   * @returns {Object} 쿼리 매개변수 객체\n   */\n  getQueryParams: function getQueryParams() {\n    var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.location.href;\n    var params = {};\n    var queryString = url.split(\'?\')[1];\n    if (!queryString) return params;\n    var searchParams = new URLSearchParams(queryString);\n    var _iterator = _createForOfIteratorHelper(searchParams.entries()),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var _step$value = url_utils_slicedToArray(_step.value, 2),\n          key = _step$value[0],\n          value = _step$value[1];\n        params[key] = value;\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    return params;\n  },\n  /**\n   * URL에 쿼리 매개변수 추가 또는 업데이트\n   * @param {Object} params - 추가할 매개변수 객체\n   * @param {string} [url=window.location.href] - 기본 URL\n   * @returns {string} 업데이트된 URL\n   */\n  updateQueryParams: function updateQueryParams(params) {\n    var url = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : window.location.href;\n    var urlObj = new URL(url);\n    for (var _i = 0, _Object$entries = Object.entries(params); _i < _Object$entries.length; _i++) {\n      var _Object$entries$_i = url_utils_slicedToArray(_Object$entries[_i], 2),\n        key = _Object$entries$_i[0],\n        value = _Object$entries$_i[1];\n      urlObj.searchParams.set(key, value);\n    }\n    return urlObj.toString();\n  },\n  /**\n   * URL에서 쿼리 매개변수 제거\n   * @param {Array<string>} paramsToRemove - 제거할 매개변수 이름 배열\n   * @param {string} [url=window.location.href] - 기본 URL\n   * @returns {string} 업데이트된 URL\n   */\n  removeQueryParams: function removeQueryParams(paramsToRemove) {\n    var url = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : window.location.href;\n    var urlObj = new URL(url);\n    paramsToRemove.forEach(function (param) {\n      urlObj.searchParams["delete"](param);\n    });\n    return urlObj.toString();\n  },\n  /**\n   * URL에서 언어 코드 추출\n   * @param {string} [url=window.location.href] - 분석할 URL\n   * @returns {string|null} 언어 코드 또는 null (찾지 못한 경우)\n   */\n  getLanguageFromUrl: function getLanguageFromUrl() {\n    var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.location.href;\n    var urlObj = new URL(url);\n    var pathParts = urlObj.pathname.split(\'/\').filter(function (part) {\n      return part;\n    });\n    var supportedLangs = config.LANGUAGE_CONFIG.supportedLanguages;\n    if (pathParts.length > 0 && supportedLangs.includes(pathParts[0])) {\n      return pathParts[0];\n    }\n    return null;\n  },\n  /**\n   * 현재 URL의 언어 버전 URL 생성\n   * @param {string} lang - 언어 코드\n   * @param {string} [url=window.location.href] - 기본 URL\n   * @returns {string} 언어 버전 URL\n   */\n  getLanguageUrl: function getLanguageUrl(lang) {\n    var url = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : window.location.href;\n    var urlObj = new URL(url);\n    var pathParts = urlObj.pathname.split(\'/\').filter(function (part) {\n      return part;\n    });\n    var currentLang = this.getLanguageFromUrl(url) || config.LANGUAGE_CONFIG.defaultLanguage;\n    var defaultLang = config.LANGUAGE_CONFIG.defaultLanguage;\n\n    // 언어 코드가 지원되지 않는 경우 기본 언어 사용\n    if (!config.isSupportedLanguage(lang)) {\n      console.warn("\\uC9C0\\uC6D0\\uD558\\uC9C0 \\uC54A\\uB294 \\uC5B8\\uC5B4: ".concat(lang, ", \\uAE30\\uBCF8 \\uC5B8\\uC5B4(").concat(defaultLang, ")\\uB85C \\uB300\\uCCB4"));\n      lang = defaultLang;\n    }\n\n    // 경로에 언어 코드가 있는 경우\n    if (currentLang && currentLang !== defaultLang) {\n      // 첫 번째 부분이 현재 언어 코드인 경우\n      if (pathParts[0] === currentLang) {\n        // 기본 언어로 변경하는 경우 언어 코드 제거\n        if (lang === defaultLang) {\n          urlObj.pathname = \'/\' + pathParts.slice(1).join(\'/\');\n        } else {\n          // 다른 언어로 변경\n          pathParts[0] = lang;\n          urlObj.pathname = \'/\' + pathParts.join(\'/\');\n        }\n      }\n    } else {\n      // 경로에 언어 코드가 없고, 기본 언어가 아닌 경우 언어 코드 추가\n      if (lang !== defaultLang) {\n        urlObj.pathname = \'/\' + lang + urlObj.pathname;\n      }\n    }\n    return urlObj.toString();\n  },\n  /**\n   * i18n 다국어 URL을 생성하는 함수\n   * @param {string} path - 페이지 경로 (예: \'index.html\', \'convert.html\')\n   * @param {string} [lang=null] - 언어 코드 (null이면 현재 언어 사용)\n   * @param {Object} [options={}] - 추가 옵션\n   * @returns {string} 생성된 URL\n   */\n  getI18nUrl: function getI18nUrl(path) {\n    var lang = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var defaultOptions = {\n      absolute: false,\n      defaultLang: config.LANGUAGE_CONFIG.defaultLanguage\n    };\n    var opts = _objectSpread(_objectSpread({}, defaultOptions), options);\n\n    // 현재 언어 확인 - 우선순위에 따라 결정\n    var currentLang;\n    if (lang) {\n      // 1. 명시적 언어 코드가 제공된 경우\n      currentLang = lang;\n    } else if (window.FileToQR && window.FileToQR.i18n && typeof window.FileToQR.i18n.getCurrentLang === \'function\') {\n      // 2. i18n 모듈에서 현재 언어를 가져올 수 있는 경우\n      currentLang = window.FileToQR.i18n.getCurrentLang();\n    } else {\n      // 3. URL에서 언어를 추출하거나 기본값 사용\n      currentLang = this.getLanguageFromUrl() || opts.defaultLang;\n    }\n\n    // 경로에서 시작 슬래시 제거\n    var cleanPath = path.startsWith(\'/\') ? path.substring(1) : path;\n\n    // 기본 언어인 경우 언어 경로 없음\n    var urlPath = currentLang === opts.defaultLang ? "/".concat(cleanPath) : "/".concat(currentLang, "/").concat(cleanPath);\n\n    // 절대 URL 요청 시\n    if (opts.absolute) {\n      var baseUrl = window.location.origin;\n      return "".concat(baseUrl).concat(urlPath);\n    }\n    return urlPath;\n  },\n  /**\n   * 페이지 ID로 URL 생성\n   * @param {string} pageId - 페이지 ID\n   * @param {string} [lang=null] - 언어 코드 (null이면 현재 언어 사용)\n   * @param {Object} [options={}] - 추가 옵션\n   * @returns {string} 페이지 URL\n   */\n  getPageUrl: function getPageUrl(pageId) {\n    var lang = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var pagePath = config.getPagePath(pageId);\n    if (!pagePath) {\n      console.warn("\\uC54C \\uC218 \\uC5C6\\uB294 \\uD398\\uC774\\uC9C0 ID: ".concat(pageId));\n      return \'/\';\n    }\n    return this.getI18nUrl(pagePath, lang, options);\n  },\n  /**\n   * 현재 페이지의 다른 언어 버전 URL 가져오기\n   * @param {string} lang - 언어 코드\n   * @returns {string} 현재 페이지의 다른 언어 URL\n   */\n  getAlternateURL: function getAlternateURL(lang) {\n    return this.getLanguageUrl(lang);\n  },\n  /**\n   * 기본 경로 가져오기\n   * @returns {string} 기본 경로\n   */\n  getBasePath: function getBasePath() {\n    // 현재 URL 경로 분석\n    var currentPath = window.location.pathname;\n    var pathParts = currentPath.split(\'/\').filter(function (part) {\n      return part;\n    });\n    var supportedLangs = config.LANGUAGE_CONFIG.supportedLanguages;\n\n    // 언어 코드가 포함된 경우 상위 디렉토리로 이동\n    if (pathParts.length > 0 && supportedLangs.includes(pathParts[0])) {\n      return \'../\';\n    }\n\n    // 기본값은 상대 경로 \'./\'\n    return \'./\';\n  },\n  /**\n   * 주어진 URL이 외부 URL인지 확인\n   * @param {string} url - 확인할 URL\n   * @returns {boolean} 외부 URL 여부\n   */\n  isExternalUrl: function isExternalUrl(url) {\n    try {\n      // 상대 URL인 경우 내부로 판단\n      if (!url.startsWith(\'http://\') && !url.startsWith(\'https://\') && !url.startsWith(\'//\')) {\n        return false;\n      }\n\n      // 호스트명 비교\n      var currentHost = window.location.hostname;\n      var urlObj = new URL(url);\n      return urlObj.hostname !== currentHost;\n    } catch (error) {\n      console.warn(\'URL 검증 중 오류 발생:\', error);\n      return false;\n    }\n  },\n  /**\n   * URL 경로에서 페이지 ID 추출\n   * @param {string} [url=window.location.href] - 분석할 URL\n   * @returns {string} 페이지 ID\n   */\n  getPageIdFromUrl: function getPageIdFromUrl() {\n    var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.location.href;\n    try {\n      var urlObj = new URL(url);\n      var path = urlObj.pathname;\n\n      // 언어 코드 제거\n      var pathParts = path.split(\'/\').filter(function (part) {\n        return part;\n      });\n      if (pathParts.length > 0 && config.LANGUAGE_CONFIG.supportedLanguages.includes(pathParts[0])) {\n        path = \'/\' + pathParts.slice(1).join(\'/\');\n      }\n\n      // 루트 페이지 또는 index.html\n      if (path === \'/\' || path.endsWith(\'/index.html\')) return \'home\';\n\n      // 파일 확장자 제거\n      var lastSegment = path.split(\'/\').pop() || \'\';\n      var pageId = lastSegment.replace(/\\.html$/, \'\');\n      return pageId || \'unknown\';\n    } catch (error) {\n      console.error(\'페이지 ID 추출 중 오류 발생:\', error);\n      return \'unknown\';\n    }\n  }\n};\n\n// 전역 객체에 등록\nwindow.FileToQR.utils.url = UrlUtils;\n\n// Export for ES modules\n/* harmony default export */ const url_utils = (UrlUtils);\n;// ./assets/js/utils/i18n-utils.js\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return r; }; var t, r = {}, e = Object.prototype, n = e.hasOwnProperty, o = "function" == typeof Symbol ? Symbol : {}, i = o.iterator || "@@iterator", a = o.asyncIterator || "@@asyncIterator", u = o.toStringTag || "@@toStringTag"; function c(t, r, e, n) { return Object.defineProperty(t, r, { value: e, enumerable: !n, configurable: !n, writable: !n }); } try { c({}, ""); } catch (t) { c = function c(t, r, e) { return t[r] = e; }; } function h(r, e, n, o) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype); return c(a, "_invoke", function (r, e, n) { var o = 1; return function (i, a) { if (3 === o) throw Error("Generator is already running"); if (4 === o) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var u = n.delegate; if (u) { var c = d(u, n); if (c) { if (c === f) continue; return c; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (1 === o) throw o = 4, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = 3; var h = s(r, e, n); if ("normal" === h.type) { if (o = n.done ? 4 : 2, h.arg === f) continue; return { value: h.arg, done: n.done }; } "throw" === h.type && (o = 4, n.method = "throw", n.arg = h.arg); } }; }(r, n, new Context(o || [])), !0), a; } function s(t, r, e) { try { return { type: "normal", arg: t.call(r, e) }; } catch (t) { return { type: "throw", arg: t }; } } r.wrap = h; var f = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var l = {}; c(l, i, function () { return this; }); var p = Object.getPrototypeOf, y = p && p(p(x([]))); y && y !== e && n.call(y, i) && (l = y); var v = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(l); function g(t) { ["next", "throw", "return"].forEach(function (r) { c(t, r, function (t) { return this._invoke(r, t); }); }); } function AsyncIterator(t, r) { function e(o, i, a, u) { var c = s(t[o], t, i); if ("throw" !== c.type) { var h = c.arg, f = h.value; return f && "object" == i18n_utils_typeof(f) && n.call(f, "__await") ? r.resolve(f.__await).then(function (t) { e("next", t, a, u); }, function (t) { e("throw", t, a, u); }) : r.resolve(f).then(function (t) { h.value = t, a(h); }, function (t) { return e("throw", t, a, u); }); } u(c.arg); } var o; c(this, "_invoke", function (t, n) { function i() { return new r(function (r, o) { e(t, n, r, o); }); } return o = o ? o.then(i, i) : i(); }, !0); } function d(r, e) { var n = e.method, o = r.i[n]; if (o === t) return e.delegate = null, "throw" === n && r.i["return"] && (e.method = "return", e.arg = t, d(r, e), "throw" === e.method) || "return" !== n && (e.method = "throw", e.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), f; var i = s(o, r.i, e.arg); if ("throw" === i.type) return e.method = "throw", e.arg = i.arg, e.delegate = null, f; var a = i.arg; return a ? a.done ? (e[r.r] = a.value, e.next = r.n, "return" !== e.method && (e.method = "next", e.arg = t), e.delegate = null, f) : a : (e.method = "throw", e.arg = new TypeError("iterator result is not an object"), e.delegate = null, f); } function w(t) { this.tryEntries.push(t); } function m(r) { var e = r[4] || {}; e.type = "normal", e.arg = t, r[4] = e; } function Context(t) { this.tryEntries = [[-1]], t.forEach(w, this), this.reset(!0); } function x(r) { if (null != r) { var e = r[i]; if (e) return e.call(r); if ("function" == typeof r.next) return r; if (!isNaN(r.length)) { var o = -1, a = function e() { for (; ++o < r.length;) if (n.call(r, o)) return e.value = r[o], e.done = !1, e; return e.value = t, e.done = !0, e; }; return a.next = a; } } throw new TypeError(i18n_utils_typeof(r) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, c(v, "constructor", GeneratorFunctionPrototype), c(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = c(GeneratorFunctionPrototype, u, "GeneratorFunction"), r.isGeneratorFunction = function (t) { var r = "function" == typeof t && t.constructor; return !!r && (r === GeneratorFunction || "GeneratorFunction" === (r.displayName || r.name)); }, r.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, c(t, u, "GeneratorFunction")), t.prototype = Object.create(v), t; }, r.awrap = function (t) { return { __await: t }; }, g(AsyncIterator.prototype), c(AsyncIterator.prototype, a, function () { return this; }), r.AsyncIterator = AsyncIterator, r.async = function (t, e, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(h(t, e, n, o), i); return r.isGeneratorFunction(e) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, g(v), c(v, u, "Generator"), c(v, i, function () { return this; }), c(v, "toString", function () { return "[object Generator]"; }), r.keys = function (t) { var r = Object(t), e = []; for (var n in r) e.unshift(n); return function t() { for (; e.length;) if ((n = e.pop()) in r) return t.value = n, t.done = !1, t; return t.done = !0, t; }; }, r.values = x, Context.prototype = { constructor: Context, reset: function reset(r) { if (this.prev = this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(m), !r) for (var e in this) "t" === e.charAt(0) && n.call(this, e) && !isNaN(+e.slice(1)) && (this[e] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0][4]; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(r) { if (this.done) throw r; var e = this; function n(t) { a.type = "throw", a.arg = r, e.next = t; } for (var o = e.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i[4], u = this.prev, c = i[1], h = i[2]; if (-1 === i[0]) return n("end"), !1; if (!c && !h) throw Error("try statement without catch or finally"); if (null != i[0] && i[0] <= u) { if (u < c) return this.method = "next", this.arg = t, n(c), !0; if (u < h) return n(h), !1; } } }, abrupt: function abrupt(t, r) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var n = this.tryEntries[e]; if (n[0] > -1 && n[0] <= this.prev && this.prev < n[2]) { var o = n; break; } } o && ("break" === t || "continue" === t) && o[0] <= r && r <= o[2] && (o = null); var i = o ? o[4] : {}; return i.type = t, i.arg = r, o ? (this.method = "next", this.next = o[2], f) : this.complete(i); }, complete: function complete(t, r) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && r && (this.next = r), f; }, finish: function finish(t) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var e = this.tryEntries[r]; if (e[2] === t) return this.complete(e[4], e[3]), m(e), f; } }, "catch": function _catch(t) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var e = this.tryEntries[r]; if (e[0] === t) { var n = e[4]; if ("throw" === n.type) { var o = n.arg; m(e); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(r, e, n) { return this.delegate = { i: x(r), r: e, n: n }, "next" === this.method && (this.arg = t), f; } }, r; }\nfunction i18n_utils_typeof(o) { "@babel/helpers - typeof"; return i18n_utils_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, i18n_utils_typeof(o); }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\n/**\n * i18n-utils.js - FileToQR 다국어 지원 유틸리티\n * 버전: 1.4.0\n * 최종 업데이트: 2025-07-26\n * \n * 이 모듈은 다국어 지원을 위한 핵심 기능을 제공합니다:\n * - 언어 리소스 로드\n * - 언어 전환\n * - 문자열 번역\n * - 날짜 및 시간 형식 지원\n * - RTL 언어 지원\n */\n\n\n\n\n// 전역 객체 설정\nwindow.FileToQR = window.FileToQR || {};\nwindow.FileToQR.i18n = window.FileToQR.i18n || {};\n\n// 언어 리소스 캐시\nvar translations = {};\nvar currentLanguage = config.LANGUAGE_CONFIG.defaultLanguage;\nvar loadedLanguages = [];\n\n// 설정 관련 변수\nvar defaultLanguage = config.LANGUAGE_CONFIG.defaultLanguage;\nvar supportedLanguages = config.LANGUAGE_CONFIG.supportedLanguages;\nvar rtlLanguages = config.LANGUAGE_CONFIG.rtlLanguages;\n\n// 현재 언어 getter/setter\nvar getCurrentLang = function getCurrentLang() {\n  return currentLanguage;\n};\nvar getDefaultLang = function getDefaultLang() {\n  return defaultLanguage;\n};\nvar getSupportedLangs = function getSupportedLangs() {\n  return supportedLanguages;\n};\nvar isRTL = function isRTL(lang) {\n  return rtlLanguages.includes(lang || currentLanguage);\n};\nvar getDirectionForLang = function getDirectionForLang(lang) {\n  return isRTL(lang) ? \'rtl\' : \'ltr\';\n};\n\n/**\n * 다국어 지원 초기화\n * @param {Object} options 초기화 옵션\n * @returns {Promise<boolean>} 초기화 성공 여부\n */\nfunction init() {\n  return _init.apply(this, arguments);\n}\n\n/**\n * 언어 리소스를 로드한다\n * @param {string} lang 언어 코드\n * @returns {Promise<Object>} 언어 리소스\n */\nfunction _init() {\n  _init = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    var options,\n      detectedLang,\n      urlLang,\n      savedLang,\n      browserLang,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n          _context.prev = 1;\n          console.log(\'다국어 지원 초기화 시작\');\n\n          // 언어 감지 순서:\n          // 1. URL 경로에서 언어 감지\n          // 2. 저장된 언어\n          // 3. 브라우저 언어\n          // 4. 기본 언어\n          detectedLang = null; // 1. URL 경로에서 언어 감지\n          if (typeof window !== \'undefined\') {\n            urlLang = url_utils.getLanguageFromUrl();\n            if (urlLang && supportedLanguages.includes(urlLang)) {\n              detectedLang = urlLang;\n              console.log("URL\\uC5D0\\uC11C \\uC5B8\\uC5B4 \\uAC10\\uC9C0: ".concat(urlLang));\n            }\n          }\n\n          // 2. 저장된 언어 불러오기\n          if (!detectedLang && options.useSavedLang !== false && typeof localStorage !== \'undefined\') {\n            savedLang = localStorage.getItem(config.STORAGE_CONFIG.keys.language);\n            if (savedLang && supportedLanguages.includes(savedLang)) {\n              detectedLang = savedLang;\n              console.log("\\uC800\\uC7A5\\uB41C \\uC5B8\\uC5B4 \\uBD88\\uB7EC\\uC634: ".concat(savedLang));\n            }\n          }\n\n          // 3. 브라우저 언어 감지\n          if (!detectedLang && options.detectBrowserLang !== false && typeof navigator !== \'undefined\') {\n            browserLang = navigator.language.split(\'-\')[0];\n            if (supportedLanguages.includes(browserLang)) {\n              detectedLang = browserLang;\n              console.log("\\uBE0C\\uB77C\\uC6B0\\uC800 \\uC5B8\\uC5B4 \\uAC10\\uC9C0: ".concat(browserLang));\n            }\n          }\n\n          // 최종 선택된 언어 설정 (기본값은 defaultLanguage)\n          currentLanguage = detectedLang || defaultLanguage;\n          console.log("\\uD604\\uC7AC \\uC5B8\\uC5B4 \\uC124\\uC815: ".concat(currentLanguage));\n\n          // 언어 리소스 로드\n          _context.next = 11;\n          return loadLanguageResource(currentLanguage);\n        case 11:\n          // 언어 방향 설정\n          setDocumentDirection(currentLanguage);\n\n          // 메타 태그 업데이트\n          updateMetaTags();\n\n          // 초기화 완료\n          console.log(\'다국어 지원 초기화 완료\');\n          return _context.abrupt("return", true);\n        case 17:\n          _context.prev = 17;\n          _context.t0 = _context["catch"](1);\n          console.error(\'다국어 지원 초기화 실패:\', _context.t0);\n          return _context.abrupt("return", false);\n        case 21:\n        case "end":\n          return _context.stop();\n      }\n    }, _callee, null, [[1, 17]]);\n  }));\n  return _init.apply(this, arguments);\n}\nfunction loadLanguageResource(_x) {\n  return _loadLanguageResource.apply(this, arguments);\n}\n/**\n * 언어 변경\n * @param {string} lang 변경할 언어 코드\n * @returns {Promise<boolean>} 변경 성공 여부\n */\nfunction _loadLanguageResource() {\n  _loadLanguageResource = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(lang) {\n    var url, response, resource;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!translations[lang]) {\n            _context2.next = 3;\n            break;\n          }\n          console.log("\\uC774\\uBBF8 \\uB85C\\uB4DC\\uB41C \\uC5B8\\uC5B4 \\uB9AC\\uC18C\\uC2A4 \\uC0AC\\uC6A9: ".concat(lang));\n          return _context2.abrupt("return", translations[lang]);\n        case 3:\n          _context2.prev = 3;\n          console.log("\\uC5B8\\uC5B4 \\uB9AC\\uC18C\\uC2A4 \\uB85C\\uB4DC \\uC911: ".concat(lang));\n\n          // 요청 URL 생성 (Config에서 경로 설정 사용)\n          url = "".concat(config.PATH_CONFIG.i18n).concat(lang, ".json"); // 리소스 가져오기\n          _context2.next = 8;\n          return fetch(url);\n        case 8:\n          response = _context2.sent;\n          if (response.ok) {\n            _context2.next = 11;\n            break;\n          }\n          throw new Error("\\uC5B8\\uC5B4 \\uB9AC\\uC18C\\uC2A4 \\uB85C\\uB4DC \\uC2E4\\uD328 (".concat(response.status, "): ").concat(lang));\n        case 11:\n          _context2.next = 13;\n          return response.json();\n        case 13:\n          resource = _context2.sent;\n          // 언어 리소스 저장\n          translations[lang] = resource;\n          loadedLanguages.push(lang);\n          console.log("\\uC5B8\\uC5B4 \\uB9AC\\uC18C\\uC2A4 \\uB85C\\uB4DC \\uC644\\uB8CC: ".concat(lang));\n          return _context2.abrupt("return", resource);\n        case 20:\n          _context2.prev = 20;\n          _context2.t0 = _context2["catch"](3);\n          console.error("\\uC5B8\\uC5B4 \\uB9AC\\uC18C\\uC2A4 \\uB85C\\uB4DC \\uC911 \\uC624\\uB958: ".concat(lang), _context2.t0);\n\n          // 기본 언어가 아닌 경우, 기본 언어 리소스 로드\n          if (!(lang !== defaultLanguage)) {\n            _context2.next = 26;\n            break;\n          }\n          console.log("\\uAE30\\uBCF8 \\uC5B8\\uC5B4(".concat(defaultLanguage, ") \\uB9AC\\uC18C\\uC2A4 \\uC0AC\\uC6A9"));\n          return _context2.abrupt("return", loadLanguageResource(defaultLanguage));\n        case 26:\n          return _context2.abrupt("return", {});\n        case 27:\n        case "end":\n          return _context2.stop();\n      }\n    }, _callee2, null, [[3, 20]]);\n  }));\n  return _loadLanguageResource.apply(this, arguments);\n}\nfunction changeLanguage(_x2) {\n  return _changeLanguage.apply(this, arguments);\n}\n\n/**\n * 문서의 방향을 언어에 따라 설정\n * @param {string} lang 언어 코드\n */\nfunction _changeLanguage() {\n  _changeLanguage = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(lang) {\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          // 지원하지 않는 언어인 경우\n          if (!supportedLanguages.includes(lang)) {\n            console.warn("\\uC9C0\\uC6D0\\uD558\\uC9C0 \\uC54A\\uB294 \\uC5B8\\uC5B4: ".concat(lang, ", \\uAE30\\uBCF8 \\uC5B8\\uC5B4(").concat(defaultLanguage, ")\\uB85C \\uB300\\uCCB4"));\n            lang = defaultLanguage;\n          }\n\n          // 현재 언어와 같으면 무시\n          if (!(lang === currentLanguage)) {\n            _context3.next = 5;\n            break;\n          }\n          console.log("\\uC774\\uBBF8 ".concat(lang, " \\uC5B8\\uC5B4\\uB97C \\uC0AC\\uC6A9 \\uC911"));\n          return _context3.abrupt("return", true);\n        case 5:\n          _context3.next = 7;\n          return loadLanguageResource(lang);\n        case 7:\n          // 현재 언어 변경\n          currentLanguage = lang;\n\n          // 로컬 스토리지에 저장\n          if (typeof localStorage !== \'undefined\') {\n            localStorage.setItem(config.STORAGE_CONFIG.keys.language, lang);\n          }\n\n          // 언어 방향 설정\n          setDocumentDirection(lang);\n\n          // 페이지 번역 적용\n          applyTranslations();\n          console.log("\\uC5B8\\uC5B4 \\uBCC0\\uACBD \\uC644\\uB8CC: ".concat(lang));\n          return _context3.abrupt("return", true);\n        case 15:\n          _context3.prev = 15;\n          _context3.t0 = _context3["catch"](0);\n          console.error(\'언어 변경 실패:\', _context3.t0);\n          return _context3.abrupt("return", false);\n        case 19:\n        case "end":\n          return _context3.stop();\n      }\n    }, _callee3, null, [[0, 15]]);\n  }));\n  return _changeLanguage.apply(this, arguments);\n}\nfunction setDocumentDirection(lang) {\n  if (typeof document === \'undefined\') return;\n  var dir = isRTL(lang) ? \'rtl\' : \'ltr\';\n  document.documentElement.dir = dir;\n  document.body.dir = dir;\n\n  // RTL 언어일 경우 RTL 스타일시트 로드\n  if (isRTL(lang)) {\n    if (!document.getElementById(\'rtl-stylesheet\')) {\n      var rtlLink = document.createElement(\'link\');\n      rtlLink.id = \'rtl-stylesheet\';\n      rtlLink.rel = \'stylesheet\';\n      rtlLink.href = \'/assets/css/rtl.css\';\n      document.head.appendChild(rtlLink);\n    }\n  } else {\n    // LTR 언어일 경우 RTL 스타일시트 제거\n    var _rtlLink = document.getElementById(\'rtl-stylesheet\');\n    if (_rtlLink) {\n      _rtlLink.remove();\n    }\n  }\n}\n\n/**\n * 지정된 언어로 페이지 이동\n * @param {string} lang 이동할 언어 코드\n */\nfunction navigateToLanguage(lang) {\n  try {\n    // 지원하지 않는 언어인 경우\n    if (!supportedLanguages.includes(lang)) {\n      console.warn("\\uC9C0\\uC6D0\\uD558\\uC9C0 \\uC54A\\uB294 \\uC5B8\\uC5B4: ".concat(lang));\n      return;\n    }\n    console.log("\\uC5B8\\uC5B4 \\uBCC0\\uACBD \\uBC0F \\uD398\\uC774\\uC9C0 \\uC774\\uB3D9: ".concat(currentLanguage, " \\u2192 ").concat(lang));\n\n    // URL 유틸리티를 사용하여 다국어 URL 생성\n    var languageUrl = url_utils.getLanguageUrl(lang);\n    console.log("\\uC774\\uB3D9\\uD560 URL: ".concat(languageUrl));\n\n    // 페이지 이동\n    window.location.href = languageUrl;\n  } catch (error) {\n    console.error(\'언어 변경 중 오류 발생:\', error);\n  }\n}\n\n/**\n * 페이지의 모든 번역 적용\n */\nfunction applyTranslations() {\n  if (typeof document === \'undefined\') return;\n\n  // data-i18n 속성이 있는 모든 요소 찾기\n  var elements = document.querySelectorAll(\'[data-i18n]\');\n  elements.forEach(function (el) {\n    var key = el.getAttribute(\'data-i18n\');\n    var translated = translate(key);\n    if (translated) {\n      // placeholder, title, value 속성이 있는 경우 해당 속성에 번역 적용\n      if (el.hasAttribute(\'placeholder\')) {\n        el.setAttribute(\'placeholder\', translated);\n      } else if (el.hasAttribute(\'title\')) {\n        el.setAttribute(\'title\', translated);\n      } else if (el.hasAttribute(\'value\')) {\n        el.setAttribute(\'value\', translated);\n      } else {\n        // 그 외 요소 내용 교체\n        el.textContent = translated;\n      }\n    }\n  });\n\n  // 언어 변경 이벤트 발생\n  if (typeof window !== \'undefined\') {\n    window.dispatchEvent(new CustomEvent(\'languageChanged\', {\n      detail: {\n        language: currentLanguage\n      }\n    }));\n  }\n}\n\n/**\n * i18n URL 키에서 URL 생성 (i18n 데이터에 저장된 URL 정보 사용)\n * @param {string} key - URL 번역 키 (예: \'urls.home\')\n * @param {Object} [options={}] - 추가 옵션\n * @returns {string} 생성된 URL\n */\nfunction getUrlFromKey(key) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  // 번역된 URL 경로 가져오기\n  var urlPath = translate(key);\n\n  // 경로가 없으면 기본값 반환\n  if (!urlPath || urlPath === key) {\n    console.warn("URL \\uD0A4 \\uC5C6\\uC74C: ".concat(key, ", \\uAE30\\uBCF8 \\uACBD\\uB85C \\uC0AC\\uC6A9"));\n\n    // 키에서 페이지 이름 추출 (예: \'urls.home\' -> \'home\')\n    var pageMatches = key.match(/urls\\.(\\w+)$/);\n    if (pageMatches && pageMatches[1]) {\n      var pageName = pageMatches[1];\n      var pagePath = config.getPagePath(pageName);\n      if (pagePath) {\n        return url_utils.getI18nUrl(pagePath, null, options);\n      }\n    }\n    return \'/\';\n  }\n\n  // 경로가 이미 절대 경로인 경우\n  if (urlPath.startsWith(\'http://\') || urlPath.startsWith(\'https://\')) {\n    return urlPath;\n  }\n\n  // 상대 경로 또는 루트 상대 경로인 경우 언어 코드 추가\n  return url_utils.getI18nUrl(urlPath, null, options);\n}\n\n/**\n * 메타 태그 업데이트\n */\nfunction updateMetaTags() {\n  if (typeof document === \'undefined\') return;\n\n  // hreflang 태그 업데이트\n  var hreflangTags = document.querySelectorAll(\'link[rel="alternate"][hreflang]\');\n  var hasHreflangTags = hreflangTags.length > 0;\n  if (!hasHreflangTags) {\n    // hreflang 태그 없으면 생성\n    supportedLanguages.forEach(function (lang) {\n      var link = document.createElement(\'link\');\n      link.rel = \'alternate\';\n      link.hreflang = lang;\n      link.href = url_utils.getAlternateURL(lang);\n      document.head.appendChild(link);\n    });\n\n    // x-default 언어 태그 추가\n    var defaultLink = document.createElement(\'link\');\n    defaultLink.rel = \'alternate\';\n    defaultLink.hreflang = \'x-default\';\n    defaultLink.href = url_utils.getAlternateURL(defaultLanguage);\n    document.head.appendChild(defaultLink);\n  }\n\n  // 메타 태그 등 업데이트\n  updateMetaDescriptions();\n}\n\n/**\n * 메타 설명 태그 업데이트\n */\nfunction updateMetaDescriptions() {\n  if (typeof document === \'undefined\') return;\n\n  // 현재 언어의 메타 정보 가져오기\n  var metaInfo = translate(\'meta\');\n  if (!metaInfo) return;\n\n  // 제목 업데이트\n  if (metaInfo.title) {\n    document.title = metaInfo.title;\n  }\n\n  // 설명 업데이트\n  if (metaInfo.description) {\n    var descTag = document.querySelector(\'meta[name="description"]\');\n    if (descTag) {\n      descTag.setAttribute(\'content\', metaInfo.description);\n    } else {\n      var meta = document.createElement(\'meta\');\n      meta.name = \'description\';\n      meta.content = metaInfo.description;\n      document.head.appendChild(meta);\n    }\n  }\n\n  // 키워드 업데이트\n  if (metaInfo.keywords) {\n    var keywordsTag = document.querySelector(\'meta[name="keywords"]\');\n    if (keywordsTag) {\n      keywordsTag.setAttribute(\'content\', metaInfo.keywords);\n    } else {\n      var _meta = document.createElement(\'meta\');\n      _meta.name = \'keywords\';\n      _meta.content = metaInfo.keywords;\n      document.head.appendChild(_meta);\n    }\n  }\n}\n\n/**\n * 텍스트 번역\n * @param {string} key 번역 키\n * @param {Object} [params={}] 대체 파라미터\n * @param {string} [lang=currentLanguage] 언어 코드\n * @returns {string} 번역된 문자열 또는 키 자체\n */\nfunction translate(key) {\n  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var lang = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : currentLanguage;\n  if (!key) return \'\';\n\n  // 현재 언어 번역 없으면 기본 언어 사용\n  var langData = translations[lang] || translations[defaultLanguage] || {};\n\n  // 중첩 키 지원 (예: \'header.title\')\n  var value = key.split(\'.\').reduce(function (obj, k) {\n    return obj && obj[k];\n  }, langData);\n\n  // 없으면 키 그대로 반환\n  if (value === undefined || value === null) {\n    console.warn("\\uBC88\\uC5ED \\uD0A4 \\uC5C6\\uC74C: ".concat(key));\n    return key;\n  }\n\n  // 파라미터 대체\n  if (params && typeof value === \'string\') {\n    Object.keys(params).forEach(function (param) {\n      value = value.replace(new RegExp("{{".concat(param, "}}"), \'g\'), params[param]);\n    });\n  }\n  return value;\n}\n\n/**\n * 날짜 형식화\n * @param {Date|string|number} date 날짜 객체 또는 timestamp\n * @param {string} [format=\'short\'] 형식 (short, medium, long, full)\n * @param {string} [lang=currentLanguage] 언어 코드\n * @returns {string} 형식화된 날짜\n */\nfunction formatDate(date) {\n  var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \'short\';\n  var lang = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : currentLanguage;\n  if (!date) return \'\';\n  try {\n    // Date 객체로 변환\n    var dateObj = typeof date === \'string\' || typeof date === \'number\' ? new Date(date) : date;\n    if (isNaN(dateObj.getTime())) {\n      console.warn(\'유효하지 않은 날짜:\', date);\n      return String(date);\n    }\n\n    // Intl API로 날짜 형식화\n    var options = {\n      "short": {\n        year: \'numeric\',\n        month: \'numeric\',\n        day: \'numeric\'\n      },\n      medium: {\n        year: \'numeric\',\n        month: \'short\',\n        day: \'numeric\'\n      },\n      "long": {\n        year: \'numeric\',\n        month: \'long\',\n        day: \'numeric\',\n        weekday: \'long\'\n      },\n      full: {\n        year: \'numeric\',\n        month: \'long\',\n        day: \'numeric\',\n        weekday: \'long\',\n        hour: \'numeric\',\n        minute: \'numeric\'\n      }\n    };\n    return new Intl.DateTimeFormat(getLangLocale(lang), options[format] || options["short"]).format(dateObj);\n  } catch (error) {\n    console.error(\'날짜 형식화 오류:\', error);\n    return String(date);\n  }\n}\n\n/**\n * 상대적 시간 표시\n * @param {Date|string|number} date 날짜 객체 또는 timestamp\n * @param {string} [lang=currentLanguage] 언어 코드\n * @returns {string} 상대적 시간 문자열\n */\nfunction relativeTime(date) {\n  var lang = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : currentLanguage;\n  if (!date) return \'\';\n  try {\n    var dateObj = typeof date === \'string\' || typeof date === \'number\' ? new Date(date) : date;\n    if (isNaN(dateObj.getTime())) {\n      console.warn(\'유효하지 않은 날짜:\', date);\n      return String(date);\n    }\n    var now = new Date();\n    var diff = now.getTime() - dateObj.getTime();\n    var seconds = Math.floor(diff / 1000);\n    var minutes = Math.floor(seconds / 60);\n    var hours = Math.floor(minutes / 60);\n    var days = Math.floor(hours / 24);\n    var months = Math.floor(days / 30);\n    var years = Math.floor(months / 12);\n\n    // 상대적 시간을 위한 번역 키\n    var timeKeys = {\n      justNow: \'time.just_now\',\n      minutesAgo: \'time.minutes_ago\',\n      hoursAgo: \'time.hours_ago\',\n      daysAgo: \'time.days_ago\',\n      monthsAgo: \'time.months_ago\',\n      yearsAgo: \'time.years_ago\'\n    };\n    if (seconds < 60) {\n      return translate(timeKeys.justNow, {}, lang);\n    } else if (minutes < 60) {\n      return translate(timeKeys.minutesAgo, {\n        count: minutes\n      }, lang);\n    } else if (hours < 24) {\n      return translate(timeKeys.hoursAgo, {\n        count: hours\n      }, lang);\n    } else if (days < 30) {\n      return translate(timeKeys.daysAgo, {\n        count: days\n      }, lang);\n    } else if (months < 12) {\n      return translate(timeKeys.monthsAgo, {\n        count: months\n      }, lang);\n    } else {\n      return translate(timeKeys.yearsAgo, {\n        count: years\n      }, lang);\n    }\n  } catch (error) {\n    console.error(\'상대적 시간 계산 오류:\', error);\n    return String(date);\n  }\n}\n\n/**\n * 언어 코드에 맞는 로케일 문자열 반환\n * @param {string} lang 언어 코드\n * @returns {string} 로케일 문자열\n */\nfunction getLangLocale(lang) {\n  var localeMap = {\n    ko: \'ko-KR\',\n    en: \'en-US\',\n    zh: \'zh-CN\',\n    ja: \'ja-JP\',\n    ar: \'ar-SA\',\n    he: \'he-IL\'\n  };\n  return localeMap[lang] || lang;\n}\n\n/**\n * 복수형 문자열 반환\n * @param {string} key 번역 키\n * @param {number} count 수량\n * @param {string} [lang=currentLanguage] 언어 코드\n * @returns {string} 복수형 문자열\n */\nfunction plural(key, count) {\n  var lang = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : currentLanguage;\n  if (!key) return \'\';\n  var langData = translations[lang] || translations[defaultLanguage] || {};\n\n  // 중첩 키 객체 찾기\n  var keyObj = key.split(\'.\').reduce(function (obj, k) {\n    return obj && obj[k];\n  }, langData);\n  if (!keyObj || i18n_utils_typeof(keyObj) !== \'object\') {\n    console.warn("\\uBCF5\\uC218\\uD615 \\uD0A4 \\uC5C6\\uC74C: ".concat(key));\n    return key;\n  }\n\n  // 언어별 복수형 규칙\n  var form = \'other\';\n\n  // 한국어, 일본어, 중국어: 복수형 구분 없음\n  if ([\'ko\', \'ja\', \'zh\'].includes(lang)) {\n    form = \'other\';\n  }\n  // 영어: 1=one, 그 외=other\n  else if (lang === \'en\') {\n    form = count === 1 ? \'one\' : \'other\';\n  }\n  // 아랍어: 복잡한 복수형 규칙\n  else if (lang === \'ar\') {\n    if (count === 0) form = \'zero\';else if (count === 1) form = \'one\';else if (count === 2) form = \'two\';else if (count >= 3 && count <= 10) form = \'few\';else if (count >= 11 && count <= 99) form = \'many\';else form = \'other\';\n  }\n\n  // 해당 복수형이 있으면 사용, 없으면 other, 그것도 없으면 키 그대로\n  return keyObj[form] || keyObj.other || key;\n}\n\n/**\n * 언어 리소스 가져오기\n * @param {string} [lang=currentLanguage] 언어 코드\n * @returns {Object} 언어 리소스 객체\n */\nfunction getTranslations() {\n  var lang = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : currentLanguage;\n  return translations[lang] || translations[defaultLanguage] || {};\n}\n\n// i18n 객체 생성\nvar I18n = {\n  init: init,\n  translate: t,\n  changeLanguage: changeLanguage,\n  formatDate: formatDate,\n  relativeTime: relativeTime,\n  plural: plural,\n  getCurrentLang: getCurrentLang,\n  getDefaultLang: getDefaultLang,\n  getSupportedLangs: getSupportedLangs,\n  isRTL: isRTL,\n  getDirectionForLang: getDirectionForLang,\n  applyTranslations: applyTranslations,\n  updateMetaTags: updateMetaTags,\n  navigateToLanguage: navigateToLanguage,\n  getUrlFromKey: getUrlFromKey,\n  getTranslations: getTranslations\n};\n\n// 외부에서 t() 함수로 간편하게 접근할 수 있도록 별칭 제공\nfunction t(key) {\n  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var lang = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : currentLanguage;\n  return translate(key, params, lang);\n}\n\n// 전역 객체에 등록\nwindow.FileToQR.i18n = I18n;\nwindow.FileToQR.t = t;\n\n// Export for ES modules\n/* harmony default export */ const i18n_utils = (I18n);\n;// ./assets/js/core/app-core.js\nfunction app_core_typeof(o) { "@babel/helpers - typeof"; return app_core_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, app_core_typeof(o); }\nfunction app_core_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ app_core_regeneratorRuntime = function _regeneratorRuntime() { return r; }; var t, r = {}, e = Object.prototype, n = e.hasOwnProperty, o = "function" == typeof Symbol ? Symbol : {}, i = o.iterator || "@@iterator", a = o.asyncIterator || "@@asyncIterator", u = o.toStringTag || "@@toStringTag"; function c(t, r, e, n) { return Object.defineProperty(t, r, { value: e, enumerable: !n, configurable: !n, writable: !n }); } try { c({}, ""); } catch (t) { c = function c(t, r, e) { return t[r] = e; }; } function h(r, e, n, o) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype); return c(a, "_invoke", function (r, e, n) { var o = 1; return function (i, a) { if (3 === o) throw Error("Generator is already running"); if (4 === o) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var u = n.delegate; if (u) { var c = d(u, n); if (c) { if (c === f) continue; return c; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (1 === o) throw o = 4, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = 3; var h = s(r, e, n); if ("normal" === h.type) { if (o = n.done ? 4 : 2, h.arg === f) continue; return { value: h.arg, done: n.done }; } "throw" === h.type && (o = 4, n.method = "throw", n.arg = h.arg); } }; }(r, n, new Context(o || [])), !0), a; } function s(t, r, e) { try { return { type: "normal", arg: t.call(r, e) }; } catch (t) { return { type: "throw", arg: t }; } } r.wrap = h; var f = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var l = {}; c(l, i, function () { return this; }); var p = Object.getPrototypeOf, y = p && p(p(x([]))); y && y !== e && n.call(y, i) && (l = y); var v = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(l); function g(t) { ["next", "throw", "return"].forEach(function (r) { c(t, r, function (t) { return this._invoke(r, t); }); }); } function AsyncIterator(t, r) { function e(o, i, a, u) { var c = s(t[o], t, i); if ("throw" !== c.type) { var h = c.arg, f = h.value; return f && "object" == app_core_typeof(f) && n.call(f, "__await") ? r.resolve(f.__await).then(function (t) { e("next", t, a, u); }, function (t) { e("throw", t, a, u); }) : r.resolve(f).then(function (t) { h.value = t, a(h); }, function (t) { return e("throw", t, a, u); }); } u(c.arg); } var o; c(this, "_invoke", function (t, n) { function i() { return new r(function (r, o) { e(t, n, r, o); }); } return o = o ? o.then(i, i) : i(); }, !0); } function d(r, e) { var n = e.method, o = r.i[n]; if (o === t) return e.delegate = null, "throw" === n && r.i["return"] && (e.method = "return", e.arg = t, d(r, e), "throw" === e.method) || "return" !== n && (e.method = "throw", e.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), f; var i = s(o, r.i, e.arg); if ("throw" === i.type) return e.method = "throw", e.arg = i.arg, e.delegate = null, f; var a = i.arg; return a ? a.done ? (e[r.r] = a.value, e.next = r.n, "return" !== e.method && (e.method = "next", e.arg = t), e.delegate = null, f) : a : (e.method = "throw", e.arg = new TypeError("iterator result is not an object"), e.delegate = null, f); } function w(t) { this.tryEntries.push(t); } function m(r) { var e = r[4] || {}; e.type = "normal", e.arg = t, r[4] = e; } function Context(t) { this.tryEntries = [[-1]], t.forEach(w, this), this.reset(!0); } function x(r) { if (null != r) { var e = r[i]; if (e) return e.call(r); if ("function" == typeof r.next) return r; if (!isNaN(r.length)) { var o = -1, a = function e() { for (; ++o < r.length;) if (n.call(r, o)) return e.value = r[o], e.done = !1, e; return e.value = t, e.done = !0, e; }; return a.next = a; } } throw new TypeError(app_core_typeof(r) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, c(v, "constructor", GeneratorFunctionPrototype), c(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = c(GeneratorFunctionPrototype, u, "GeneratorFunction"), r.isGeneratorFunction = function (t) { var r = "function" == typeof t && t.constructor; return !!r && (r === GeneratorFunction || "GeneratorFunction" === (r.displayName || r.name)); }, r.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, c(t, u, "GeneratorFunction")), t.prototype = Object.create(v), t; }, r.awrap = function (t) { return { __await: t }; }, g(AsyncIterator.prototype), c(AsyncIterator.prototype, a, function () { return this; }), r.AsyncIterator = AsyncIterator, r.async = function (t, e, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(h(t, e, n, o), i); return r.isGeneratorFunction(e) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, g(v), c(v, u, "Generator"), c(v, i, function () { return this; }), c(v, "toString", function () { return "[object Generator]"; }), r.keys = function (t) { var r = Object(t), e = []; for (var n in r) e.unshift(n); return function t() { for (; e.length;) if ((n = e.pop()) in r) return t.value = n, t.done = !1, t; return t.done = !0, t; }; }, r.values = x, Context.prototype = { constructor: Context, reset: function reset(r) { if (this.prev = this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(m), !r) for (var e in this) "t" === e.charAt(0) && n.call(this, e) && !isNaN(+e.slice(1)) && (this[e] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0][4]; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(r) { if (this.done) throw r; var e = this; function n(t) { a.type = "throw", a.arg = r, e.next = t; } for (var o = e.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i[4], u = this.prev, c = i[1], h = i[2]; if (-1 === i[0]) return n("end"), !1; if (!c && !h) throw Error("try statement without catch or finally"); if (null != i[0] && i[0] <= u) { if (u < c) return this.method = "next", this.arg = t, n(c), !0; if (u < h) return n(h), !1; } } }, abrupt: function abrupt(t, r) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var n = this.tryEntries[e]; if (n[0] > -1 && n[0] <= this.prev && this.prev < n[2]) { var o = n; break; } } o && ("break" === t || "continue" === t) && o[0] <= r && r <= o[2] && (o = null); var i = o ? o[4] : {}; return i.type = t, i.arg = r, o ? (this.method = "next", this.next = o[2], f) : this.complete(i); }, complete: function complete(t, r) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && r && (this.next = r), f; }, finish: function finish(t) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var e = this.tryEntries[r]; if (e[2] === t) return this.complete(e[4], e[3]), m(e), f; } }, "catch": function _catch(t) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var e = this.tryEntries[r]; if (e[0] === t) { var n = e[4]; if ("throw" === n.type) { var o = n.arg; m(e); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(r, e, n) { return this.delegate = { i: x(r), r: e, n: n }, "next" === this.method && (this.arg = t), f; } }, r; }\nfunction app_core_createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = app_core_unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }\nfunction app_core_unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return app_core_arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? app_core_arrayLikeToArray(r, a) : void 0; } }\nfunction app_core_arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction app_core_asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction app_core_asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { app_core_asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { app_core_asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\n/**\n * app-core.js - FileToQR 애플리케이션 코어 모듈\n * 버전: 1.2.0\n * 최종 업데이트: 2025-07-26\n * 참조: ../../docs/architecture/module-registry.md\n * \n * 이 모듈은 애플리케이션의 핵심 기능을 관리합니다:\n * - 모듈 초기화 및 등록\n * - 이벤트 관리\n * - 네비게이션 및 라우팅\n * - 전역 상태 관리\n * - 컴포넌트 시스템 관리\n * - 버전 관리\n * - 페이지별 초기화\n * - 다국어 지원\n * \n * 참고: 이 모듈과 main.js의 역할 구분\n * - app-core.js: 애플리케이션의 핵심 구성 요소, 공통 유틸리티 및 모듈 정의\n * - main.js: 특정 페이지 로직과 컴포넌트의 초기화를 처리합니다.\n * \n * 두 모듈 모두 유지하는 이유는 다음과 같습니다:\n * 1. app-core.js는 구성 및 유틸리티에 집중하며 전체 애플리케이션에서 공유됩니다.\n * 2. main.js는 페이지별 특정 로직과 컴포넌트 초기화를 처리합니다.\n * 3. 이러한 분리는 단일 책임 원칙을 지키며 유지보수성을 높입니다.\n */\n\n// 디버깅을 위한 로그 추가\nconsole.log(\'app-core.js 로딩 시작\');\n\n// 필요한 모듈 임포트\n\n\n\n\n// 글로벌 네임스페이스 설정\nwindow.FileToQR = window.FileToQR || {};\n\n// 애플리케이션 버전\nvar app_core_APP_VERSION = config.APP_VERSION;\n\n/**\n * 현재 페이지 식별자 반환\n * @returns {string} 페이지 식별자\n */\nfunction getCurrentPage() {\n  try {\n    return url_utils.getPageIdFromUrl() || \'unknown\';\n  } catch (error) {\n    console.error(\'현재 페이지 확인 중 오류 발생:\', error);\n    return \'unknown\';\n  }\n}\n\n/**\n * 페이지 이동 함수\n * @param {string} url - 이동할 URL\n * @param {boolean} [newTab=false] - 새 탭에서 열기 여부\n */\nfunction navigateTo(url) {\n  var newTab = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  try {\n    // URL 열기\n    if (newTab) {\n      window.open(url, \'_blank\');\n    } else {\n      window.location.href = url;\n    }\n  } catch (error) {\n    console.error(\'페이지 이동 중 오류 발생:\', error);\n  }\n}\n\n/**\n * 기본 경로 가져오기\n * @returns {string} 기본 경로\n */\nfunction getBasePath() {\n  return url_utils.getBasePath();\n}\n\n/**\n * 애플리케이션 초기화\n * @returns {Promise<void>}\n */\nfunction app_core_init() {\n  return core_app_core_init.apply(this, arguments);\n}\n/**\n * 로딩 인디케이터 표시\n */\nfunction core_app_core_init() {\n  core_app_core_init = app_core_asyncToGenerator(/*#__PURE__*/app_core_regeneratorRuntime().mark(function _callee() {\n    var handlebarsScript;\n    return app_core_regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          console.log("FileToQR \\uC560\\uD50C\\uB9AC\\uCF00\\uC774\\uC158 \\uCD08\\uAE30\\uD654 \\uC2DC\\uC791 (v".concat(app_core_APP_VERSION, ")"));\n          _context.prev = 1;\n          // 1. 로딩 인디케이터 표시\n          showLoadingIndicator();\n\n          // 2. 유틸리티 모듈 초기화 (순서 중요)\n          console.log(\'기본 유틸리티 모듈 초기화 시작\');\n\n          // a. URL 유틸리티 초기화\n          console.log(\'URL 유틸리티 초기화\');\n          // URL 유틸리티는 자체 초기화 함수가 없으므로 넘어감\n\n          // b. 다국어 지원 초기화\n          console.log(\'다국어 지원 초기화\');\n          _context.next = 8;\n          return i18n_utils.init({\n            useSavedLang: true,\n            detectBrowserLang: true\n          });\n        case 8:\n          _context.prev = 8;\n          if (!(typeof window.FileToQR.TemplateUtils !== \'undefined\')) {\n            _context.next = 22;\n            break;\n          }\n          console.log(\'템플릿 유틸리티 발견, 초기화 시작\');\n\n          // 동적으로 Handlebars 로드 시도\n          if (window.Handlebars) {\n            _context.next = 17;\n            break;\n          }\n          handlebarsScript = document.createElement(\'script\');\n          handlebarsScript.src = \'https://cdn.jsdelivr.net/npm/handlebars@latest/dist/handlebars.min.js\';\n\n          // Handlebars 로드 대기\n          _context.next = 16;\n          return new Promise(function (resolve, reject) {\n            handlebarsScript.onload = resolve;\n            handlebarsScript.onerror = reject;\n            document.head.appendChild(handlebarsScript);\n          });\n        case 16:\n          console.log(\'Handlebars 라이브러리 동적 로드 완료\');\n        case 17:\n          _context.next = 19;\n          return window.FileToQR.TemplateUtils.init();\n        case 19:\n          console.log(\'템플릿 유틸리티 초기화 완료\');\n\n          // 템플릿 처리\n          _context.next = 22;\n          return window.FileToQR.TemplateUtils.processTemplates();\n        case 22:\n          _context.next = 27;\n          break;\n        case 24:\n          _context.prev = 24;\n          _context.t0 = _context["catch"](8);\n          console.error(\'템플릿 유틸리티 초기화 실패:\', _context.t0);\n          // 계속 진행 - 템플릿 없이도 기본 기능은 작동할 수 있도록\n        case 27:\n          _context.next = 29;\n          return initCurrentPage();\n        case 29:\n          // 5. 페이지 내 링크 업데이트\n          updateInternalLinks();\n\n          // 6. 언어 선택기 설정\n          setupLanguageSelector();\n\n          // 7. 로딩 인디케이터 숨기기\n          console.log(\'초기화 완료 - 로딩 인디케이터 숨김\');\n          hideLoadingIndicator();\n\n          // 8. 초기화 완료 후 추가 작업 실행\n          onAppInitialized();\n          console.log(\'애플리케이션 초기화 완료\');\n          _context.next = 42;\n          break;\n        case 37:\n          _context.prev = 37;\n          _context.t1 = _context["catch"](1);\n          console.error(\'애플리케이션 초기화 실패:\', _context.t1);\n          // 로딩 인디케이터 숨기기\n          hideLoadingIndicator();\n          // 오류 메시지 표시\n          showErrorMessage(\'애플리케이션 초기화 중 오류가 발생했습니다.\');\n        case 42:\n        case "end":\n          return _context.stop();\n      }\n    }, _callee, null, [[1, 37], [8, 24]]);\n  }));\n  return core_app_core_init.apply(this, arguments);\n}\nfunction showLoadingIndicator() {\n  // 이미 존재하는 로딩 인디케이터 확인\n  var loadingIndicator = document.getElementById(\'loading-indicator\');\n\n  // 없는 경우만 생성\n  if (!loadingIndicator) {\n    loadingIndicator = document.createElement(\'div\');\n    loadingIndicator.id = \'loading-indicator\';\n    loadingIndicator.className = \'loading-overlay\';\n    loadingIndicator.innerHTML = "\\n      <div class=\\"loading-container\\">\\n        <div class=\\"loading-spinner\\"></div>\\n        <p class=\\"loading-text\\">\\uB85C\\uB529 \\uC911... \\uD398\\uC774\\uC9C0\\uAC00 \\uB85C\\uB4DC\\uB418\\uC9C0 \\uC54A\\uC73C\\uBA74 \\uC0C8\\uB85C\\uACE0\\uCE68\\uD558\\uC138\\uC694.</p>\\n      </div>\\n    ";\n\n    // 스타일 추가\n    var style = document.createElement(\'style\');\n    style.textContent = "\\n      .loading-overlay {\\n        position: fixed;\\n        top: 0;\\n        left: 0;\\n        width: 100%;\\n        height: 100%;\\n        background-color: rgba(255, 255, 255, 0.9);\\n        display: flex;\\n        justify-content: center;\\n        align-items: center;\\n        z-index: 9999;\\n        transition: opacity 0.5s;\\n      }\\n      .loading-overlay.fade-out {\\n        opacity: 0;\\n      }\\n      .loading-container {\\n        text-align: center;\\n        padding: 2rem;\\n        background-color: white;\\n        border-radius: 0.5rem;\\n        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\\n      }\\n      .loading-spinner {\\n        display: inline-block;\\n        width: 40px;\\n        height: 40px;\\n        border: 4px solid rgba(66, 153, 225, 0.2);\\n        border-radius: 50%;\\n        border-top-color: #4299e1;\\n        animation: spin 1s ease-in-out infinite;\\n        margin-bottom: 1rem;\\n      }\\n      @keyframes spin {\\n        to { transform: rotate(360deg); }\\n      }\\n      .loading-text {\\n        color: #4a5568;\\n        font-size: 1rem;\\n        margin: 0;\\n      }\\n    ";\n    document.head.appendChild(style);\n    document.body.appendChild(loadingIndicator);\n  }\n}\n\n/**\n * 로딩 인디케이터 숨기기\n */\nfunction hideLoadingIndicator() {\n  var loadingIndicator = document.getElementById(\'loading-indicator\');\n  if (loadingIndicator) {\n    console.log(\'로딩 인디케이터 숨기기 실행\');\n    // 즉시 제거로 변경\n    if (loadingIndicator.parentNode) {\n      loadingIndicator.parentNode.removeChild(loadingIndicator);\n      console.log(\'로딩 인디케이터 제거 완료\');\n    }\n  }\n}\n\n/**\n * 현재 페이지 초기화 (페이지별 로직)\n * @private\n * @returns {Promise<void>}\n */\nfunction initCurrentPage() {\n  return _initCurrentPage.apply(this, arguments);\n}\n/**\n * 홈 페이지 초기화\n * @private\n */\nfunction _initCurrentPage() {\n  _initCurrentPage = app_core_asyncToGenerator(/*#__PURE__*/app_core_regeneratorRuntime().mark(function _callee2() {\n    var pageId, pageInitializers;\n    return app_core_regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          // 현재 페이지 ID 가져오기\n          pageId = getCurrentPage();\n          console.log("\\uD398\\uC774\\uC9C0\\uBCC4 \\uCD08\\uAE30\\uD654 \\uC2DC\\uC791: ".concat(pageId));\n\n          // 페이지별 초기화 함수 매핑\n          pageInitializers = {\n            \'home\': initHomePage,\n            \'convert\': initConvertPage,\n            \'qrcode\': initQRCodePage,\n            \'timer\': initTimerPage,\n            \'help\': initHelpPage,\n            \'contact\': initContactPage,\n            \'privacy\': initPrivacyPage,\n            \'terms\': initTermsPage\n          }; // 초기화 함수 실행\n          if (!(pageInitializers[pageId] && typeof pageInitializers[pageId] === \'function\')) {\n            _context2.next = 9;\n            break;\n          }\n          _context2.next = 7;\n          return pageInitializers[pageId]();\n        case 7:\n          _context2.next = 10;\n          break;\n        case 9:\n          console.log("".concat(pageId, " \\uD398\\uC774\\uC9C0\\uC5D0 \\uB300\\uD55C \\uBCC4\\uB3C4 \\uCD08\\uAE30\\uD654 \\uD568\\uC218 \\uC5C6\\uC74C"));\n        case 10:\n          console.log("".concat(pageId, " \\uD398\\uC774\\uC9C0 \\uCD08\\uAE30\\uD654 \\uC644\\uB8CC"));\n          _context2.next = 16;\n          break;\n        case 13:\n          _context2.prev = 13;\n          _context2.t0 = _context2["catch"](0);\n          console.error(\'페이지 초기화 실패:\', _context2.t0);\n        case 16:\n        case "end":\n          return _context2.stop();\n      }\n    }, _callee2, null, [[0, 13]]);\n  }));\n  return _initCurrentPage.apply(this, arguments);\n}\nfunction initHomePage() {\n  console.log(\'홈페이지 초기화\');\n\n  // 시작하기 버튼 이벤트만 남겨둠\n  var getStartedBtns = document.querySelectorAll(\'.get-started-btn\');\n  getStartedBtns.forEach(function (btn) {\n    btn.addEventListener(\'click\', function () {\n      navigateTo(\'convert.html\');\n    });\n  });\n}\n\n/**\n * 변환 페이지 초기화\n * @private\n */\nfunction initConvertPage() {\n  console.log(\'변환 페이지 초기화\');\n\n  // convert.js 스크립트 로드 상태 확인\n  var convertScripts = Array.from(document.scripts).filter(function (script) {\n    return script.src && (script.src.includes(\'/convert.js\') || script.src.includes(\'convert.bundle.js\'));\n  });\n  if (convertScripts.length === 0) {\n    console.warn(\'convert.js 스크립트를 찾을 수 없습니다. 동적으로 로드합니다.\');\n\n    // 필요시 동적으로 스크립트 로드\n    var script = document.createElement(\'script\');\n    script.src = \'assets/js/pages/convert.js\';\n    script.type = \'module\';\n    document.head.appendChild(script);\n\n    // 스크립트 로드 완료 후 컨트롤러 초기화\n    script.onload = function () {\n      initConvertPageController();\n    };\n  } else {\n    // 스크립트가 이미 로드된 경우 컨트롤러 초기화\n    setTimeout(initConvertPageController, 100);\n  }\n}\n\n/**\n * 변환 페이지 컨트롤러 초기화 헬퍼 함수\n */\nfunction initConvertPageController() {\n  if (window.FileToQR && window.FileToQR.ConvertPageController) {\n    console.log(\'변환 페이지 컨트롤러 초기화 시작\');\n    window.FileToQR.ConvertPageController.init();\n    console.log(\'변환 페이지 컨트롤러 초기화 완료\');\n  } else {\n    console.error(\'ConvertPageController를 찾을 수 없습니다\');\n  }\n}\n\n/**\n * QR 코드 페이지 초기화\n * @private\n */\nfunction initQRCodePage() {\n  console.log(\'QR 코드 페이지 초기화\');\n}\n\n/**\n * 타이머 페이지 초기화\n * @private\n */\nfunction initTimerPage() {\n  console.log(\'타이머 페이지 초기화\');\n}\n\n/**\n * 도움말 페이지 초기화\n * @private\n */\nfunction initHelpPage() {\n  console.log(\'도움말 페이지 초기화\');\n}\n\n/**\n * 문의하기 페이지 초기화\n * @private\n */\nfunction initContactPage() {\n  console.log(\'문의하기 페이지 초기화\');\n}\n\n/**\n * 개인정보 처리방침 페이지 초기화\n * @private\n */\nfunction initPrivacyPage() {\n  console.log(\'개인정보 처리방침 페이지 초기화\');\n}\n\n/**\n * 이용약관 페이지 초기화\n * @private\n */\nfunction initTermsPage() {\n  console.log(\'이용약관 페이지 초기화\');\n}\n\n/**\n * 템플릿 처리 및 렌더링\n */\nfunction processTemplates() {\n  try {\n    if (window.Handlebars && window.FileToQR.TemplateUtils) {\n      // 템플릿 요소 검색\n      var templateElements = document.querySelectorAll(\'[data-template]\');\n      console.log("\\uD15C\\uD50C\\uB9BF \\uC694\\uC18C \\uBC1C\\uACAC: ".concat(templateElements.length, "\\uAC1C"));\n\n      // 각 템플릿 요소 처리\n      templateElements.forEach(function (element) {\n        var templateName = element.getAttribute(\'data-template\');\n        var templateData = element.getAttribute(\'data-template-data\');\n        if (templateName) {\n          console.log("\\uD15C\\uD50C\\uB9BF \\uB80C\\uB354\\uB9C1 \\uC2DC\\uB3C4: ".concat(templateName));\n          var data = {};\n\n          // 템플릿 데이터 파싱 시도\n          if (templateData) {\n            try {\n              data = JSON.parse(templateData);\n            } catch (err) {\n              console.error("\\uD15C\\uD50C\\uB9BF \\uB370\\uC774\\uD130 JSON \\uD30C\\uC2F1 \\uC624\\uB958: ".concat(templateName), err);\n            }\n          }\n\n          // 현재 페이지 및 언어 정보 추가\n          var currentLang = getCurrentLanguage();\n          data.pageId = getCurrentPage();\n          data.currentLang = currentLang;\n          data.basePath = getBasePath();\n\n          // 템플릿 렌더링\n          window.FileToQR.TemplateUtils.loadComponent(templateName, element, data.basePath, data).then(function () {\n            console.log("\\uD15C\\uD50C\\uB9BF \\uB80C\\uB354\\uB9C1 \\uC131\\uACF5: ".concat(templateName));\n\n            // 렌더링 후 이벤트 발생\n            var event = new CustomEvent(\'template:rendered\', {\n              detail: {\n                templateName: templateName,\n                element: element\n              }\n            });\n            document.dispatchEvent(event);\n          })["catch"](function (err) {\n            console.error("\\uD15C\\uD50C\\uB9BF \\uB80C\\uB354\\uB9C1 \\uC2E4\\uD328: ".concat(templateName), err);\n          });\n        }\n      });\n\n      // 인라인 파티셜 처리\n      var partialElements = document.querySelectorAll(\'[data-partial]\');\n      partialElements.forEach(function (element) {\n        var partialName = element.getAttribute(\'data-partial\');\n        var partialData = element.getAttribute(\'data-partial-data\');\n        if (partialName && window.Handlebars.partials[partialName]) {\n          var data = {};\n\n          // 파티셜 데이터 파싱 시도\n          if (partialData) {\n            try {\n              data = JSON.parse(partialData);\n            } catch (err) {\n              console.error("\\uD30C\\uD2F0\\uC15C \\uB370\\uC774\\uD130 JSON \\uD30C\\uC2F1 \\uC624\\uB958: ".concat(partialName), err);\n            }\n          }\n\n          // 기본 데이터 추가\n          data.currentLang = getCurrentLanguage();\n          data.basePath = getBasePath();\n\n          // 파티셜 렌더링\n          var template = window.Handlebars.partials[partialName];\n          var compiledTemplate = typeof template === \'function\' ? template : window.Handlebars.compile(template);\n          element.innerHTML = compiledTemplate(data);\n          console.log("\\uD30C\\uD2F0\\uC15C \\uB80C\\uB354\\uB9C1 \\uC644\\uB8CC: ".concat(partialName));\n        }\n      });\n    }\n  } catch (error) {\n    console.error(\'템플릿 처리 중 오류:\', error);\n  }\n}\n\n/**\n * 현재 언어 코드 가져오기\n * @returns {string} 언어 코드\n */\nfunction getCurrentLanguage() {\n  return i18n_utils.getCurrentLang();\n}\n\n/**\n * 페이지 내 모든 내부 링크 업데이트\n */\nfunction updateInternalLinks() {\n  // 모든 앵커 태그 가져오기\n  var links = document.querySelectorAll(\'a\');\n  var _iterator = app_core_createForOfIteratorHelper(links),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var link = _step.value;\n      var href = link.getAttribute(\'href\');\n\n      // href 속성이 없거나 외부 링크, 앵커 링크, 자바스크립트 링크인 경우 건너뛰기\n      if (!href || href.startsWith(\'http\') || href.startsWith(\'#\') || href.startsWith(\'javascript:\') || href.startsWith(\'mailto:\') || href.startsWith(\'tel:\')) {\n        continue;\n      }\n\n      // 특수 data-i18n-url 속성이 있는 경우 (다국어 URL)\n      if (link.hasAttribute(\'data-i18n-url\')) {\n        var urlKey = link.getAttribute(\'data-i18n-url\');\n        var newHref = i18n_utils.getUrlFromKey(urlKey);\n        if (newHref) {\n          link.setAttribute(\'href\', newHref);\n        }\n        continue;\n      }\n\n      // 일반 내부 링크인 경우, 현재 언어 설정에 맞게 URL 업데이트\n      if (!url_utils.isExternalUrl(href)) {\n        var currentLang = i18n_utils.getCurrentLang();\n        var defaultLang = config.LANGUAGE_CONFIG.defaultLanguage;\n\n        // 기본 언어가 아닌 경우에만 변경\n        if (currentLang !== defaultLang) {\n          try {\n            var _newHref = url_utils.getI18nUrl(href, currentLang);\n            link.setAttribute(\'href\', _newHref);\n          } catch (error) {\n            console.warn("\\uB9C1\\uD06C ".concat(href, " \\uCC98\\uB9AC \\uC2E4\\uD328:"), error);\n          }\n        }\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\n\n/**\n * 언어 선택기 설정\n */\nfunction setupLanguageSelector() {\n  var langSelector = document.getElementById(\'lang-selector-toggle\');\n  var langDropdown = document.getElementById(\'lang-dropdown-menu\');\n  if (!langSelector || !langDropdown) {\n    console.warn(\'언어 선택기 요소를 찾을 수 없습니다\');\n    return;\n  }\n\n  // 언어 선택기 클릭 시 드롭다운 토글\n  langSelector.addEventListener(\'click\', function (event) {\n    event.preventDefault();\n    langDropdown.classList.toggle(\'show\');\n  });\n\n  // 다른 곳 클릭 시 드롭다운 닫기\n  document.addEventListener(\'click\', function (event) {\n    if (!langSelector.contains(event.target) && !langDropdown.contains(event.target)) {\n      langDropdown.classList.remove(\'show\');\n    }\n  });\n\n  // 언어 옵션 클릭 시 언어 변경\n  var langOptions = document.querySelectorAll(\'.lang-option\');\n  langOptions.forEach(function (option) {\n    option.addEventListener(\'click\', function (event) {\n      event.preventDefault();\n      var lang = option.getAttribute(\'data-lang\');\n      i18n_utils.navigateToLanguage(lang);\n    });\n  });\n}\n\n/**\n * 애플리케이션 초기화 이후 추가 작업\n */\nfunction onAppInitialized() {\n  // 언어 변경 이벤트 리스너 추가\n  window.addEventListener(\'languageChanged\', function (event) {\n    var lang = event.detail.language;\n    updateInternalLinks();\n    console.log("\\uC5B8\\uC5B4 \\uBCC0\\uACBD \\uAC10\\uC9C0: ".concat(lang));\n  });\n\n  // 기타 전역 이벤트 리스너 설정\n  // ...\n}\n\n// 전역 객체에 등록\nwindow.FileToQR.app = {\n  init: app_core_init,\n  getCurrentPage: getCurrentPage,\n  navigateTo: navigateTo,\n  getBasePath: getBasePath,\n  getCurrentLanguage: getCurrentLanguage\n};\n\n// DOMContentLoaded 이벤트 시 앱 초기화\ndocument.addEventListener(\'DOMContentLoaded\', function () {\n  window.FileToQR.app.init();\n});\n\n// Export for ES modules\n/* harmony default export */ const app_core = ({\n  init: app_core_init,\n  getCurrentPage: getCurrentPage,\n  navigateTo: navigateTo,\n  getBasePath: getBasePath,\n  getCurrentLanguage: getCurrentLanguage\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///950\n')}},Q=>{var F;F=950,Q(Q.s=F)}]);