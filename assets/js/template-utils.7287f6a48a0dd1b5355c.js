(self.webpackChunkfiletoqr=self.webpackChunkfiletoqr||[]).push([[221],{296:Q=>{function B(Q){return Promise.resolve().then((()=>{var B=new Error("Cannot find module '"+Q+"'");throw B.code="MODULE_NOT_FOUND",B}))}B.keys=()=>[],B.resolve=B,B.id=296,Q.exports=B},325:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";eval('\n// UNUSED EXPORTS: default\n\n;// ./assets/js/utils/path-utils.js\nfunction _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return r; }; var t, r = {}, e = Object.prototype, n = e.hasOwnProperty, o = "function" == typeof Symbol ? Symbol : {}, i = o.iterator || "@@iterator", a = o.asyncIterator || "@@asyncIterator", u = o.toStringTag || "@@toStringTag"; function c(t, r, e, n) { return Object.defineProperty(t, r, { value: e, enumerable: !n, configurable: !n, writable: !n }); } try { c({}, ""); } catch (t) { c = function c(t, r, e) { return t[r] = e; }; } function h(r, e, n, o) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype); return c(a, "_invoke", function (r, e, n) { var o = 1; return function (i, a) { if (3 === o) throw Error("Generator is already running"); if (4 === o) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var u = n.delegate; if (u) { var c = d(u, n); if (c) { if (c === f) continue; return c; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (1 === o) throw o = 4, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = 3; var h = s(r, e, n); if ("normal" === h.type) { if (o = n.done ? 4 : 2, h.arg === f) continue; return { value: h.arg, done: n.done }; } "throw" === h.type && (o = 4, n.method = "throw", n.arg = h.arg); } }; }(r, n, new Context(o || [])), !0), a; } function s(t, r, e) { try { return { type: "normal", arg: t.call(r, e) }; } catch (t) { return { type: "throw", arg: t }; } } r.wrap = h; var f = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var l = {}; c(l, i, function () { return this; }); var p = Object.getPrototypeOf, y = p && p(p(x([]))); y && y !== e && n.call(y, i) && (l = y); var v = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(l); function g(t) { ["next", "throw", "return"].forEach(function (r) { c(t, r, function (t) { return this._invoke(r, t); }); }); } function AsyncIterator(t, r) { function e(o, i, a, u) { var c = s(t[o], t, i); if ("throw" !== c.type) { var h = c.arg, f = h.value; return f && "object" == _typeof(f) && n.call(f, "__await") ? r.resolve(f.__await).then(function (t) { e("next", t, a, u); }, function (t) { e("throw", t, a, u); }) : r.resolve(f).then(function (t) { h.value = t, a(h); }, function (t) { return e("throw", t, a, u); }); } u(c.arg); } var o; c(this, "_invoke", function (t, n) { function i() { return new r(function (r, o) { e(t, n, r, o); }); } return o = o ? o.then(i, i) : i(); }, !0); } function d(r, e) { var n = e.method, o = r.i[n]; if (o === t) return e.delegate = null, "throw" === n && r.i["return"] && (e.method = "return", e.arg = t, d(r, e), "throw" === e.method) || "return" !== n && (e.method = "throw", e.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), f; var i = s(o, r.i, e.arg); if ("throw" === i.type) return e.method = "throw", e.arg = i.arg, e.delegate = null, f; var a = i.arg; return a ? a.done ? (e[r.r] = a.value, e.next = r.n, "return" !== e.method && (e.method = "next", e.arg = t), e.delegate = null, f) : a : (e.method = "throw", e.arg = new TypeError("iterator result is not an object"), e.delegate = null, f); } function w(t) { this.tryEntries.push(t); } function m(r) { var e = r[4] || {}; e.type = "normal", e.arg = t, r[4] = e; } function Context(t) { this.tryEntries = [[-1]], t.forEach(w, this), this.reset(!0); } function x(r) { if (null != r) { var e = r[i]; if (e) return e.call(r); if ("function" == typeof r.next) return r; if (!isNaN(r.length)) { var o = -1, a = function e() { for (; ++o < r.length;) if (n.call(r, o)) return e.value = r[o], e.done = !1, e; return e.value = t, e.done = !0, e; }; return a.next = a; } } throw new TypeError(_typeof(r) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, c(v, "constructor", GeneratorFunctionPrototype), c(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = c(GeneratorFunctionPrototype, u, "GeneratorFunction"), r.isGeneratorFunction = function (t) { var r = "function" == typeof t && t.constructor; return !!r && (r === GeneratorFunction || "GeneratorFunction" === (r.displayName || r.name)); }, r.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, c(t, u, "GeneratorFunction")), t.prototype = Object.create(v), t; }, r.awrap = function (t) { return { __await: t }; }, g(AsyncIterator.prototype), c(AsyncIterator.prototype, a, function () { return this; }), r.AsyncIterator = AsyncIterator, r.async = function (t, e, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(h(t, e, n, o), i); return r.isGeneratorFunction(e) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, g(v), c(v, u, "Generator"), c(v, i, function () { return this; }), c(v, "toString", function () { return "[object Generator]"; }), r.keys = function (t) { var r = Object(t), e = []; for (var n in r) e.unshift(n); return function t() { for (; e.length;) if ((n = e.pop()) in r) return t.value = n, t.done = !1, t; return t.done = !0, t; }; }, r.values = x, Context.prototype = { constructor: Context, reset: function reset(r) { if (this.prev = this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(m), !r) for (var e in this) "t" === e.charAt(0) && n.call(this, e) && !isNaN(+e.slice(1)) && (this[e] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0][4]; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(r) { if (this.done) throw r; var e = this; function n(t) { a.type = "throw", a.arg = r, e.next = t; } for (var o = e.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i[4], u = this.prev, c = i[1], h = i[2]; if (-1 === i[0]) return n("end"), !1; if (!c && !h) throw Error("try statement without catch or finally"); if (null != i[0] && i[0] <= u) { if (u < c) return this.method = "next", this.arg = t, n(c), !0; if (u < h) return n(h), !1; } } }, abrupt: function abrupt(t, r) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var n = this.tryEntries[e]; if (n[0] > -1 && n[0] <= this.prev && this.prev < n[2]) { var o = n; break; } } o && ("break" === t || "continue" === t) && o[0] <= r && r <= o[2] && (o = null); var i = o ? o[4] : {}; return i.type = t, i.arg = r, o ? (this.method = "next", this.next = o[2], f) : this.complete(i); }, complete: function complete(t, r) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && r && (this.next = r), f; }, finish: function finish(t) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var e = this.tryEntries[r]; if (e[2] === t) return this.complete(e[4], e[3]), m(e), f; } }, "catch": function _catch(t) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var e = this.tryEntries[r]; if (e[0] === t) { var n = e[4]; if ("throw" === n.type) { var o = n.arg; m(e); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(r, e, n) { return this.delegate = { i: x(r), r: e, n: n }, "next" === this.method && (this.arg = t), f; } }, r; }\nfunction _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\n/**\n * path-utils.js - FileToQR 파일 경로 유틸리티\n * 버전: 1.0.0\n * 최종 업데이트: 2025-07-01\n *\n * 이 모듈은 파일 경로 처리와 관련된 공통 유틸리티 함수를 제공합니다:\n * - 모듈 경로 정규화: 다양한 경로 형식을 일관된 형식으로 변환\n * - 파일 경로 변환: 상대 경로와 절대 경로 간 변환 및 다양한 경로 변형 생성\n * - 동적 임포트 지원: 여러 경로 형식을 시도하여 안정적인 모듈 로딩\n * \n * 이 유틸리티의 주요 목적:\n * 1. 경로 처리 코드 중복 제거\n * 2. 동적 모듈 로딩의 신뢰성 향상\n * 3. 다양한 환경(개발, 프로덕션, 서브 디렉토리 배포 등)에서의 호환성 보장\n * \n * 사용 예시:\n * ```\n * // 모듈 임포트\n * const module = await PathUtils.importModule(\'utils/config-manager\');\n * \n * // 경로 변형 생성\n * const paths = PathUtils.getPathVariations(\'utils/file-utils.js\');\n * ```\n */\n\n/**\n * 파일 경로 유틸리티 모듈 API 정의\n */\nvar PathUtils = {\n  /**\n   * 모듈 경로 정규화\n   * 다양한 형식의 경로를 일관된 형식으로 변환합니다.\n   * \n   * @param {string} modulePath - 정규화할 모듈 경로\n   * @returns {string} 정규화된 모듈 경로\n   * \n   * @example\n   * // 결과: \'./utils/config.js\'\n   * PathUtils.normalizePath(\'/utils/config.js\');\n   * \n   * @example\n   * // 결과: \'./components/header.js\'\n   * PathUtils.normalizePath(\'components/header.js\');\n   */\n  normalizePath: function normalizePath(modulePath) {\n    // 1. 경로가 /로 시작하는지 확인 (절대 경로)\n    if (modulePath.startsWith(\'/\')) {\n      // 앞의 / 제거\n      modulePath = modulePath.substring(1);\n    }\n\n    // 2. 상대 경로인지 확인\n    if (!modulePath.startsWith(\'./\') && !modulePath.startsWith(\'../\')) {\n      // 상대 경로로 변환\n      modulePath = \'./\' + modulePath;\n    }\n    return modulePath;\n  },\n  /**\n   * 애플리케이션의 기본 경로를 가져옵니다.\n   * URL 기반으로 현재 애플리케이션의 기본 경로(basePath)를 확인합니다.\n   * \n   * @returns {string} 애플리케이션 기본 경로\n   * \n   * @example\n   * // URL이 https://example.com/my-app/index.html인 경우\n   * // 결과: \'/my-app/\'\n   * PathUtils.getBasePath();\n   * \n   * @example\n   * // URL이 https://example.com/index.html인 경우\n   * // 결과: \'/\'\n   * PathUtils.getBasePath();\n   */\n  getBasePath: function getBasePath() {\n    if (typeof window === \'undefined\' || !window.location) {\n      return \'/\';\n    }\n    try {\n      // URL 경로 가져오기\n      var pathname = window.location.pathname;\n\n      // 파일명 제거하기 (index.html 등)\n      var basePath;\n      if (pathname.endsWith(\'/\')) {\n        basePath = pathname; // 이미 / 로 끝나는 경우\n      } else {\n        // 마지막 / 이후의 파일명을 제거하고 / 추가\n        var lastSlashIndex = pathname.lastIndexOf(\'/\');\n        if (lastSlashIndex === -1) {\n          basePath = \'/\';\n        } else {\n          basePath = pathname.substring(0, lastSlashIndex + 1);\n        }\n      }\n\n      // 언어 경로 패턴 제거 (/en/, /ja/, /zh/ 등)\n      var langPattern = /\\/([a-z]{2})\\/$/;\n      if (langPattern.test(basePath)) {\n        // 언어 경로를 제외한 상위 경로로 변경\n        var parentPath = basePath.substring(0, basePath.length - 4); // \'/xx/\' 제거\n        basePath = parentPath.length > 0 ? parentPath : \'/\';\n      }\n      console.log("\\uC560\\uD50C\\uB9AC\\uCF00\\uC774\\uC158 \\uAE30\\uBCF8 \\uACBD\\uB85C \\uACC4\\uC0B0\\uB428: ".concat(basePath));\n      return basePath;\n    } catch (error) {\n      console.error(\'기본 경로 계산 오류:\', error);\n      return \'/\';\n    }\n  },\n  /**\n   * 경로를 다양한 형식으로 변환하여 시도 가능한 경로 배열 반환\n   * 브라우저 환경에서 모듈 로딩 시 다양한 경로 형식을 시도하기 위한 함수입니다.\n   * \n   * @param {string} basePath - 기본 경로\n   * @returns {string[]} 시도 가능한 다양한 경로 배열\n   * \n   * @example\n   * // 결과: [\'./utils/file.js\', \'utils/file.js\', \'/utils/file.js\']\n   * PathUtils.getPathVariations(\'./utils/file.js\');\n   * \n   * @example\n   * // 결과: [\'/components/header.js\', \'components/header.js\', \'./components/header.js\']\n   * PathUtils.getPathVariations(\'/components/header.js\');\n   */\n  getPathVariations: function getPathVariations(basePath) {\n    var paths = [];\n\n    // 절대 경로와 상대 경로 시도\n    if (basePath.startsWith(\'./\')) {\n      paths.push(basePath);\n      paths.push(basePath.substring(2)); // \'./\' 제거\n      paths.push(\'/\' + basePath.substring(2)); // \'/\' 추가\n    } else if (basePath.startsWith(\'/\')) {\n      paths.push(basePath);\n      paths.push(basePath.substring(1)); // \'/\' 제거\n      paths.push(\'./\' + basePath.substring(1)); // \'./\' 추가\n    } else {\n      paths.push(basePath);\n      paths.push(\'./\' + basePath);\n      paths.push(\'/\' + basePath);\n    }\n\n    // 추가 경로 변형 (assets/ 포함 여부)\n    if (!basePath.includes(\'assets/\') && !basePath.includes(\'assets\\\\\')) {\n      paths.push("assets/js/".concat(basePath));\n      paths.push("./assets/js/".concat(basePath));\n      paths.push("/assets/js/".concat(basePath));\n    }\n\n    // 애플리케이션 기본 경로 추가\n    var appBasePath = this.getBasePath();\n    if (appBasePath !== \'/\' && !paths.some(function (p) {\n      return p.startsWith(appBasePath);\n    })) {\n      paths.push("".concat(appBasePath).concat(basePath));\n      if (basePath.startsWith(\'./\')) {\n        paths.push("".concat(appBasePath).concat(basePath.substring(2)));\n      } else if (basePath.startsWith(\'/\')) {\n        paths.push("".concat(appBasePath).concat(basePath.substring(1)));\n      }\n    }\n    return paths;\n  },\n  /**\n   * 모듈 동적 임포트 (다양한 경로 시도)\n   * 여러 경로 형식을 시도하여 모듈을 안정적으로 로드합니다.\n   * 환경에 따라 경로 해석이 다를 수 있기 때문에 유용합니다.\n   * \n   * @param {string} modulePath - 모듈 기본 경로\n   * @param {boolean} addJsExtension - .js 확장자 자동 추가 여부 (기본값: true)\n   * @returns {Promise<Object>} 임포트된 모듈\n   * @throws {Error} 모든 경로 시도 실패 시 에러 발생\n   * \n   * @example\n   * // 성공하면 모듈 반환, 실패하면 에러 발생\n   * try {\n   *   const configModule = await PathUtils.importModule(\'utils/config\');\n   *   // 모듈 사용\n   * } catch (error) {\n   *   console.error(\'모듈을 로드할 수 없습니다:\', error);\n   * }\n   */\n  importModule: function importModule(modulePath) {\n    var _arguments = arguments,\n      _this = this;\n    return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var _lastError;\n      var addJsExtension, normalizedPath, pathVariations, lastError, _iterator, _step, path;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            addJsExtension = _arguments.length > 1 && _arguments[1] !== undefined ? _arguments[1] : true;\n            // .js 확장자 추가 (필요한 경우)\n            if (addJsExtension && !modulePath.endsWith(\'.js\')) {\n              modulePath += \'.js\';\n            }\n\n            // 정규화된 경로\n            normalizedPath = _this.normalizePath(modulePath); // 시도할 경로 배열\n            pathVariations = _this.getPathVariations(normalizedPath); // 각 경로 시도\n            lastError = null;\n            _iterator = _createForOfIteratorHelper(pathVariations);\n            _context.prev = 6;\n            _iterator.s();\n          case 8:\n            if ((_step = _iterator.n()).done) {\n              _context.next = 23;\n              break;\n            }\n            path = _step.value;\n            _context.prev = 10;\n            console.log("\\uBAA8\\uB4C8 \\uC784\\uD3EC\\uD2B8 \\uC2DC\\uB3C4: ".concat(path));\n            _context.next = 14;\n            return __webpack_require__(296)(path);\n          case 14:\n            return _context.abrupt("return", _context.sent);\n          case 17:\n            _context.prev = 17;\n            _context.t0 = _context["catch"](10);\n            console.warn("\\uACBD\\uB85C ".concat(path, "\\uC5D0\\uC11C \\uBAA8\\uB4C8\\uC744 \\uB85C\\uB4DC\\uD560 \\uC218 \\uC5C6\\uC2B5\\uB2C8\\uB2E4:"), _context.t0.message);\n            lastError = _context.t0;\n          case 21:\n            _context.next = 8;\n            break;\n          case 23:\n            _context.next = 28;\n            break;\n          case 25:\n            _context.prev = 25;\n            _context.t1 = _context["catch"](6);\n            _iterator.e(_context.t1);\n          case 28:\n            _context.prev = 28;\n            _iterator.f();\n            return _context.finish(28);\n          case 31:\n            throw new Error("\\uBAA8\\uB4C8\\uC744 \\uB85C\\uB4DC\\uD560 \\uC218 \\uC5C6\\uC2B5\\uB2C8\\uB2E4 (".concat(modulePath, "): ").concat(((_lastError = lastError) === null || _lastError === void 0 ? void 0 : _lastError.message) || \'Unknown error\'));\n          case 32:\n          case "end":\n            return _context.stop();\n        }\n      }, _callee, null, [[6, 25, 28, 31], [10, 17]]);\n    }))();\n  }\n};\n\n// 전역 참조를 위한 등록\nif (typeof window !== \'undefined\') {\n  window.FileToQR = window.FileToQR || {};\n  window.FileToQR.utils = window.FileToQR.utils || {};\n  window.FileToQR.utils.path = PathUtils;\n  window.PathUtils = PathUtils;\n}\n\n// 모듈 내보내기\n/* harmony default export */ const path_utils = (PathUtils);\n;// ./assets/js/utils/template-utils.js\nfunction template_utils_typeof(o) { "@babel/helpers - typeof"; return template_utils_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, template_utils_typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == template_utils_typeof(i) ? i : i + ""; }\nfunction _toPrimitive(t, r) { if ("object" != template_utils_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != template_utils_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }\nfunction template_utils_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ template_utils_regeneratorRuntime = function _regeneratorRuntime() { return r; }; var t, r = {}, e = Object.prototype, n = e.hasOwnProperty, o = "function" == typeof Symbol ? Symbol : {}, i = o.iterator || "@@iterator", a = o.asyncIterator || "@@asyncIterator", u = o.toStringTag || "@@toStringTag"; function c(t, r, e, n) { return Object.defineProperty(t, r, { value: e, enumerable: !n, configurable: !n, writable: !n }); } try { c({}, ""); } catch (t) { c = function c(t, r, e) { return t[r] = e; }; } function h(r, e, n, o) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype); return c(a, "_invoke", function (r, e, n) { var o = 1; return function (i, a) { if (3 === o) throw Error("Generator is already running"); if (4 === o) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var u = n.delegate; if (u) { var c = d(u, n); if (c) { if (c === f) continue; return c; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (1 === o) throw o = 4, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = 3; var h = s(r, e, n); if ("normal" === h.type) { if (o = n.done ? 4 : 2, h.arg === f) continue; return { value: h.arg, done: n.done }; } "throw" === h.type && (o = 4, n.method = "throw", n.arg = h.arg); } }; }(r, n, new Context(o || [])), !0), a; } function s(t, r, e) { try { return { type: "normal", arg: t.call(r, e) }; } catch (t) { return { type: "throw", arg: t }; } } r.wrap = h; var f = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var l = {}; c(l, i, function () { return this; }); var p = Object.getPrototypeOf, y = p && p(p(x([]))); y && y !== e && n.call(y, i) && (l = y); var v = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(l); function g(t) { ["next", "throw", "return"].forEach(function (r) { c(t, r, function (t) { return this._invoke(r, t); }); }); } function AsyncIterator(t, r) { function e(o, i, a, u) { var c = s(t[o], t, i); if ("throw" !== c.type) { var h = c.arg, f = h.value; return f && "object" == template_utils_typeof(f) && n.call(f, "__await") ? r.resolve(f.__await).then(function (t) { e("next", t, a, u); }, function (t) { e("throw", t, a, u); }) : r.resolve(f).then(function (t) { h.value = t, a(h); }, function (t) { return e("throw", t, a, u); }); } u(c.arg); } var o; c(this, "_invoke", function (t, n) { function i() { return new r(function (r, o) { e(t, n, r, o); }); } return o = o ? o.then(i, i) : i(); }, !0); } function d(r, e) { var n = e.method, o = r.i[n]; if (o === t) return e.delegate = null, "throw" === n && r.i["return"] && (e.method = "return", e.arg = t, d(r, e), "throw" === e.method) || "return" !== n && (e.method = "throw", e.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), f; var i = s(o, r.i, e.arg); if ("throw" === i.type) return e.method = "throw", e.arg = i.arg, e.delegate = null, f; var a = i.arg; return a ? a.done ? (e[r.r] = a.value, e.next = r.n, "return" !== e.method && (e.method = "next", e.arg = t), e.delegate = null, f) : a : (e.method = "throw", e.arg = new TypeError("iterator result is not an object"), e.delegate = null, f); } function w(t) { this.tryEntries.push(t); } function m(r) { var e = r[4] || {}; e.type = "normal", e.arg = t, r[4] = e; } function Context(t) { this.tryEntries = [[-1]], t.forEach(w, this), this.reset(!0); } function x(r) { if (null != r) { var e = r[i]; if (e) return e.call(r); if ("function" == typeof r.next) return r; if (!isNaN(r.length)) { var o = -1, a = function e() { for (; ++o < r.length;) if (n.call(r, o)) return e.value = r[o], e.done = !1, e; return e.value = t, e.done = !0, e; }; return a.next = a; } } throw new TypeError(template_utils_typeof(r) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, c(v, "constructor", GeneratorFunctionPrototype), c(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = c(GeneratorFunctionPrototype, u, "GeneratorFunction"), r.isGeneratorFunction = function (t) { var r = "function" == typeof t && t.constructor; return !!r && (r === GeneratorFunction || "GeneratorFunction" === (r.displayName || r.name)); }, r.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, c(t, u, "GeneratorFunction")), t.prototype = Object.create(v), t; }, r.awrap = function (t) { return { __await: t }; }, g(AsyncIterator.prototype), c(AsyncIterator.prototype, a, function () { return this; }), r.AsyncIterator = AsyncIterator, r.async = function (t, e, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(h(t, e, n, o), i); return r.isGeneratorFunction(e) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, g(v), c(v, u, "Generator"), c(v, i, function () { return this; }), c(v, "toString", function () { return "[object Generator]"; }), r.keys = function (t) { var r = Object(t), e = []; for (var n in r) e.unshift(n); return function t() { for (; e.length;) if ((n = e.pop()) in r) return t.value = n, t.done = !1, t; return t.done = !0, t; }; }, r.values = x, Context.prototype = { constructor: Context, reset: function reset(r) { if (this.prev = this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(m), !r) for (var e in this) "t" === e.charAt(0) && n.call(this, e) && !isNaN(+e.slice(1)) && (this[e] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0][4]; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(r) { if (this.done) throw r; var e = this; function n(t) { a.type = "throw", a.arg = r, e.next = t; } for (var o = e.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i[4], u = this.prev, c = i[1], h = i[2]; if (-1 === i[0]) return n("end"), !1; if (!c && !h) throw Error("try statement without catch or finally"); if (null != i[0] && i[0] <= u) { if (u < c) return this.method = "next", this.arg = t, n(c), !0; if (u < h) return n(h), !1; } } }, abrupt: function abrupt(t, r) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var n = this.tryEntries[e]; if (n[0] > -1 && n[0] <= this.prev && this.prev < n[2]) { var o = n; break; } } o && ("break" === t || "continue" === t) && o[0] <= r && r <= o[2] && (o = null); var i = o ? o[4] : {}; return i.type = t, i.arg = r, o ? (this.method = "next", this.next = o[2], f) : this.complete(i); }, complete: function complete(t, r) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && r && (this.next = r), f; }, finish: function finish(t) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var e = this.tryEntries[r]; if (e[2] === t) return this.complete(e[4], e[3]), m(e), f; } }, "catch": function _catch(t) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var e = this.tryEntries[r]; if (e[0] === t) { var n = e[4]; if ("throw" === n.type) { var o = n.arg; m(e); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(r, e, n) { return this.delegate = { i: x(r), r: e, n: n }, "next" === this.method && (this.arg = t), f; } }, r; }\nfunction template_utils_asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction template_utils_asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { template_utils_asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { template_utils_asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\n/**\n * template-utils.js - FileToQR 템플릿 유틸리티\n * 버전: 1.0.0\n * 최종 업데이트: 2025-07-15\n * \n * 이 모듈은 Handlebars 템플릿 엔진을 활용하여 템플릿 기반 UI 렌더링을 제공합니다.\n * - 컴포넌트 로딩 및 렌더링\n * - 템플릿 캐싱\n * - Handlebars 헬퍼 등록\n * - 다국어 지원 통합\n */\n\n\n\n// Handlebars 의존성 동적 로드\nvar Handlebars = null;\n\n/**\n * FileToQR 템플릿 유틸리티 모듈\n */\nvar TemplateUtils = {\n  /**\n   * 템플릿 캐시 저장소\n   * @type {Object}\n   * @private\n   */\n  _templateCache: {},\n  /**\n   * 컴파일된 템플릿 함수 캐시\n   * @type {Object}\n   * @private\n   */\n  _compiledTemplates: {},\n  /**\n   * 템플릿 유틸리티 초기화\n   * @param {Object} options - 초기화 옵션\n   * @returns {Promise<void>} 초기화 완료 Promise\n   */\n  init: function init() {\n    var _arguments = arguments,\n      _this = this;\n    return template_utils_asyncToGenerator(/*#__PURE__*/template_utils_regeneratorRuntime().mark(function _callee() {\n      var options;\n      return template_utils_regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            options = _arguments.length > 0 && _arguments[0] !== undefined ? _arguments[0] : {};\n            _context.prev = 1;\n            console.log(\'템플릿 유틸리티 초기화 중...\');\n\n            // Handlebars 로드\n            _context.next = 5;\n            return _this.loadHandlebars();\n          case 5:\n            // Handlebars 헬퍼 등록\n            _this.registerHelpers();\n\n            // 기본 파티셜 로드 (있는 경우)\n            if (!(options.loadPartials !== false)) {\n              _context.next = 9;\n              break;\n            }\n            _context.next = 9;\n            return _this.loadCommonPartials();\n          case 9:\n            console.log(\'템플릿 유틸리티 초기화 완료\');\n            return _context.abrupt("return", Promise.resolve());\n          case 13:\n            _context.prev = 13;\n            _context.t0 = _context["catch"](1);\n            console.error(\'템플릿 유틸리티 초기화 실패:\', _context.t0);\n            return _context.abrupt("return", Promise.reject(_context.t0));\n          case 17:\n          case "end":\n            return _context.stop();\n        }\n      }, _callee, null, [[1, 13]]);\n    }))();\n  },\n  /**\n   * Handlebars 라이브러리 동적 로드\n   * @returns {Promise<void>}\n   * @private\n   */\n  loadHandlebars: function loadHandlebars() {\n    return template_utils_asyncToGenerator(/*#__PURE__*/template_utils_regeneratorRuntime().mark(function _callee2() {\n      var HandlebarsScript, loadPromise;\n      return template_utils_regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(Handlebars !== null)) {\n              _context2.next = 2;\n              break;\n            }\n            return _context2.abrupt("return", Promise.resolve(Handlebars));\n          case 2:\n            _context2.prev = 2;\n            // CDN에서 Handlebars 로드 시도\n            HandlebarsScript = document.createElement(\'script\');\n            HandlebarsScript.src = \'https://cdn.jsdelivr.net/npm/handlebars@latest/dist/handlebars.min.js\';\n\n            // 스크립트 로드 Promise\n            loadPromise = new Promise(function (resolve, reject) {\n              HandlebarsScript.onload = function () {\n                if (typeof window.Handlebars !== \'undefined\') {\n                  Handlebars = window.Handlebars;\n                  console.log(\'Handlebars 로드 성공\');\n                  resolve(Handlebars);\n                } else {\n                  reject(new Error(\'Handlebars 로드 실패: window.Handlebars가 정의되지 않음\'));\n                }\n              };\n              HandlebarsScript.onerror = function () {\n                reject(new Error(\'Handlebars 스크립트 로드 오류\'));\n              };\n            }); // DOM에 스크립트 추가\n            document.head.appendChild(HandlebarsScript);\n\n            // 로드 완료까지 대기\n            _context2.next = 9;\n            return loadPromise;\n          case 9:\n            return _context2.abrupt("return", Handlebars);\n          case 12:\n            _context2.prev = 12;\n            _context2.t0 = _context2["catch"](2);\n            console.error(\'Handlebars 로드 실패:\', _context2.t0);\n            throw _context2.t0;\n          case 16:\n          case "end":\n            return _context2.stop();\n        }\n      }, _callee2, null, [[2, 12]]);\n    }))();\n  },\n  /**\n   * Handlebars 헬퍼 등록\n   * @private\n   */\n  registerHelpers: function registerHelpers() {\n    if (!Handlebars) return;\n\n    // i18n 헬퍼 등록\n    Handlebars.registerHelper(\'t\', function (key, options) {\n      // 글로벌 i18n 객체 사용\n      if (window.FileToQR && window.FileToQR.i18n) {\n        // 파라미터 추출\n        var params = {};\n        if (options && options.hash) {\n          Object.keys(options.hash).forEach(function (key) {\n            params[key] = options.hash[key];\n          });\n        }\n        return window.FileToQR.i18n.t(key, params);\n      }\n\n      // i18n 모듈이 없는 경우 키 자체 반환\n      return key;\n    });\n\n    // formatDate 헬퍼 등록\n    Handlebars.registerHelper(\'formatDate\', function (date, options) {\n      if (window.FileToQR && window.FileToQR.i18n) {\n        var formatOptions = options && options.hash ? options.hash : {};\n        return window.FileToQR.i18n.formatDate(date, formatOptions);\n      }\n      return date;\n    });\n\n    // formatNumber 헬퍼 등록\n    Handlebars.registerHelper(\'formatNumber\', function (number, options) {\n      if (window.FileToQR && window.FileToQR.i18n) {\n        var formatOptions = options && options.hash ? options.hash : {};\n        return window.FileToQR.i18n.formatNumber(number, formatOptions);\n      }\n      return number;\n    });\n\n    // eq 비교 헬퍼\n    Handlebars.registerHelper(\'eq\', function (a, b, options) {\n      return a === b ? options.fn(this) : options.inverse(this);\n    });\n\n    // neq 비교 헬퍼\n    Handlebars.registerHelper(\'neq\', function (a, b, options) {\n      return a !== b ? options.fn(this) : options.inverse(this);\n    });\n\n    // gt 비교 헬퍼\n    Handlebars.registerHelper(\'gt\', function (a, b, options) {\n      return a > b ? options.fn(this) : options.inverse(this);\n    });\n\n    // gte 비교 헬퍼\n    Handlebars.registerHelper(\'gte\', function (a, b, options) {\n      return a >= b ? options.fn(this) : options.inverse(this);\n    });\n\n    // lt 비교 헬퍼\n    Handlebars.registerHelper(\'lt\', function (a, b, options) {\n      return a < b ? options.fn(this) : options.inverse(this);\n    });\n\n    // lte 비교 헬퍼\n    Handlebars.registerHelper(\'lte\', function (a, b, options) {\n      return a <= b ? options.fn(this) : options.inverse(this);\n    });\n\n    // contains 헬퍼\n    Handlebars.registerHelper(\'contains\', function (arr, item, options) {\n      if (Array.isArray(arr) && arr.includes(item)) {\n        return options.fn(this);\n      }\n      return options.inverse(this);\n    });\n\n    // 조건부 클래스 헬퍼\n    Handlebars.registerHelper(\'classIf\', function (condition, trueClass, falseClass) {\n      return condition ? trueClass : falseClass || \'\';\n    });\n    console.log(\'Handlebars 헬퍼 등록 완료\');\n  },\n  /**\n   * 공통 파티셜 로드\n   * @returns {Promise<void>}\n   * @private\n   */\n  loadCommonPartials: function loadCommonPartials() {\n    return template_utils_asyncToGenerator(/*#__PURE__*/template_utils_regeneratorRuntime().mark(function _callee3() {\n      var partialElements, partials, basePath, _i, _partials, partial, partialUrl, response, template, inlinePartial;\n      return template_utils_regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            if (Handlebars) {\n              _context3.next = 3;\n              break;\n            }\n            console.error(\'Handlebars가 로드되지 않은 상태에서 파티셜 로드 시도\');\n            return _context3.abrupt("return", Promise.reject(new Error(\'Handlebars not loaded\')));\n          case 3:\n            console.log(\'공통 파티셜 로드 시작\');\n            _context3.prev = 4;\n            // DOM에서 파티셜 데이터 요소 찾기\n            partialElements = document.querySelectorAll(\'script[type="text/x-handlebars-partial"]\');\n            if (partialElements.length > 0) {\n              console.log("DOM\\uC5D0\\uC11C ".concat(partialElements.length, "\\uAC1C\\uC758 \\uD30C\\uD2F0\\uC15C \\uC694\\uC18C \\uBC1C\\uACAC"));\n\n              // DOM에서 파티셜 등록\n              partialElements.forEach(function (element) {\n                var partialName = element.getAttribute(\'data-partial-name\');\n                if (partialName) {\n                  Handlebars.registerPartial(partialName, element.innerHTML);\n                  console.log("DOM \\uD30C\\uD2F0\\uC15C \\uB4F1\\uB85D: ".concat(partialName));\n                }\n              });\n            }\n\n            // 파티셜 컴포넌트 목록\n            partials = [\'header\', \'footer\', \'loading\', \'language-selector\'];\n            basePath = path_utils.getBasePath() || \'./\';\n            console.log(\'파티셜 로드 기본 경로:\', basePath);\n\n            // 각 파티셜 로드 시도\n            _i = 0, _partials = partials;\n          case 11:\n            if (!(_i < _partials.length)) {\n              _context3.next = 47;\n              break;\n            }\n            partial = _partials[_i];\n            _context3.prev = 13;\n            // 첫 번째 시도: 컴포넌트 경로\n            partialUrl = "".concat(basePath, "components/partials/").concat(partial, ".hbs");\n            _context3.next = 17;\n            return fetch(partialUrl);\n          case 17:\n            response = _context3.sent;\n            if (response.ok) {\n              _context3.next = 29;\n              break;\n            }\n            console.log("".concat(partialUrl, " \\uB85C\\uB4DC \\uC2E4\\uD328, \\uB2E4\\uB978 \\uACBD\\uB85C \\uC2DC\\uB3C4"));\n            partialUrl = "".concat(basePath, "components/partials/").concat(partial, ".handlebars");\n            _context3.next = 23;\n            return fetch(partialUrl);\n          case 23:\n            response = _context3.sent;\n            if (response.ok) {\n              _context3.next = 29;\n              break;\n            }\n            partialUrl = "".concat(basePath, "components/partials/").concat(partial, ".html");\n            _context3.next = 28;\n            return fetch(partialUrl);\n          case 28:\n            response = _context3.sent;\n          case 29:\n            if (!response.ok) {\n              _context3.next = 37;\n              break;\n            }\n            _context3.next = 32;\n            return response.text();\n          case 32:\n            template = _context3.sent;\n            Handlebars.registerPartial(partial, template);\n            console.log("\\uD30C\\uD2F0\\uC15C \\uB85C\\uB4DC \\uC131\\uACF5: ".concat(partial));\n            _context3.next = 39;\n            break;\n          case 37:\n            // 파티셜이 파일로 존재하지 않으면 DOM에서 찾기 시도\n            inlinePartial = document.getElementById("partial-".concat(partial));\n            if (inlinePartial) {\n              Handlebars.registerPartial(partial, inlinePartial.innerHTML);\n              console.log("\\uC778\\uB77C\\uC778 \\uD30C\\uD2F0\\uC15C \\uC0AC\\uC6A9: ".concat(partial));\n            } else {\n              console.warn("\\uD30C\\uD2F0\\uC15C \\uB85C\\uB4DC \\uC2E4\\uD328: ".concat(partial));\n            }\n          case 39:\n            _context3.next = 44;\n            break;\n          case 41:\n            _context3.prev = 41;\n            _context3.t0 = _context3["catch"](13);\n            console.warn("\\uD30C\\uD2F0\\uC15C \'".concat(partial, "\' \\uB85C\\uB4DC \\uC624\\uB958:"), _context3.t0);\n          case 44:\n            _i++;\n            _context3.next = 11;\n            break;\n          case 47:\n            console.log(\'공통 파티셜 로드 완료\');\n            return _context3.abrupt("return", Promise.resolve());\n          case 51:\n            _context3.prev = 51;\n            _context3.t1 = _context3["catch"](4);\n            console.error(\'공통 파티셜 로드 중 오류 발생:\', _context3.t1);\n            return _context3.abrupt("return", Promise.reject(_context3.t1));\n          case 55:\n          case "end":\n            return _context3.stop();\n        }\n      }, _callee3, null, [[4, 51], [13, 41]]);\n    }))();\n  },\n  /**\n   * 템플릿 로드 및 캐싱\n   * @param {string} templatePath - 템플릿 파일 경로\n   * @returns {Promise<string>} 템플릿 문자열\n   */\n  loadTemplate: function loadTemplate(templatePath) {\n    var _this2 = this;\n    return template_utils_asyncToGenerator(/*#__PURE__*/template_utils_regeneratorRuntime().mark(function _callee4() {\n      var pathVariations, templateContent, _i2, _pathVariations, path, response;\n      return template_utils_regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) switch (_context4.prev = _context4.next) {\n          case 0:\n            if (!_this2._templateCache[templatePath]) {\n              _context4.next = 2;\n              break;\n            }\n            return _context4.abrupt("return", Promise.resolve(_this2._templateCache[templatePath]));\n          case 2:\n            _context4.prev = 2;\n            // 다양한 경로 패턴 시도\n            pathVariations = [templatePath, "/".concat(templatePath), "./".concat(templatePath), "../".concat(templatePath)];\n            templateContent = null;\n            _i2 = 0, _pathVariations = pathVariations;\n          case 6:\n            if (!(_i2 < _pathVariations.length)) {\n              _context4.next = 26;\n              break;\n            }\n            path = _pathVariations[_i2];\n            _context4.prev = 8;\n            _context4.next = 11;\n            return fetch(path);\n          case 11:\n            response = _context4.sent;\n            if (!response.ok) {\n              _context4.next = 18;\n              break;\n            }\n            _context4.next = 15;\n            return response.text();\n          case 15:\n            templateContent = _context4.sent;\n            console.log("\\uD15C\\uD50C\\uB9BF \\uB85C\\uB4DC \\uC131\\uACF5: ".concat(path));\n            return _context4.abrupt("break", 26);\n          case 18:\n            _context4.next = 23;\n            break;\n          case 20:\n            _context4.prev = 20;\n            _context4.t0 = _context4["catch"](8);\n            console.warn("\\uACBD\\uB85C\\uC5D0\\uC11C \\uD15C\\uD50C\\uB9BF \\uB85C\\uB4DC \\uC2E4\\uD328: ".concat(path));\n          case 23:\n            _i2++;\n            _context4.next = 6;\n            break;\n          case 26:\n            if (templateContent) {\n              _context4.next = 28;\n              break;\n            }\n            throw new Error("\\uD15C\\uD50C\\uB9BF\\uC744 \\uCC3E\\uC744 \\uC218 \\uC5C6\\uC74C: ".concat(templatePath));\n          case 28:\n            // 캐시에 저장\n            _this2._templateCache[templatePath] = templateContent;\n            return _context4.abrupt("return", templateContent);\n          case 32:\n            _context4.prev = 32;\n            _context4.t1 = _context4["catch"](2);\n            console.error("\\uD15C\\uD50C\\uB9BF \\uB85C\\uB4DC \\uC2E4\\uD328 (".concat(templatePath, "): ").concat(_context4.t1.message));\n            throw _context4.t1;\n          case 36:\n          case "end":\n            return _context4.stop();\n        }\n      }, _callee4, null, [[2, 32], [8, 20]]);\n    }))();\n  },\n  /**\n   * 템플릿 컴파일\n   * @param {string} template - 템플릿 문자열\n   * @param {string} [cacheKey] - 캐시 키 (선택사항)\n   * @returns {Function} 컴파일된 템플릿 함수\n   */\n  compileTemplate: function compileTemplate(template) {\n    var cacheKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    if (!Handlebars) {\n      throw new Error(\'Handlebars가 로드되지 않았습니다\');\n    }\n    if (cacheKey && this._compiledTemplates[cacheKey]) {\n      return this._compiledTemplates[cacheKey];\n    }\n    try {\n      var compiledTemplate = Handlebars.compile(template);\n      if (cacheKey) {\n        this._compiledTemplates[cacheKey] = compiledTemplate;\n      }\n      return compiledTemplate;\n    } catch (error) {\n      console.error(\'템플릿 컴파일 실패:\', error);\n      throw error;\n    }\n  },\n  /**\n   * 컴포넌트 로드 및 렌더링\n   * @param {string} componentName - 컴포넌트 이름\n   * @param {HTMLElement} container - 렌더링할 컨테이너 요소\n   * @param {string} [basePath=\'\'] - 기본 경로\n   * @param {Object} [data={}] - 템플릿 데이터\n   * @returns {Promise<boolean>} 성공 여부\n   */\n  loadComponent: function loadComponent(componentName, container) {\n    var _arguments2 = arguments,\n      _this3 = this;\n    return template_utils_asyncToGenerator(/*#__PURE__*/template_utils_regeneratorRuntime().mark(function _callee5() {\n      var basePath, data, componentPath, template, templateData, compiledTemplate, renderedHtml;\n      return template_utils_regeneratorRuntime().wrap(function _callee5$(_context5) {\n        while (1) switch (_context5.prev = _context5.next) {\n          case 0:\n            basePath = _arguments2.length > 2 && _arguments2[2] !== undefined ? _arguments2[2] : \'\';\n            data = _arguments2.length > 3 && _arguments2[3] !== undefined ? _arguments2[3] : {};\n            if (container) {\n              _context5.next = 5;\n              break;\n            }\n            console.error(\'컴포넌트 로드 실패: 컨테이너가 없습니다\');\n            return _context5.abrupt("return", false);\n          case 5:\n            _context5.prev = 5;\n            if (Handlebars) {\n              _context5.next = 9;\n              break;\n            }\n            _context5.next = 9;\n            return _this3.loadHandlebars();\n          case 9:\n            // 컴포넌트 경로 생성\n            componentPath = "".concat(basePath, "components/").concat(componentName, ".html"); // 템플릿 로드\n            _context5.next = 12;\n            return _this3.loadTemplate(componentPath);\n          case 12:\n            template = _context5.sent;\n            // 기본 데이터에 basePath 추가\n            templateData = _objectSpread(_objectSpread({}, data), {}, {\n              basePath: basePath\n            }); // 템플릿 컴파일 및 렌더링\n            compiledTemplate = _this3.compileTemplate(template, componentName);\n            renderedHtml = compiledTemplate(templateData); // 컨테이너에 HTML 삽입\n            container.innerHTML = renderedHtml;\n\n            // i18n 사용 가능한 경우 번역 적용\n            if (window.FileToQR && window.FileToQR.i18n) {\n              window.FileToQR.i18n.applyTranslations();\n            }\n            console.log("\\uCEF4\\uD3EC\\uB10C\\uD2B8 \\uB85C\\uB4DC \\uC644\\uB8CC: ".concat(componentName));\n            return _context5.abrupt("return", true);\n          case 22:\n            _context5.prev = 22;\n            _context5.t0 = _context5["catch"](5);\n            console.error("\\uCEF4\\uD3EC\\uB10C\\uD2B8 \\uB85C\\uB4DC \\uC2E4\\uD328 (".concat(componentName, "): ").concat(_context5.t0.message));\n            return _context5.abrupt("return", false);\n          case 26:\n          case "end":\n            return _context5.stop();\n        }\n      }, _callee5, null, [[5, 22]]);\n    }))();\n  },\n  /**\n   * 템플릿 문자열 렌더링\n   * @param {string} template - 템플릿 문자열\n   * @param {Object} data - 템플릿 데이터\n   * @returns {string} 렌더링된 HTML\n   */\n  renderTemplate: function renderTemplate(template) {\n    var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!Handlebars) {\n      throw new Error(\'Handlebars가 로드되지 않았습니다\');\n    }\n    try {\n      var compiledTemplate = this.compileTemplate(template);\n      return compiledTemplate(data);\n    } catch (error) {\n      console.error(\'템플릿 렌더링 실패:\', error);\n      throw error;\n    }\n  },\n  /**\n   * 파티셜 등록\n   * @param {string} name - 파티셜 이름\n   * @param {string} template - 파티셜 템플릿 문자열\n   */\n  registerPartial: function registerPartial(name, template) {\n    if (!Handlebars) {\n      throw new Error(\'Handlebars가 로드되지 않았습니다\');\n    }\n    Handlebars.registerPartial(name, template);\n  },\n  /**\n   * 템플릿 캐시 지우기\n   * @param {string} [templatePath] - 특정 템플릿 경로 (없으면 전체 캐시 삭제)\n   */\n  clearCache: function clearCache() {\n    var templatePath = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    if (templatePath) {\n      delete this._templateCache[templatePath];\n      delete this._compiledTemplates[templatePath];\n    } else {\n      this._templateCache = {};\n      this._compiledTemplates = {};\n    }\n  },\n  /**\n   * HTML 템플릿 요소를 렌더링\n   * @param {string} templateSelector - 템플릿 요소 선택자\n   * @param {HTMLElement} container - 렌더링할 컨테이너 요소\n   * @param {Object} data - 템플릿 데이터\n   * @returns {boolean} 성공 여부\n   */\n  renderTemplateElement: function renderTemplateElement(templateSelector, container) {\n    var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    if (!Handlebars) {\n      console.error(\'Handlebars가 로드되지 않았습니다\');\n      return false;\n    }\n    try {\n      var templateElement = document.querySelector(templateSelector);\n      if (!templateElement) {\n        console.error("\\uD15C\\uD50C\\uB9BF \\uC694\\uC18C\\uB97C \\uCC3E\\uC744 \\uC218 \\uC5C6\\uC74C: ".concat(templateSelector));\n        return false;\n      }\n      var template = templateElement.innerHTML;\n      var compiledTemplate = this.compileTemplate(template, templateSelector);\n      var renderedHtml = compiledTemplate(data);\n      container.innerHTML = renderedHtml;\n\n      // i18n 사용 가능한 경우 번역 적용\n      if (window.FileToQR && window.FileToQR.i18n) {\n        window.FileToQR.i18n.applyTranslations();\n      }\n      return true;\n    } catch (error) {\n      console.error("\\uD15C\\uD50C\\uB9BF \\uB80C\\uB354\\uB9C1 \\uC2E4\\uD328 (".concat(templateSelector, "): ").concat(error.message));\n      return false;\n    }\n  }\n};\n\n// 템플릿 유틸리티를 전역 객체에 등록\nwindow.FileToQR = window.FileToQR || {};\nwindow.FileToQR.TemplateUtils = TemplateUtils;\n/* harmony default export */ const template_utils = ((/* unused pure expression or super */ null && (TemplateUtils)));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///325\n')}},Q=>{var B;B=325,Q(Q.s=B)}]);