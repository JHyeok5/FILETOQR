"use strict";(self.webpackChunkfiletoqr=self.webpackChunkfiletoqr||[]).push([[420],{498:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nfunction _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n/**\n * common-utils.js - FileToQR 공통 유틸리티 모듈\n * 버전: 1.0.0\n * 최종 업데이트: 2025-08-01\n * \n * 이 모듈은 여러 파일에서 중복되는 공통 유틸리티 함수들을 통합합니다:\n * - 버전 비교 유틸리티\n * - 형식 검증 함수\n * - 기타 공통 헬퍼 함수\n */\n\n// 공통 유틸리티 모듈 정의\nvar CommonUtils = {\n  /**\n   * 버전 비교\n   * @param {string} version1 - 첫 번째 버전\n   * @param {string} version2 - 두 번째 버전\n   * @returns {number} version1이 version2보다 크면 1, 같으면 0, 작으면 -1\n   */\n  compareVersions: function compareVersions(version1, version2) {\n    var v1parts = version1.split(\'.\').map(Number);\n    var v2parts = version2.split(\'.\').map(Number);\n    for (var i = 0; i < v1parts.length; ++i) {\n      if (v2parts.length === i) {\n        return 1; // version1이 더 긴 경우\n      }\n      if (v1parts[i] > v2parts[i]) {\n        return 1;\n      }\n      if (v1parts[i] < v2parts[i]) {\n        return -1;\n      }\n    }\n    if (v1parts.length !== v2parts.length) {\n      return -1; // version2가 더 긴 경우\n    }\n    return 0; // 버전이 같음\n  },\n  /**\n   * 형식 검증 함수 - 파일/값 검증용 공통 유틸리티\n   */\n  validation: {\n    /**\n     * 이메일 형식 검증\n     * @param {string} email - 검증할 이메일\n     * @returns {boolean} 유효성 여부\n     */\n    isValidEmail: function isValidEmail(email) {\n      var regex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n      return regex.test(email);\n    },\n    /**\n     * URL 형식 검증\n     * @param {string} url - 검증할 URL\n     * @returns {boolean} 유효성 여부\n     */\n    isValidUrl: function isValidUrl(url) {\n      try {\n        new URL(url);\n        return true;\n      } catch (e) {\n        return false;\n      }\n    },\n    /**\n     * 파일명 형식 검증\n     * @param {string} filename - 검증할 파일명\n     * @returns {boolean} 유효성 여부\n     */\n    isValidFileName: function isValidFileName(filename) {\n      return typeof filename === \'string\' && filename.length > 0;\n    },\n    /**\n     * 파일 크기 검증\n     * @param {number} size - 파일 크기 (바이트)\n     * @param {number} maxSize - 최대 허용 크기 (바이트)\n     * @returns {boolean} 유효성 여부\n     */\n    isValidFileSize: function isValidFileSize(size, maxSize) {\n      return typeof size === \'number\' && typeof maxSize === \'number\' && size > 0 && size <= maxSize;\n    }\n  },\n  /**\n   * 일반 유틸리티 함수\n   */\n  general: {\n    /**\n     * DOM 요소 생성 헬퍼\n     * @param {string} tag - 태그 이름\n     * @param {Object} attributes - 속성 객체\n     * @param {string|Element|Array} [children] - 자식 요소\n     * @returns {Element} 생성된 요소\n     */\n    createElement: function createElement(tag) {\n      var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var children = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var element = document.createElement(tag);\n\n      // 속성 추가\n      Object.entries(attributes).forEach(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          value = _ref2[1];\n        if (key === \'className\') {\n          element.className = value;\n        } else if (key === \'style\' && _typeof(value) === \'object\') {\n          Object.assign(element.style, value);\n        } else {\n          element.setAttribute(key, value);\n        }\n      });\n\n      // 자식 요소 추가\n      if (children) {\n        if (typeof children === \'string\') {\n          element.textContent = children;\n        } else if (children instanceof Element) {\n          element.appendChild(children);\n        } else if (Array.isArray(children)) {\n          children.forEach(function (child) {\n            if (child instanceof Element) {\n              element.appendChild(child);\n            } else if (typeof child === \'string\') {\n              element.appendChild(document.createTextNode(child));\n            }\n          });\n        }\n      }\n      return element;\n    },\n    /**\n     * 디바운스 함수\n     * @param {Function} func - 실행할 함수\n     * @param {number} wait - 대기 시간 (ms)\n     * @returns {Function} 디바운스된 함수\n     */\n    debounce: function debounce(func, wait) {\n      var timeout;\n      return function executedFunction() {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        var later = function later() {\n          clearTimeout(timeout);\n          func.apply(void 0, args);\n        };\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n      };\n    },\n    /**\n     * 쓰로틀 함수\n     * @param {Function} func - 실행할 함수\n     * @param {number} limit - 제한 시간 (ms)\n     * @returns {Function} 쓰로틀된 함수\n     */\n    throttle: function throttle(func, limit) {\n      var inThrottle;\n      return function executedFunction() {\n        if (!inThrottle) {\n          func.apply(void 0, arguments);\n          inThrottle = true;\n          setTimeout(function () {\n            inThrottle = false;\n          }, limit);\n        }\n      };\n    }\n  }\n};\n\n// 하위 호환성을 위한 전역 참조\nif (typeof window !== \'undefined\') {\n  window.FileToQR = window.FileToQR || {};\n  window.FileToQR.utils = window.FileToQR.utils || {};\n  window.FileToQR.utils.common = CommonUtils;\n}\n\n// 모듈 내보내기\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CommonUtils);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///498\n')},635:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  A: () => (/* binding */ converter_core)\n});\n\n// EXTERNAL MODULE: ./assets/js/utils/common-utils.js\nvar common_utils = __webpack_require__(498);\n;// ./assets/js/utils/file-utils.js\n/**\n * file-utils.js - FileToQR 파일 유틸리티 모듈\n * 버전: 1.2.0\n * 최종 업데이트: 2025-08-01\n *\n * 이 모듈은 파일 관련 공통 유틸리티 함수들을 제공합니다:\n * - 파일 확장자 추출\n * - 파일 크기 포맷팅\n * - 파일 MIME 타입 관리\n * - 데이터 URI 변환\n */\n\n\n\n// 파일 유틸리티 모듈 API 정의\nvar FileUtils = {\n  /**\n   * 파일명에서 확장자 추출\n   * @param {string} filename - 파일명\n   * @returns {string} 소문자 확장자 (점 제외)\n   */\n  getFileExtension: function getFileExtension(filename) {\n    if (!common_utils/* default */.A.validation.isValidFileName(filename)) return '';\n    return filename.split('.').pop().toLowerCase();\n  },\n  /**\n   * 바이트 단위 파일 크기를 사람이 읽기 쉬운 형식으로 변환\n   * @param {number} bytes - 바이트 단위 크기\n   * @param {number} decimals - 소수점 자릿수 (기본값: 2)\n   * @returns {string} 포맷팅된 파일 크기 (예: \"1.5 MB\")\n   */\n  formatFileSize: function formatFileSize(bytes) {\n    var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n    console.log('FileUtils.formatFileSize 호출:', bytes, decimals);\n    if (bytes === 0) return '0 Bytes';\n    var k = 1024;\n    var dm = decimals < 0 ? 0 : decimals;\n    var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n    var i = Math.floor(Math.log(bytes) / Math.log(k));\n    var result = parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n    console.log('파일 크기 변환 결과:', result);\n    return result;\n  },\n  /**\n   * 확장자에 따른 MIME 타입 반환\n   * @param {string} format - 파일 확장자 (점 제외)\n   * @returns {string} MIME 타입\n   */\n  getMimeType: function getMimeType(format) {\n    console.log('FileUtils.getMimeType 호출:', format);\n    var mimeTypes = {\n      // 이미지\n      'png': 'image/png',\n      'jpg': 'image/jpeg',\n      'jpeg': 'image/jpeg',\n      'gif': 'image/gif',\n      'webp': 'image/webp',\n      'svg': 'image/svg+xml',\n      'bmp': 'image/bmp',\n      'ico': 'image/x-icon',\n      // 문서\n      'pdf': 'application/pdf',\n      'doc': 'application/msword',\n      'docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n      'xls': 'application/vnd.ms-excel',\n      'xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n      'ppt': 'application/vnd.ms-powerpoint',\n      'pptx': 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n      'txt': 'text/plain',\n      'rtf': 'application/rtf',\n      // 오디오\n      'mp3': 'audio/mpeg',\n      'wav': 'audio/wav',\n      'ogg': 'audio/ogg',\n      'flac': 'audio/flac',\n      'm4a': 'audio/m4a',\n      // 비디오\n      'mp4': 'video/mp4',\n      'webm': 'video/webm',\n      'avi': 'video/x-msvideo',\n      'mov': 'video/quicktime',\n      'wmv': 'video/x-ms-wmv',\n      // 데이터\n      'json': 'application/json',\n      'xml': 'application/xml',\n      'csv': 'text/csv',\n      'yaml': 'application/x-yaml',\n      'yml': 'application/x-yaml',\n      // 압축\n      'zip': 'application/zip',\n      'rar': 'application/x-rar-compressed',\n      '7z': 'application/x-7z-compressed',\n      'tar': 'application/x-tar',\n      'gz': 'application/gzip'\n    };\n    var mimeType = mimeTypes[format === null || format === void 0 ? void 0 : format.toLowerCase()] || 'application/octet-stream';\n    console.log('MIME 타입 추론 결과:', format, mimeType);\n    return mimeType;\n  },\n  /**\n   * 출력 파일명 생성\n   * @param {string} inputFileName - 입력 파일명\n   * @param {string} outputFormat - 출력 형식 (확장자)\n   * @returns {string} 새 파일명\n   */\n  getOutputFileName: function getOutputFileName(inputFileName, outputFormat) {\n    var baseName = inputFileName.substring(0, inputFileName.lastIndexOf('.')) || inputFileName;\n    return \"\".concat(baseName, \".\").concat(outputFormat);\n  },\n  /**\n   * 파일을 데이터 URI로 변환\n   * @param {File} file - 파일 객체\n   * @returns {Promise<string>} 데이터 URI 문자열\n   */\n  fileToDataUri: function fileToDataUri(file) {\n    return new Promise(function (resolve, reject) {\n      var reader = new FileReader();\n      reader.onload = function (event) {\n        resolve(event.target.result);\n      };\n      reader.onerror = function (error) {\n        reject(error);\n      };\n      reader.readAsDataURL(file);\n    });\n  },\n  /**\n   * 데이터 URI에서 MIME 타입 추출\n   * @param {string} dataUri - 데이터 URI\n   * @returns {string} MIME 타입\n   */\n  getMimeTypeFromDataUri: function getMimeTypeFromDataUri(dataUri) {\n    var match = dataUri.match(/^data:([^;]+);/);\n    return match ? match[1] : 'application/octet-stream';\n  },\n  /**\n   * 파일 크기 검증\n   * @param {File} file - 파일 객체\n   * @param {number} maxSize - 최대 허용 크기 (바이트)\n   * @returns {boolean} 유효성 여부\n   */\n  validateFileSize: function validateFileSize(file, maxSize) {\n    return common_utils/* default */.A.validation.isValidFileSize(file.size, maxSize);\n  },\n  /**\n   * 파일 형식 검증\n   * @param {File} file - 파일 객체\n   * @param {Array<string>} allowedFormats - 허용된 파일 형식 배열 (확장자)\n   * @returns {boolean} 유효성 여부\n   */\n  validateFileType: function validateFileType(file, allowedFormats) {\n    if (!file || !allowedFormats || !Array.isArray(allowedFormats)) {\n      return false;\n    }\n    var extension = this.getFileExtension(file.name);\n    return allowedFormats.includes(extension);\n  }\n};\n\n// 하위 호환성을 위한 전역 참조\nif (typeof window !== 'undefined') {\n  window.FileToQR = window.FileToQR || {};\n  window.FileToQR.utils = window.FileToQR.utils || {};\n  window.FileToQR.utils.file = FileUtils;\n  // 직접 접근을 위한 전역 참조 추가\n  window.FileUtils = FileUtils;\n}\n\n// 모듈 내보내기\n/* harmony default export */ const file_utils = (FileUtils);\n;// ./assets/js/core/converter-core.js\nfunction _createForOfIteratorHelper(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t[\"return\"] || t[\"return\"](); } finally { if (u) throw o; } } }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return r; }; var t, r = {}, e = Object.prototype, n = e.hasOwnProperty, o = \"function\" == typeof Symbol ? Symbol : {}, i = o.iterator || \"@@iterator\", a = o.asyncIterator || \"@@asyncIterator\", u = o.toStringTag || \"@@toStringTag\"; function c(t, r, e, n) { return Object.defineProperty(t, r, { value: e, enumerable: !n, configurable: !n, writable: !n }); } try { c({}, \"\"); } catch (t) { c = function c(t, r, e) { return t[r] = e; }; } function h(r, e, n, o) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype); return c(a, \"_invoke\", function (r, e, n) { var o = 1; return function (i, a) { if (3 === o) throw Error(\"Generator is already running\"); if (4 === o) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var u = n.delegate; if (u) { var c = d(u, n); if (c) { if (c === f) continue; return c; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (1 === o) throw o = 4, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = 3; var h = s(r, e, n); if (\"normal\" === h.type) { if (o = n.done ? 4 : 2, h.arg === f) continue; return { value: h.arg, done: n.done }; } \"throw\" === h.type && (o = 4, n.method = \"throw\", n.arg = h.arg); } }; }(r, n, new Context(o || [])), !0), a; } function s(t, r, e) { try { return { type: \"normal\", arg: t.call(r, e) }; } catch (t) { return { type: \"throw\", arg: t }; } } r.wrap = h; var f = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var l = {}; c(l, i, function () { return this; }); var p = Object.getPrototypeOf, y = p && p(p(x([]))); y && y !== e && n.call(y, i) && (l = y); var v = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(l); function g(t) { [\"next\", \"throw\", \"return\"].forEach(function (r) { c(t, r, function (t) { return this._invoke(r, t); }); }); } function AsyncIterator(t, r) { function e(o, i, a, u) { var c = s(t[o], t, i); if (\"throw\" !== c.type) { var h = c.arg, f = h.value; return f && \"object\" == _typeof(f) && n.call(f, \"__await\") ? r.resolve(f.__await).then(function (t) { e(\"next\", t, a, u); }, function (t) { e(\"throw\", t, a, u); }) : r.resolve(f).then(function (t) { h.value = t, a(h); }, function (t) { return e(\"throw\", t, a, u); }); } u(c.arg); } var o; c(this, \"_invoke\", function (t, n) { function i() { return new r(function (r, o) { e(t, n, r, o); }); } return o = o ? o.then(i, i) : i(); }, !0); } function d(r, e) { var n = e.method, o = r.i[n]; if (o === t) return e.delegate = null, \"throw\" === n && r.i[\"return\"] && (e.method = \"return\", e.arg = t, d(r, e), \"throw\" === e.method) || \"return\" !== n && (e.method = \"throw\", e.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), f; var i = s(o, r.i, e.arg); if (\"throw\" === i.type) return e.method = \"throw\", e.arg = i.arg, e.delegate = null, f; var a = i.arg; return a ? a.done ? (e[r.r] = a.value, e.next = r.n, \"return\" !== e.method && (e.method = \"next\", e.arg = t), e.delegate = null, f) : a : (e.method = \"throw\", e.arg = new TypeError(\"iterator result is not an object\"), e.delegate = null, f); } function w(t) { this.tryEntries.push(t); } function m(r) { var e = r[4] || {}; e.type = \"normal\", e.arg = t, r[4] = e; } function Context(t) { this.tryEntries = [[-1]], t.forEach(w, this), this.reset(!0); } function x(r) { if (null != r) { var e = r[i]; if (e) return e.call(r); if (\"function\" == typeof r.next) return r; if (!isNaN(r.length)) { var o = -1, a = function e() { for (; ++o < r.length;) if (n.call(r, o)) return e.value = r[o], e.done = !1, e; return e.value = t, e.done = !0, e; }; return a.next = a; } } throw new TypeError(_typeof(r) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, c(v, \"constructor\", GeneratorFunctionPrototype), c(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = c(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), r.isGeneratorFunction = function (t) { var r = \"function\" == typeof t && t.constructor; return !!r && (r === GeneratorFunction || \"GeneratorFunction\" === (r.displayName || r.name)); }, r.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, c(t, u, \"GeneratorFunction\")), t.prototype = Object.create(v), t; }, r.awrap = function (t) { return { __await: t }; }, g(AsyncIterator.prototype), c(AsyncIterator.prototype, a, function () { return this; }), r.AsyncIterator = AsyncIterator, r.async = function (t, e, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(h(t, e, n, o), i); return r.isGeneratorFunction(e) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, g(v), c(v, u, \"Generator\"), c(v, i, function () { return this; }), c(v, \"toString\", function () { return \"[object Generator]\"; }), r.keys = function (t) { var r = Object(t), e = []; for (var n in r) e.unshift(n); return function t() { for (; e.length;) if ((n = e.pop()) in r) return t.value = n, t.done = !1, t; return t.done = !0, t; }; }, r.values = x, Context.prototype = { constructor: Context, reset: function reset(r) { if (this.prev = this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(m), !r) for (var e in this) \"t\" === e.charAt(0) && n.call(this, e) && !isNaN(+e.slice(1)) && (this[e] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0][4]; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(r) { if (this.done) throw r; var e = this; function n(t) { a.type = \"throw\", a.arg = r, e.next = t; } for (var o = e.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i[4], u = this.prev, c = i[1], h = i[2]; if (-1 === i[0]) return n(\"end\"), !1; if (!c && !h) throw Error(\"try statement without catch or finally\"); if (null != i[0] && i[0] <= u) { if (u < c) return this.method = \"next\", this.arg = t, n(c), !0; if (u < h) return n(h), !1; } } }, abrupt: function abrupt(t, r) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var n = this.tryEntries[e]; if (n[0] > -1 && n[0] <= this.prev && this.prev < n[2]) { var o = n; break; } } o && (\"break\" === t || \"continue\" === t) && o[0] <= r && r <= o[2] && (o = null); var i = o ? o[4] : {}; return i.type = t, i.arg = r, o ? (this.method = \"next\", this.next = o[2], f) : this.complete(i); }, complete: function complete(t, r) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && r && (this.next = r), f; }, finish: function finish(t) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var e = this.tryEntries[r]; if (e[2] === t) return this.complete(e[4], e[3]), m(e), f; } }, \"catch\": function _catch(t) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var e = this.tryEntries[r]; if (e[0] === t) { var n = e[4]; if (\"throw\" === n.type) { var o = n.arg; m(e); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(r, e, n) { return this.delegate = { i: x(r), r: e, n: n }, \"next\" === this.method && (this.arg = t), f; } }, r; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\n/**\n * converter-core.js - FileToQR 파일 변환 핵심 모듈\n * 버전: 1.2.0\n * 최종 업데이트: 2025-08-01\n * 참조: ../../docs/architecture/converter-system.md\n * \n * 이 모듈은 파일 변환 기능의 핵심 로직을 제공합니다:\n * - 다양한 파일 형식 간 변환 구현\n * - 변환 프로세스 관리\n * - 파일 형식 지원 및 호환성 정보\n */\n\n\n\n\n// 컨버터 코어 모듈 정의\nvar ConverterCore = {\n  // 지원하는 파일 형식 및 변환 경로 정의\n  supportedFormats: {\n    // 이미지 형식\n    'image': {\n      'inputs': ['png', 'jpg', 'jpeg', 'gif', 'webp', 'bmp', 'svg'],\n      'outputs': ['png', 'jpg', 'jpeg', 'gif', 'webp', 'bmp', 'svg'],\n      'convertibleTo': {\n        'png': ['jpg', 'jpeg', 'gif', 'webp', 'bmp'],\n        'jpg': ['png', 'gif', 'webp', 'bmp'],\n        'jpeg': ['png', 'gif', 'webp', 'bmp'],\n        'gif': ['png', 'jpg', 'jpeg', 'webp', 'bmp'],\n        'webp': ['png', 'jpg', 'jpeg', 'gif', 'bmp'],\n        'bmp': ['png', 'jpg', 'jpeg', 'gif', 'webp'],\n        'svg': ['png', 'jpg', 'jpeg', 'gif', 'webp', 'bmp']\n      }\n    },\n    // 문서 형식 - 제한된 변환 기능 (브라우저 기반)\n    'document': {\n      'inputs': ['txt', 'md', 'csv', 'json', 'xml', 'html'],\n      'outputs': ['txt', 'md', 'csv', 'json', 'xml', 'html'],\n      'convertibleTo': {\n        'txt': ['md', 'html'],\n        'md': ['txt', 'html'],\n        'csv': ['json', 'txt', 'html'],\n        'json': ['csv', 'txt', 'xml', 'html'],\n        'xml': ['json', 'txt', 'html'],\n        'html': ['txt', 'md']\n      }\n    },\n    // 오디오 형식 - 제한된 변환 기능 (웹 오디오 API 기반)\n    'audio': {\n      'inputs': ['mp3', 'wav', 'ogg'],\n      'outputs': ['mp3', 'wav', 'ogg'],\n      'convertibleTo': {\n        'mp3': ['wav', 'ogg'],\n        'wav': ['mp3', 'ogg'],\n        'ogg': ['mp3', 'wav']\n      }\n    }\n  },\n  /**\n   * 새로운 통합 변환 인터페이스 - 프론트엔드 UI에서 사용\n   * @param {File} file - 원본 파일 객체\n   * @param {string} outputFormat - 변환할 형식 (확장자)\n   * @param {Object} options - 변환 옵션\n   * @param {Function} progressCallback - 진행 상황 콜백 함수\n   * @returns {Promise<Object>} 변환 결과 객체 (url, filename, size, mimeType)\n   */\n  convert: function convert(file, outputFormat) {\n    var _arguments = arguments,\n      _this = this;\n    return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var options, progressCallback, result, url;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            options = _arguments.length > 2 && _arguments[2] !== undefined ? _arguments[2] : {};\n            progressCallback = _arguments.length > 3 && _arguments[3] !== undefined ? _arguments[3] : function () {};\n            _context.prev = 2;\n            // 진행상황 업데이트 시작\n            progressCallback({\n              progress: 0\n            });\n\n            // 기존 convertFile 함수 호출\n            _context.next = 6;\n            return _this.convertFile(file, outputFormat, options, function (data) {\n              // 기존 콜백 포맷에서 새 포맷으로 변환\n              if (data.stage === 'start') {\n                progressCallback({\n                  progress: 0\n                });\n              } else if (data.stage === 'processing') {\n                progressCallback({\n                  progress: data.progress\n                });\n              } else if (data.stage === 'complete') {\n                progressCallback({\n                  progress: 100\n                });\n              }\n            });\n          case 6:\n            result = _context.sent;\n            // Blob URL 생성\n            url = URL.createObjectURL(result.blob); // 결과 리턴 포맷 변경\n            return _context.abrupt(\"return\", {\n              url: url,\n              filename: result.metadata.outputFileName,\n              size: result.blob.size,\n              mimeType: result.blob.type\n            });\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](2);\n            console.error('변환 실패:', _context.t0);\n            throw _context.t0;\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[2, 11]]);\n    }))();\n  },\n  /**\n   * 파일 변환 시작\n   * @param {File} file - 원본 파일 객체\n   * @param {string} outputFormat - 변환할 형식 (확장자)\n   * @param {Object} options - 변환 옵션\n   * @param {Function} progressCallback - 진행 상황 콜백 함수\n   * @returns {Promise<Object>} 변환 결과 객체 (Blob, 메타데이터 등)\n   */\n  convertFile: function convertFile(file, outputFormat) {\n    var _arguments2 = arguments,\n      _this2 = this;\n    return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n      var options, progressCallback, inputFormat, metadata, dataUri, result, outputFileName;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            options = _arguments2.length > 2 && _arguments2[2] !== undefined ? _arguments2[2] : {};\n            progressCallback = _arguments2.length > 3 && _arguments2[3] !== undefined ? _arguments2[3] : function () {};\n            // 변환 시작 알림\n            if (progressCallback) {\n              progressCallback({\n                stage: 'start',\n                progress: 0,\n                message: '변환 준비 중...'\n              });\n            }\n            _context2.prev = 3;\n            // 파일 유형 검증\n            inputFormat = file_utils.getFileExtension(file.name);\n            if (_this2.canConvert(inputFormat, outputFormat)) {\n              _context2.next = 7;\n              break;\n            }\n            throw new Error(\"\\uC9C0\\uC6D0\\uD558\\uC9C0 \\uC54A\\uB294 \\uBCC0\\uD658 \\uACBD\\uB85C: \".concat(inputFormat, \" \\u2192 \").concat(outputFormat));\n          case 7:\n            // 파일 메타데이터 추출\n            metadata = {\n              name: file.name,\n              type: file.type,\n              size: file.size,\n              lastModified: file.lastModified,\n              inputFormat: inputFormat,\n              outputFormat: outputFormat\n            }; // 변환 처리\n            progressCallback({\n              stage: 'processing',\n              progress: 30,\n              message: '파일 처리 중...'\n            });\n\n            // 파일 데이터 읽기\n            _context2.next = 11;\n            return file_utils.fileToDataUri(file);\n          case 11:\n            dataUri = _context2.sent;\n            if (!_this2.isImageConversion(inputFormat, outputFormat)) {\n              _context2.next = 18;\n              break;\n            }\n            _context2.next = 15;\n            return _this2.convertImage(dataUri, outputFormat, options, progressCallback);\n          case 15:\n            result = _context2.sent;\n            _context2.next = 31;\n            break;\n          case 18:\n            if (!_this2.isDocumentConversion(inputFormat, outputFormat)) {\n              _context2.next = 24;\n              break;\n            }\n            _context2.next = 21;\n            return _this2.convertDocument(dataUri, inputFormat, outputFormat, options, progressCallback);\n          case 21:\n            result = _context2.sent;\n            _context2.next = 31;\n            break;\n          case 24:\n            if (!_this2.isAudioConversion(inputFormat, outputFormat)) {\n              _context2.next = 30;\n              break;\n            }\n            _context2.next = 27;\n            return _this2.convertAudio(dataUri, outputFormat, options, progressCallback);\n          case 27:\n            result = _context2.sent;\n            _context2.next = 31;\n            break;\n          case 30:\n            throw new Error('지원하지 않는 변환 유형');\n          case 31:\n            // 결과 정보 반환\n            outputFileName = file_utils.getOutputFileName(file.name, outputFormat);\n            progressCallback({\n              stage: 'complete',\n              progress: 100,\n              message: '변환 완료!'\n            });\n            return _context2.abrupt(\"return\", {\n              blob: result,\n              metadata: _objectSpread(_objectSpread({}, metadata), {}, {\n                outputFileName: outputFileName\n              })\n            });\n          case 36:\n            _context2.prev = 36;\n            _context2.t0 = _context2[\"catch\"](3);\n            console.error('파일 변환 실패:', _context2.t0);\n            progressCallback({\n              stage: 'error',\n              progress: 0,\n              message: \"\\uBCC0\\uD658 \\uC2E4\\uD328: \".concat(_context2.t0.message)\n            });\n            throw _context2.t0;\n          case 41:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2, null, [[3, 36]]);\n    }))();\n  },\n  /**\n   * 변환 가능 여부 확인\n   * @param {string} inputFormat - 입력 파일 형식\n   * @param {string} outputFormat - 출력 파일 형식\n   * @returns {boolean} 변환 가능 여부\n   */\n  canConvert: function canConvert(inputFormat, outputFormat) {\n    // 동일 형식은 항상 가능\n    if (inputFormat === outputFormat) return true;\n\n    // 지원하는 형식 확인\n    var categories = Object.keys(this.supportedFormats);\n    for (var _i = 0, _categories = categories; _i < _categories.length; _i++) {\n      var category = _categories[_i];\n      var formatInfo = this.supportedFormats[category];\n\n      // 입력 형식이 지원되는지 확인\n      if (formatInfo.inputs.includes(inputFormat)) {\n        // 이 입력 형식에서 출력 형식으로 변환 가능한지 확인\n        if (formatInfo.convertibleTo[inputFormat] && formatInfo.convertibleTo[inputFormat].includes(outputFormat)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  },\n  /**\n   * 주어진 형식이 이미지 변환인지 확인\n   */\n  isImageConversion: function isImageConversion(inputFormat, outputFormat) {\n    var image = this.supportedFormats.image;\n    return image.inputs.includes(inputFormat) && image.outputs.includes(outputFormat);\n  },\n  /**\n   * 주어진 형식이 문서 변환인지 확인\n   */\n  isDocumentConversion: function isDocumentConversion(inputFormat, outputFormat) {\n    var document = this.supportedFormats.document;\n    return document.inputs.includes(inputFormat) && document.outputs.includes(outputFormat);\n  },\n  /**\n   * 주어진 형식이 오디오 변환인지 확인\n   */\n  isAudioConversion: function isAudioConversion(inputFormat, outputFormat) {\n    var audio = this.supportedFormats.audio;\n    return audio.inputs.includes(inputFormat) && audio.outputs.includes(outputFormat);\n  },\n  /**\n   * 이미지 변환 구현\n   * @param {string} dataUri - 원본 이미지 데이터 URI\n   * @param {string} outputFormat - 출력 이미지 형식\n   * @param {Object} options - 변환 옵션 (품질, 크기 등)\n   * @param {Function} progressCallback - 진행 상황 콜백\n   * @returns {Promise<Blob>} 변환된 이미지 Blob\n   */\n  convertImage: function convertImage(dataUri, outputFormat) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var progressCallback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function () {};\n    return new Promise(function (resolve, reject) {\n      try {\n        var img = new Image();\n        img.onload = function () {\n          progressCallback({\n            stage: 'processing',\n            progress: 50,\n            message: '이미지 변환 중...'\n          });\n          var canvas = document.createElement('canvas');\n          var ctx = canvas.getContext('2d');\n\n          // 이미지 크기 조정 (옵션에 따라)\n          var width = img.width;\n          var height = img.height;\n          if (options.width && options.height) {\n            width = options.width;\n            height = options.height;\n          } else if (options.width) {\n            var ratio = options.width / img.width;\n            width = options.width;\n            height = img.height * ratio;\n          } else if (options.height) {\n            var _ratio = options.height / img.height;\n            height = options.height;\n            width = img.width * _ratio;\n          } else if (options.maxWidth && img.width > options.maxWidth) {\n            var _ratio2 = options.maxWidth / img.width;\n            width = options.maxWidth;\n            height = img.height * _ratio2;\n          } else if (options.maxHeight && img.height > options.maxHeight) {\n            var _ratio3 = options.maxHeight / img.height;\n            height = options.maxHeight;\n            width = img.width * _ratio3;\n          }\n          canvas.width = width;\n          canvas.height = height;\n\n          // 배경색 설정 (필요한 경우)\n          if (options.backgroundColor) {\n            ctx.fillStyle = options.backgroundColor;\n            ctx.fillRect(0, 0, width, height);\n          }\n\n          // 이미지 그리기\n          ctx.drawImage(img, 0, 0, width, height);\n          progressCallback({\n            stage: 'processing',\n            progress: 80,\n            message: '이미지 인코딩 중...'\n          });\n\n          // 출력 형식에 따라 적절한 MIME 타입 설정\n          var mimeType = file_utils.getMimeType(outputFormat);\n\n          // 품질 설정 (JPEG, WEBP 등에 적용)\n          var quality = options.quality ? options.quality / 100 : 0.92;\n\n          // 캔버스를 Blob으로 변환\n          canvas.toBlob(function (blob) {\n            if (blob) {\n              progressCallback({\n                stage: 'finalizing',\n                progress: 90,\n                message: '변환 완료 중...'\n              });\n              resolve(blob);\n            } else {\n              reject(new Error('이미지 변환 실패'));\n            }\n          }, mimeType, quality);\n        };\n        img.onerror = function () {\n          reject(new Error('이미지 로드 실패'));\n        };\n        img.src = dataUri;\n      } catch (error) {\n        reject(error);\n      }\n    });\n  },\n  /**\n   * 문서 변환 구현\n   * @param {string} dataUri - 원본 문서 데이터 URI\n   * @param {string} inputFormat - 입력 문서 형식\n   * @param {string} outputFormat - 출력 문서 형식\n   * @param {Object} options - 변환 옵션\n   * @param {Function} progressCallback - 진행 상황 콜백\n   * @returns {Promise<Blob>} 변환된 문서 Blob\n   */\n  convertDocument: function convertDocument(dataUri, inputFormat, outputFormat) {\n    var _this3 = this;\n    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    var progressCallback = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : function () {};\n    return new Promise(function (resolve, reject) {\n      try {\n        progressCallback({\n          stage: 'processing',\n          progress: 40,\n          message: '문서 변환 중...'\n        });\n\n        // 데이터 URI에서 실제 콘텐츠 추출\n        var base64Content = dataUri.split(',')[1];\n        var textContent = atob(base64Content);\n        var result = '';\n\n        // 형식별 변환 로직\n        if (inputFormat === 'csv' && outputFormat === 'json') {\n          // CSV → JSON 변환\n          result = _this3.csvToJson(textContent, options);\n        } else if (inputFormat === 'json' && outputFormat === 'csv') {\n          // JSON → CSV 변환\n          result = _this3.jsonToCsv(textContent, options);\n        } else if (inputFormat === 'md' && outputFormat === 'html') {\n          // Markdown → HTML 변환 (간단한 규칙만 적용)\n          result = _this3.markdownToHtml(textContent);\n        } else if (inputFormat === 'json' && outputFormat === 'xml') {\n          // JSON → XML 변환\n          result = _this3.jsonToXml(textContent);\n        } else if (inputFormat === 'xml' && outputFormat === 'json') {\n          // XML → JSON 변환 (간단한 구현)\n          result = _this3.xmlToJson(textContent);\n        } else {\n          // 기타 텍스트 변환 (단순 포맷 변경)\n          result = textContent;\n        }\n        progressCallback({\n          stage: 'finalizing',\n          progress: 90,\n          message: '문서 변환 완료 중...'\n        });\n\n        // 결과 Blob 생성\n        var outputMimeType = file_utils.getMimeType(outputFormat);\n        var resultBlob = new Blob([result], {\n          type: outputMimeType\n        });\n        resolve(resultBlob);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  },\n  /**\n   * 오디오 변환 구현 (간단한 예시)\n   * 참고: 완전한 오디오 변환은 웹 오디오 API의 제한으로 인해 제약이 있습니다.\n   */\n  convertAudio: function convertAudio(dataUri, outputFormat) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var progressCallback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function () {};\n    // 실제 환경에서는 웹 오디오 API를 사용하여 구현해야 합니다.\n    return new Promise(function (resolve, reject) {\n      progressCallback({\n        stage: 'processing',\n        progress: 50,\n        message: '오디오 변환 중... (데모)'\n      });\n\n      // 데모 목적으로 간단히 구현\n      // 실제 구현은 Audio API와 AudioContext를 사용해야 함\n      setTimeout(function () {\n        progressCallback({\n          stage: 'finalizing',\n          progress: 90,\n          message: '오디오 인코딩 중...'\n        });\n\n        // 원본 데이터를 그대로 반환 (실제로는 변환 로직 필요)\n        fetch(dataUri).then(function (response) {\n          return response.blob();\n        }).then(function (blob) {\n          var outputMimeType = file_utils.getMimeType(outputFormat);\n          var resultBlob = new Blob([blob], {\n            type: outputMimeType\n          });\n          resolve(resultBlob);\n        })[\"catch\"](reject);\n      }, 1000);\n    });\n  },\n  // 문서 변환 유틸리티 함수들\n  /**\n   * CSV를 JSON으로 변환\n   */\n  csvToJson: function csvToJson(csvText) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var lines = csvText.split(/\\r?\\n/);\n    if (lines.length === 0) return '[]';\n    var headers = lines[0].split(',').map(function (header) {\n      return header.trim();\n    });\n    var result = [];\n    var _loop = function _loop() {\n      if (!lines[i].trim()) return 1; // continue\n      var values = lines[i].split(',');\n      var obj = {};\n      headers.forEach(function (header, index) {\n        obj[header] = values[index] ? values[index].trim() : '';\n      });\n      result.push(obj);\n    };\n    for (var i = 1; i < lines.length; i++) {\n      if (_loop()) continue;\n    }\n    return JSON.stringify(result, null, 2);\n  },\n  /**\n   * JSON을 CSV로 변환\n   */\n  jsonToCsv: function jsonToCsv(jsonText) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    try {\n      var data = JSON.parse(jsonText);\n      if (!Array.isArray(data) || data.length === 0) {\n        return '';\n      }\n      var headers = Object.keys(data[0]);\n      var headerRow = headers.join(',');\n      var rows = data.map(function (obj) {\n        return headers.map(function (header) {\n          var value = obj[header];\n\n          // 쉼표, 따옴표 등이 포함된 경우 따옴표로 감싸기\n          if (typeof value === 'string' && (value.includes(',') || value.includes('\"'))) {\n            return \"\\\"\".concat(value.replace(/\"/g, '\"\"'), \"\\\"\");\n          }\n          return value !== undefined ? value : '';\n        }).join(',');\n      });\n      return [headerRow].concat(_toConsumableArray(rows)).join('\\n');\n    } catch (e) {\n      throw new Error('유효하지 않은 JSON 형식');\n    }\n  },\n  /**\n   * 마크다운을 HTML로 변환 (간단한 규칙만 적용)\n   */\n  markdownToHtml: function markdownToHtml(markdown) {\n    var html = markdown\n    // 헤더 변환\n    .replace(/^# (.*?)$/gm, '<h1>$1</h1>').replace(/^## (.*?)$/gm, '<h2>$1</h2>').replace(/^### (.*?)$/gm, '<h3>$1</h3>')\n    // 굵은 텍스트\n    .replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>')\n    // 이탤릭체\n    .replace(/\\*(.*?)\\*/g, '<em>$1</em>')\n    // 링크\n    .replace(/\\[(.*?)\\]\\((.*?)\\)/g, '<a href=\"$2\">$1</a>')\n    // 순서 없는 목록\n    .replace(/^\\- (.*?)$/gm, '<li>$1</li>')\n    // 코드 블록\n    .replace(/`(.*?)`/g, '<code>$1</code>')\n    // 문단\n    .replace(/(.+?)(\\n\\n|$)/g, '<p>$1</p>');\n\n    // 순서 없는 목록 항목을 ul로 감싸기\n    html = html.replace(/<li>.*?<\\/li>(\\n<li>.*?<\\/li>)*/g, function (match) {\n      return '<ul>' + match + '</ul>';\n    });\n    return html;\n  },\n  /**\n   * JSON을 XML로 변환 (간단한 구현)\n   */\n  jsonToXml: function jsonToXml(jsonText) {\n    try {\n      var data = JSON.parse(jsonText);\n      var _toXml = function toXml(obj) {\n        var rootName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'root';\n        var xml = \"<\".concat(rootName, \">\");\n        for (var key in obj) {\n          if (obj.hasOwnProperty(key)) {\n            var value = obj[key];\n            if (Array.isArray(value)) {\n              xml += \"<\".concat(key, \">\");\n              value.forEach(function (item) {\n                if (_typeof(item) === 'object' && item !== null) {\n                  xml += _toXml(item, 'item');\n                } else {\n                  xml += \"<item>\".concat(item, \"</item>\");\n                }\n              });\n              xml += \"</\".concat(key, \">\");\n            } else if (_typeof(value) === 'object' && value !== null) {\n              xml += _toXml(value, key);\n            } else {\n              xml += \"<\".concat(key, \">\").concat(value, \"</\").concat(key, \">\");\n            }\n          }\n        }\n        xml += \"</\".concat(rootName, \">\");\n        return xml;\n      };\n      return '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n' + _toXml(data);\n    } catch (e) {\n      throw new Error('유효하지 않은 JSON 형식');\n    }\n  },\n  /**\n   * XML을 JSON으로 변환 (간단한 구현)\n   * 참고: 완전한 XML 파싱은 DOMParser를 사용하는 것이 좋습니다.\n   */\n  xmlToJson: function xmlToJson(xmlText) {\n    try {\n      var parser = new DOMParser();\n      var xmlDoc = parser.parseFromString(xmlText, 'text/xml');\n      var _parseNode = function parseNode(node) {\n        if (node.nodeType === Node.TEXT_NODE) {\n          var text = node.nodeValue.trim();\n          return text.length > 0 ? text : null;\n        }\n        if (node.nodeType === Node.ELEMENT_NODE) {\n          var _result = {};\n          var childElements = Array.from(node.children);\n          if (childElements.length === 0) {\n            return node.textContent.trim();\n          }\n\n          // 동일한 이름의 자식 요소가 여러 개인지 확인\n          var childNames = childElements.map(function (child) {\n            return child.nodeName;\n          });\n          var uniqueNames = _toConsumableArray(new Set(childNames));\n          var _iterator = _createForOfIteratorHelper(uniqueNames),\n            _step;\n          try {\n            var _loop2 = function _loop2() {\n              var name = _step.value;\n              var elements = childElements.filter(function (child) {\n                return child.nodeName === name;\n              });\n              if (elements.length === 1) {\n                // 단일 요소\n                _result[name] = _parseNode(elements[0]);\n              } else {\n                // 배열로 처리\n                _result[name] = elements.map(function (element) {\n                  return _parseNode(element);\n                });\n              }\n            };\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              _loop2();\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n          return _result;\n        }\n        return null;\n      };\n      var rootElement = xmlDoc.documentElement;\n      var result = {};\n      result[rootElement.nodeName] = _parseNode(rootElement);\n      return JSON.stringify(result, null, 2);\n    } catch (e) {\n      throw new Error('유효하지 않은 XML 형식');\n    }\n  }\n};\n\n// 하위 호환성을 위한 전역 참조\nif (typeof window !== 'undefined') {\n  window.FileToQR = window.FileToQR || {};\n  window.FileToQR.core = window.FileToQR.core || {};\n  window.FileToQR.core.converter = ConverterCore;\n  // 직접 접근을 위한 전역 참조 추가\n  window.ConverterCore = ConverterCore;\n}\n\n// 모듈 내보내기\n/* harmony default export */ const converter_core = (ConverterCore);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///635\n")},890:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return r; }; var t, r = {}, e = Object.prototype, n = e.hasOwnProperty, o = \"function\" == typeof Symbol ? Symbol : {}, i = o.iterator || \"@@iterator\", a = o.asyncIterator || \"@@asyncIterator\", u = o.toStringTag || \"@@toStringTag\"; function c(t, r, e, n) { return Object.defineProperty(t, r, { value: e, enumerable: !n, configurable: !n, writable: !n }); } try { c({}, \"\"); } catch (t) { c = function c(t, r, e) { return t[r] = e; }; } function h(r, e, n, o) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype); return c(a, \"_invoke\", function (r, e, n) { var o = 1; return function (i, a) { if (3 === o) throw Error(\"Generator is already running\"); if (4 === o) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var u = n.delegate; if (u) { var c = d(u, n); if (c) { if (c === f) continue; return c; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (1 === o) throw o = 4, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = 3; var h = s(r, e, n); if (\"normal\" === h.type) { if (o = n.done ? 4 : 2, h.arg === f) continue; return { value: h.arg, done: n.done }; } \"throw\" === h.type && (o = 4, n.method = \"throw\", n.arg = h.arg); } }; }(r, n, new Context(o || [])), !0), a; } function s(t, r, e) { try { return { type: \"normal\", arg: t.call(r, e) }; } catch (t) { return { type: \"throw\", arg: t }; } } r.wrap = h; var f = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var l = {}; c(l, i, function () { return this; }); var p = Object.getPrototypeOf, y = p && p(p(x([]))); y && y !== e && n.call(y, i) && (l = y); var v = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(l); function g(t) { [\"next\", \"throw\", \"return\"].forEach(function (r) { c(t, r, function (t) { return this._invoke(r, t); }); }); } function AsyncIterator(t, r) { function e(o, i, a, u) { var c = s(t[o], t, i); if (\"throw\" !== c.type) { var h = c.arg, f = h.value; return f && \"object\" == _typeof(f) && n.call(f, \"__await\") ? r.resolve(f.__await).then(function (t) { e(\"next\", t, a, u); }, function (t) { e(\"throw\", t, a, u); }) : r.resolve(f).then(function (t) { h.value = t, a(h); }, function (t) { return e(\"throw\", t, a, u); }); } u(c.arg); } var o; c(this, \"_invoke\", function (t, n) { function i() { return new r(function (r, o) { e(t, n, r, o); }); } return o = o ? o.then(i, i) : i(); }, !0); } function d(r, e) { var n = e.method, o = r.i[n]; if (o === t) return e.delegate = null, \"throw\" === n && r.i[\"return\"] && (e.method = \"return\", e.arg = t, d(r, e), \"throw\" === e.method) || \"return\" !== n && (e.method = \"throw\", e.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), f; var i = s(o, r.i, e.arg); if (\"throw\" === i.type) return e.method = \"throw\", e.arg = i.arg, e.delegate = null, f; var a = i.arg; return a ? a.done ? (e[r.r] = a.value, e.next = r.n, \"return\" !== e.method && (e.method = \"next\", e.arg = t), e.delegate = null, f) : a : (e.method = \"throw\", e.arg = new TypeError(\"iterator result is not an object\"), e.delegate = null, f); } function w(t) { this.tryEntries.push(t); } function m(r) { var e = r[4] || {}; e.type = \"normal\", e.arg = t, r[4] = e; } function Context(t) { this.tryEntries = [[-1]], t.forEach(w, this), this.reset(!0); } function x(r) { if (null != r) { var e = r[i]; if (e) return e.call(r); if (\"function\" == typeof r.next) return r; if (!isNaN(r.length)) { var o = -1, a = function e() { for (; ++o < r.length;) if (n.call(r, o)) return e.value = r[o], e.done = !1, e; return e.value = t, e.done = !0, e; }; return a.next = a; } } throw new TypeError(_typeof(r) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, c(v, \"constructor\", GeneratorFunctionPrototype), c(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = c(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), r.isGeneratorFunction = function (t) { var r = \"function\" == typeof t && t.constructor; return !!r && (r === GeneratorFunction || \"GeneratorFunction\" === (r.displayName || r.name)); }, r.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, c(t, u, \"GeneratorFunction\")), t.prototype = Object.create(v), t; }, r.awrap = function (t) { return { __await: t }; }, g(AsyncIterator.prototype), c(AsyncIterator.prototype, a, function () { return this; }), r.AsyncIterator = AsyncIterator, r.async = function (t, e, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(h(t, e, n, o), i); return r.isGeneratorFunction(e) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, g(v), c(v, u, \"Generator\"), c(v, i, function () { return this; }), c(v, \"toString\", function () { return \"[object Generator]\"; }), r.keys = function (t) { var r = Object(t), e = []; for (var n in r) e.unshift(n); return function t() { for (; e.length;) if ((n = e.pop()) in r) return t.value = n, t.done = !1, t; return t.done = !0, t; }; }, r.values = x, Context.prototype = { constructor: Context, reset: function reset(r) { if (this.prev = this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(m), !r) for (var e in this) \"t\" === e.charAt(0) && n.call(this, e) && !isNaN(+e.slice(1)) && (this[e] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0][4]; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(r) { if (this.done) throw r; var e = this; function n(t) { a.type = \"throw\", a.arg = r, e.next = t; } for (var o = e.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i[4], u = this.prev, c = i[1], h = i[2]; if (-1 === i[0]) return n(\"end\"), !1; if (!c && !h) throw Error(\"try statement without catch or finally\"); if (null != i[0] && i[0] <= u) { if (u < c) return this.method = \"next\", this.arg = t, n(c), !0; if (u < h) return n(h), !1; } } }, abrupt: function abrupt(t, r) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var n = this.tryEntries[e]; if (n[0] > -1 && n[0] <= this.prev && this.prev < n[2]) { var o = n; break; } } o && (\"break\" === t || \"continue\" === t) && o[0] <= r && r <= o[2] && (o = null); var i = o ? o[4] : {}; return i.type = t, i.arg = r, o ? (this.method = \"next\", this.next = o[2], f) : this.complete(i); }, complete: function complete(t, r) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && r && (this.next = r), f; }, finish: function finish(t) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var e = this.tryEntries[r]; if (e[2] === t) return this.complete(e[4], e[3]), m(e), f; } }, \"catch\": function _catch(t) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var e = this.tryEntries[r]; if (e[0] === t) { var n = e[4]; if (\"throw\" === n.type) { var o = n.arg; m(e); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(r, e, n) { return this.delegate = { i: x(r), r: e, n: n }, \"next\" === this.method && (this.arg = t), f; } }, r; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\n/**\n * qr-generator.js - FileToQR QR 코드 생성 모듈\n * 버전: 1.0.0\n * 최종 업데이트: 2025-06-15\n * \n * 이 모듈은 다양한 콘텐츠로 QR 코드를 생성하는 기능을 제공합니다:\n * - URL, 텍스트, 연락처 정보 등을 QR 코드로 변환\n * - 색상, 크기, 로고 등 커스터마이징 옵션\n * - 생성된 QR 코드 다운로드 (PNG, SVG, PDF)\n */\n\n// 로컬 QR 코드 라이브러리 파일 경로 시도 목록\nvar QR_LIB_PATHS = ['assets/js/vendor/qrcode.min.js', '/assets/js/vendor/qrcode.min.js', './assets/js/vendor/qrcode.min.js', '../js/vendor/qrcode.min.js', '../../assets/js/vendor/qrcode.min.js'];\n\n// QR 코드 생성 라이브러리 임포트 (QRCode.js 사용)\nvar importQRCodeLibrary = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n    return _regeneratorRuntime().wrap(function _callee2$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          if (!window.QRCode) {\n            _context3.next = 3;\n            break;\n          }\n          console.log('QRCode 라이브러리가 이미 전역 객체에 있습니다.');\n          return _context3.abrupt(\"return\", window.QRCode);\n        case 3:\n          _context3.prev = 3;\n          // QRCode 라이브러리 번들에서 가져오기 또는 CDN에서 로드\n          console.log('QRCode 라이브러리 로드 시도');\n\n          // 첫 번째 방법: 글로벌 스크립트 태그에서 로드된 경우\n          if (!(typeof QRCode !== 'undefined')) {\n            _context3.next = 9;\n            break;\n          }\n          console.log('QRCode가 글로벌 스코프에서 발견되었습니다.');\n          window.QRCode = QRCode;\n          return _context3.abrupt(\"return\", QRCode);\n        case 9:\n          return _context3.abrupt(\"return\", new Promise(/*#__PURE__*/function () {\n            var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(resolve, reject) {\n              var localPathFound, _loop, _i, _QR_LIB_PATHS, loadFromCDN;\n              return _regeneratorRuntime().wrap(function _callee$(_context2) {\n                while (1) switch (_context2.prev = _context2.next) {\n                  case 0:\n                    loadFromCDN = function _loadFromCDN() {\n                      var script = document.createElement('script');\n                      script.src = 'https://cdn.jsdelivr.net/npm/qrcode@1.5.3/build/qrcode.min.js';\n                      script.onload = function () {\n                        console.log('QRCode 라이브러리 CDN에서 로드 성공');\n                        window.QRCode = QRCode;\n                        resolve(QRCode);\n                      };\n                      script.onerror = function (error) {\n                        console.error('QRCode 라이브러리 로드 실패, 백업 CDN 시도:', error);\n\n                        // 백업 CDN 시도\n                        var backupScript = document.createElement('script');\n                        backupScript.src = 'https://cdn.rawgit.com/davidshimjs/qrcodejs/gh-pages/qrcode.min.js';\n                        backupScript.onload = function () {\n                          console.log('QRCode 라이브러리 백업 CDN에서 로드 성공');\n                          resolve(window.QRCode);\n                        };\n                        backupScript.onerror = function () {\n                          // 최종 백업: 인라인 기본 QR 코드 생성기 제공\n                          console.error('모든 QRCode 라이브러리 로드 실패, 내장 QR 생성기 사용');\n\n                          // 간단한 QR 코드 생성 API 제공\n                          window.QRCode = {\n                            toCanvas: function toCanvas(canvas, text, options) {\n                              var ctx = canvas.getContext('2d');\n                              ctx.fillStyle = (options === null || options === void 0 ? void 0 : options.colorLight) || '#FFFFFF';\n                              ctx.fillRect(0, 0, canvas.width, canvas.height);\n                              ctx.fillStyle = (options === null || options === void 0 ? void 0 : options.colorDark) || '#000000';\n                              ctx.font = 'bold 14px Arial';\n                              ctx.textAlign = 'center';\n                              ctx.fillText('QR 코드 생성 실패', canvas.width / 2, canvas.height / 2 - 20);\n                              ctx.font = '12px Arial';\n                              ctx.fillText('라이브러리를 로드할 수 없습니다', canvas.width / 2, canvas.height / 2 + 10);\n\n                              // 간단한 QR 코드처럼 보이는 패턴 그리기\n                              ctx.fillRect(canvas.width / 4, canvas.height / 4, 20, 20);\n                              ctx.fillRect(canvas.width * 3 / 4 - 20, canvas.height / 4, 20, 20);\n                              ctx.fillRect(canvas.width / 4, canvas.height * 3 / 4 - 20, 20, 20);\n                              return Promise.resolve();\n                            },\n                            CorrectLevel: {\n                              L: 1,\n                              M: 0,\n                              Q: 3,\n                              H: 2\n                            }\n                          };\n                          resolve(window.QRCode);\n                        };\n                        document.head.appendChild(backupScript);\n                      };\n                      document.head.appendChild(script);\n                    };\n                    // 로컬 파일이 있는지 확인 - 여러 경로 시도\n                    localPathFound = false;\n                    _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop() {\n                      var path, response, script;\n                      return _regeneratorRuntime().wrap(function _loop$(_context) {\n                        while (1) switch (_context.prev = _context.next) {\n                          case 0:\n                            path = _QR_LIB_PATHS[_i];\n                            _context.prev = 1;\n                            console.log(\"\\uB85C\\uCEEC \\uACBD\\uB85C \\uC2DC\\uB3C4: \".concat(path));\n                            _context.next = 5;\n                            return fetch(path, {\n                              method: 'HEAD'\n                            });\n                          case 5:\n                            response = _context.sent;\n                            if (!response.ok) {\n                              _context.next = 15;\n                              break;\n                            }\n                            console.log(\"\\uB85C\\uCEEC QRCode \\uB77C\\uC774\\uBE0C\\uB7EC\\uB9AC \\uD30C\\uC77C \\uBC1C\\uACAC (\".concat(path, \"), \\uB85C\\uB4DC \\uC911...\"));\n                            localPathFound = true;\n                            script = document.createElement('script');\n                            script.src = path;\n                            script.onload = function () {\n                              console.log('로컬 QRCode 라이브러리 로드 성공');\n                              window.QRCode = QRCode;\n                              resolve(QRCode);\n                            };\n                            script.onerror = function (error) {\n                              console.warn(\"\\uB85C\\uCEEC QRCode \\uB77C\\uC774\\uBE0C\\uB7EC\\uB9AC \\uD30C\\uC77C \\uB85C\\uB4DC \\uC2E4\\uD328 (\".concat(path, \"):\"), error);\n                              // 다음 경로 시도 대신 CDN으로 넘어감\n                              loadFromCDN();\n                            };\n                            document.head.appendChild(script);\n\n                            // 로컬 파일을 찾았으므로 루프 중단\n                            return _context.abrupt(\"return\", 1);\n                          case 15:\n                            _context.next = 20;\n                            break;\n                          case 17:\n                            _context.prev = 17;\n                            _context.t0 = _context[\"catch\"](1);\n                            console.warn(\"\\uB85C\\uCEEC \\uACBD\\uB85C \\uD655\\uC778 \\uC2E4\\uD328 (\".concat(path, \"):\"), _context.t0);\n                          case 20:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }, _loop, null, [[1, 17]]);\n                    });\n                    _i = 0, _QR_LIB_PATHS = QR_LIB_PATHS;\n                  case 4:\n                    if (!(_i < _QR_LIB_PATHS.length)) {\n                      _context2.next = 11;\n                      break;\n                    }\n                    return _context2.delegateYield(_loop(), \"t0\", 6);\n                  case 6:\n                    if (!_context2.t0) {\n                      _context2.next = 8;\n                      break;\n                    }\n                    return _context2.abrupt(\"break\", 11);\n                  case 8:\n                    _i++;\n                    _context2.next = 4;\n                    break;\n                  case 11:\n                    // 로컬 파일을 찾지 못했으면 CDN에서 로드\n                    if (!localPathFound) {\n                      console.log('로컬 QRCode 라이브러리 없음, CDN 시도...');\n                      loadFromCDN();\n                    }\n\n                    // CDN에서 로드하는 함수\n                  case 12:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }, _callee);\n            }));\n            return function (_x, _x2) {\n              return _ref2.apply(this, arguments);\n            };\n          }()));\n        case 12:\n          _context3.prev = 12;\n          _context3.t0 = _context3[\"catch\"](3);\n          console.error('QRCode 라이브러리 로드 중 오류 발생:', _context3.t0);\n          throw _context3.t0;\n        case 16:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee2, null, [[3, 12]]);\n  }));\n  return function importQRCodeLibrary() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\n// QR 코드 생성기 모듈\nvar QRGenerator = {\n  // 내부 상태\n  state: {\n    initialized: false,\n    qrLibrary: null,\n    currentOptions: {\n      content: '',\n      type: 'text',\n      foreground: '#000000',\n      background: '#FFFFFF',\n      size: 256,\n      margin: 4,\n      errorCorrectionLevel: 'M',\n      logo: null\n    },\n    generatedQR: null\n  },\n  /**\n   * 모듈 초기화\n   * @returns {Promise<boolean>} 초기화 성공 여부\n   */\n  init: function init() {\n    var _this = this;\n    return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n      return _regeneratorRuntime().wrap(function _callee3$(_context4) {\n        while (1) switch (_context4.prev = _context4.next) {\n          case 0:\n            if (!_this.state.initialized) {\n              _context4.next = 3;\n              break;\n            }\n            console.log('QRGenerator가 이미 초기화되어 있습니다.');\n            return _context4.abrupt(\"return\", true);\n          case 3:\n            _context4.prev = 3;\n            console.log('QR 코드 생성기 초기화 시작...');\n\n            // QR 코드 라이브러리 로드\n            console.log('QR 코드 라이브러리 로드 시도');\n            _context4.next = 8;\n            return importQRCodeLibrary();\n          case 8:\n            _this.state.qrLibrary = _context4.sent;\n            console.log('QR 코드 라이브러리 로드 성공:', _this.state.qrLibrary);\n\n            // UI 요소 초기화\n            console.log('UI 요소 초기화 시작');\n            _this._initUI();\n\n            // 이벤트 리스너 등록\n            console.log('이벤트 리스너 등록 시작');\n            _this._registerEventListeners();\n            _this.state.initialized = true;\n            console.log('QR 코드 생성기 초기화 완료. 상태:', _this.state);\n            return _context4.abrupt(\"return\", true);\n          case 19:\n            _context4.prev = 19;\n            _context4.t0 = _context4[\"catch\"](3);\n            console.error('QR 코드 생성기 초기화 중 에러 발생:', _context4.t0);\n            // 에러 상세 추적\n            console.error('스택 트레이스:', _context4.t0.stack);\n            console.error('에러 발생 시 모듈 상태:', JSON.stringify(_this.state));\n            return _context4.abrupt(\"return\", false);\n          case 25:\n          case \"end\":\n            return _context4.stop();\n        }\n      }, _callee3, null, [[3, 19]]);\n    }))();\n  },\n  /**\n   * QR 코드 생성 (공개 메서드)\n   * 폼에서 데이터를 수집하여 QR 코드 생성\n   */\n  generateQRCode: function generateQRCode() {\n    console.log('QRGenerator.generateQRCode 호출됨');\n\n    // 상태 확인\n    if (!this.state.initialized) {\n      console.error('QRGenerator가 초기화되지 않았습니다. init() 먼저 호출하세요.');\n      return;\n    }\n    console.log('QR 코드 생성 시작, 현재 상태:', this.state);\n    this._handleFormSubmit();\n  },\n  /**\n     * QR 코드 다운로드 (공개 메서드)\n     * @param {string} format - 다운로드 형식 (png, svg, jpeg)\n     */\n  downloadQRCode: function downloadQRCode(format) {\n    console.log(\"QRGenerator.downloadQRCode \\uD638\\uCD9C\\uB428: \".concat(format));\n\n    // 상태 확인\n    if (!this.state.initialized) {\n      console.error('QRGenerator가 초기화되지 않았습니다. init() 먼저 호출하세요.');\n      return;\n    }\n    if (!this.state.generatedQR) {\n      console.error('생성된 QR 코드가 없습니다. generateQRCode()를 먼저 호출하세요.');\n      return;\n    }\n    this._downloadQRCode(format);\n  },\n  /**\n   * UI 요소 초기화\n   * @private\n   */\n  _initUI: function _initUI() {\n    var _this2 = this;\n    // UI 요소가 로드되기를 기다림\n    var _checkElements = function checkElements() {\n      var qrForm = document.getElementById('qr-form');\n      var contentInput = document.getElementById('qr-content');\n      var qrPreview = document.getElementById('qr-preview');\n      if (!qrForm || !contentInput || !qrPreview) {\n        // DOM 요소가 아직 없으면 100ms 후 다시 시도\n        setTimeout(_checkElements, 100);\n        return;\n      }\n\n      // URL에서 초기 내용 가져오기\n      var queryParams = new URLSearchParams(window.location.search);\n      var initialContent = queryParams.get('content') || '';\n      var initialType = queryParams.get('type') || 'text';\n      if (initialContent) {\n        contentInput.value = initialContent;\n        _this2.state.currentOptions.content = initialContent;\n        _this2.state.currentOptions.type = initialType;\n\n        // URL 파라미터가 있으면 자동으로 QR 코드 생성\n        _this2._generateQRCode();\n      }\n\n      // 색상 선택기 초기화\n      var fgColorPicker = document.getElementById('qr-foreground');\n      var bgColorPicker = document.getElementById('qr-background');\n      if (fgColorPicker) fgColorPicker.value = _this2.state.currentOptions.foreground;\n      if (bgColorPicker) bgColorPicker.value = _this2.state.currentOptions.background;\n\n      // 크기 슬라이더 초기화\n      var sizeSlider = document.getElementById('qr-size');\n      if (sizeSlider) {\n        sizeSlider.value = _this2.state.currentOptions.size;\n        var sizeValue = document.getElementById('qr-size-value');\n        if (sizeValue) sizeValue.textContent = \"\".concat(_this2.state.currentOptions.size, \"px\");\n      }\n\n      // 여백 슬라이더 초기화\n      var marginSlider = document.getElementById('qr-margin');\n      if (marginSlider) {\n        marginSlider.value = _this2.state.currentOptions.margin;\n        var marginValue = document.getElementById('qr-margin-value');\n        if (marginValue) marginValue.textContent = _this2.state.currentOptions.margin;\n      }\n\n      // 오류 수정 레벨 선택기 초기화\n      var ecLevelSelect = document.getElementById('qr-error-correction');\n      if (ecLevelSelect) ecLevelSelect.value = _this2.state.currentOptions.errorCorrectionLevel;\n    };\n    _checkElements();\n  },\n  /**\n     * 이벤트 리스너 등록\n     * @private\n     */\n  _registerEventListeners: function _registerEventListeners() {\n    var _this3 = this;\n    document.addEventListener('DOMContentLoaded', function () {\n      // QR 코드 생성 폼\n      var qrForm = document.getElementById('qr-form');\n      if (qrForm) {\n        qrForm.addEventListener('submit', function (e) {\n          e.preventDefault();\n          _this3._handleFormSubmit();\n        });\n      }\n\n      // 내용 타입 변경\n      var typeSelector = document.getElementById('qr-type');\n      if (typeSelector) {\n        typeSelector.addEventListener('change', function () {\n          _this3._updateContentPlaceholder();\n        });\n      }\n\n      // 색상 변경\n      var fgColorPicker = document.getElementById('qr-foreground');\n      var bgColorPicker = document.getElementById('qr-background');\n      if (fgColorPicker) {\n        fgColorPicker.addEventListener('change', function () {\n          _this3.state.currentOptions.foreground = fgColorPicker.value;\n          if (_this3.state.generatedQR) _this3._generateQRCode();\n        });\n      }\n      if (bgColorPicker) {\n        bgColorPicker.addEventListener('change', function () {\n          _this3.state.currentOptions.background = bgColorPicker.value;\n          if (_this3.state.generatedQR) _this3._generateQRCode();\n        });\n      }\n\n      // 크기 변경\n      var sizeSlider = document.getElementById('qr-size');\n      if (sizeSlider) {\n        sizeSlider.addEventListener('input', function () {\n          _this3.state.currentOptions.size = parseInt(sizeSlider.value, 10);\n          var sizeValue = document.getElementById('qr-size-value');\n          if (sizeValue) sizeValue.textContent = \"\".concat(_this3.state.currentOptions.size, \"px\");\n          if (_this3.state.generatedQR) _this3._generateQRCode();\n        });\n      }\n\n      // 여백 변경\n      var marginSlider = document.getElementById('qr-margin');\n      if (marginSlider) {\n        marginSlider.addEventListener('input', function () {\n          _this3.state.currentOptions.margin = parseInt(marginSlider.value, 10);\n          var marginValue = document.getElementById('qr-margin-value');\n          if (marginValue) marginValue.textContent = _this3.state.currentOptions.margin;\n          if (_this3.state.generatedQR) _this3._generateQRCode();\n        });\n      }\n\n      // 오류 수정 레벨 변경\n      var ecLevelSelect = document.getElementById('qr-error-correction');\n      if (ecLevelSelect) {\n        ecLevelSelect.addEventListener('change', function () {\n          _this3.state.currentOptions.errorCorrectionLevel = ecLevelSelect.value;\n          if (_this3.state.generatedQR) _this3._generateQRCode();\n        });\n      }\n\n      // 로고 이미지 변경\n      var logoInput = document.getElementById('qr-logo');\n      if (logoInput) {\n        logoInput.addEventListener('change', function (e) {\n          var file = e.target.files[0];\n          if (file) {\n            var reader = new FileReader();\n            reader.onload = function (e) {\n              _this3.state.currentOptions.logo = e.target.result;\n              if (_this3.state.generatedQR) _this3._generateQRCode();\n            };\n            reader.readAsDataURL(file);\n          } else {\n            _this3.state.currentOptions.logo = null;\n            if (_this3.state.generatedQR) _this3._generateQRCode();\n          }\n        });\n      }\n\n      // 다운로드 버튼\n      var pngDownloadBtn = document.getElementById('download-png');\n      var svgDownloadBtn = document.getElementById('download-svg');\n      if (pngDownloadBtn) {\n        pngDownloadBtn.addEventListener('click', function () {\n          _this3._downloadQRCode('png');\n        });\n      }\n      if (svgDownloadBtn) {\n        svgDownloadBtn.addEventListener('click', function () {\n          _this3._downloadQRCode('svg');\n        });\n      }\n    });\n  },\n  /**\n     * 콘텐츠 타입에 따른 입력 플레이스홀더 업데이트\n     * @private\n   */\n  _updateContentPlaceholder: function _updateContentPlaceholder() {\n    var typeSelector = document.getElementById('qr-type');\n    var contentInput = document.getElementById('qr-content');\n    if (!typeSelector || !contentInput) return;\n    var type = typeSelector.value;\n    var placeholder = '';\n    switch (type) {\n      case 'url':\n        placeholder = 'https://example.com';\n        break;\n      case 'email':\n        placeholder = 'mailto:example@example.com';\n        break;\n      case 'tel':\n        placeholder = 'tel:+821012345678';\n        break;\n      case 'sms':\n        placeholder = 'sms:+821012345678?body=Hello';\n        break;\n      case 'wifi':\n        placeholder = 'WIFI:S:NetworkName;T:WPA;P:Password;;';\n        break;\n      case 'geo':\n        placeholder = 'geo:37.5665,126.9780';\n        break;\n      case 'vcard':\n        placeholder = 'BEGIN:VCARD\\nVERSION:3.0\\nN:홍길동\\nTEL:+821012345678\\nEMAIL:example@example.com\\nEND:VCARD';\n        break;\n      default:\n        placeholder = '텍스트를 입력하세요';\n    }\n    contentInput.placeholder = placeholder;\n  },\n  /**\n   * 폼 제출 핸들러\n   * @private\n   */\n  _handleFormSubmit: function _handleFormSubmit() {\n    console.log('QRGenerator._handleFormSubmit 호출됨');\n\n    // URL 또는 텍스트 입력 필드 확인\n    var contentInputs = {\n      'url': document.getElementById('url-input'),\n      'text': document.getElementById('text-input'),\n      'email': document.getElementById('email-address'),\n      'phone': document.getElementById('phone-input'),\n      'vcard': document.getElementById('vcard-name')\n    };\n\n    // 활성화된 입력 폼 찾기\n    var activeForm = document.querySelector('.content-form.active');\n    console.log('활성화된 입력 폼:', activeForm === null || activeForm === void 0 ? void 0 : activeForm.id);\n    if (!activeForm) {\n      console.error('활성화된 입력 폼을 찾을 수 없습니다.');\n      return;\n    }\n\n    // 폼 유형 결정\n    var formType = activeForm.id.split('-')[0]; // 'url-form' -> 'url'\n    console.log('결정된 폼 유형:', formType);\n\n    // 해당 유형의 입력 필드 확인\n    var contentInput = contentInputs[formType];\n    if (!contentInput) {\n      console.error(\"\\uD3FC \\uC720\\uD615 \".concat(formType, \"\\uC5D0 \\uB300\\uD55C \\uC785\\uB825 \\uD544\\uB4DC\\uB97C \\uCC3E\\uC744 \\uC218 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"));\n      return;\n    }\n    var content = contentInput.value.trim();\n    console.log('입력된 콘텐츠:', content);\n    if (!content) {\n      console.warn('QR 코드 내용이 비어 있습니다.');\n      alert('QR 코드 내용을 입력해주세요.');\n      return;\n    }\n\n    // 상태 업데이트\n    this.state.currentOptions.content = content;\n    this.state.currentOptions.type = formType;\n    console.log('QR 코드 옵션 업데이트:', this.state.currentOptions);\n\n    // QR 코드 생성\n    this._generateQRCode();\n  },\n  /**\n     * QR 코드 생성\n     * @private\n     */\n  _generateQRCode: function _generateQRCode() {\n    var _this4 = this;\n    return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n      var qrPreview, downloadBtns, formattedContent, options, canvas;\n      return _regeneratorRuntime().wrap(function _callee4$(_context5) {\n        while (1) switch (_context5.prev = _context5.next) {\n          case 0:\n            console.log('QRGenerator._generateQRCode 호출됨');\n            qrPreview = document.getElementById('qr-preview');\n            downloadBtns = document.getElementById('download-options');\n            if (qrPreview) {\n              _context5.next = 6;\n              break;\n            }\n            console.error('QR 코드 프리뷰 컨테이너를 찾을 수 없습니다.');\n            return _context5.abrupt(\"return\");\n          case 6:\n            _context5.prev = 6;\n            // 로딩 상태 표시\n            console.log('QR 코드 생성 중... 로딩 상태 표시');\n            qrPreview.innerHTML = \"\\n        <div class=\\\"flex justify-center items-center h-64\\\">\\n          <div class=\\\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-600\\\"></div>\\n        </div>\\n      \";\n\n            // 내용 포맷팅\n            console.log('내용 포맷팅 시작');\n            formattedContent = _this4._formatContent();\n            console.log('포맷팅된 내용:', formattedContent);\n\n            // QR 코드 옵션 설정\n            options = {\n              text: formattedContent,\n              width: _this4.state.currentOptions.size,\n              height: _this4.state.currentOptions.size,\n              colorDark: _this4.state.currentOptions.foreground,\n              colorLight: _this4.state.currentOptions.background,\n              margin: _this4.state.currentOptions.margin,\n              correctLevel: _this4._getErrorCorrectionLevel()\n            };\n            console.log('QR 코드 옵션:', options);\n\n            // QR 코드 라이브러리 확인\n            if (_this4.state.qrLibrary) {\n              _context5.next = 17;\n              break;\n            }\n            console.error('QR 코드 라이브러리가 로드되지 않았습니다.');\n            throw new Error('QR 코드 라이브러리가 초기화되지 않았습니다.');\n          case 17:\n            // QR 코드 생성 (캔버스)\n            console.log('QR 코드 캔버스 생성 시작');\n            canvas = document.createElement('canvas'); // 라이브러리 메서드 확인\n            if (!(typeof _this4.state.qrLibrary.toCanvas !== 'function')) {\n              _context5.next = 23;\n              break;\n            }\n            console.error('QR 라이브러리 toCanvas 메서드를 찾을 수 없습니다.');\n            console.log('QR 라이브러리 구조:', _this4.state.qrLibrary);\n            throw new Error('QR 코드 라이브러리가 필요한 메서드를 지원하지 않습니다.');\n          case 23:\n            _context5.next = 25;\n            return _this4.state.qrLibrary.toCanvas(canvas, formattedContent, options);\n          case 25:\n            console.log('QR 코드 캔버스 생성 완료');\n\n            // 로고 추가 (있는 경우)\n            if (_this4.state.currentOptions.logo) {\n              console.log('로고 추가 시작');\n              _this4._addLogoToCanvas(canvas);\n            } else {\n              // 결과 표시\n              console.log('QR 코드 프리뷰 표시');\n              qrPreview.innerHTML = '';\n              qrPreview.appendChild(canvas);\n\n              // 다운로드 버튼 표시\n              if (downloadBtns) {\n                console.log('다운로드 버튼 표시');\n                downloadBtns.style.display = 'block';\n              }\n\n              // 생성된 QR 코드 저장\n              _this4.state.generatedQR = canvas;\n              console.log('생성된 QR 코드가 상태에 저장됨');\n            }\n            _context5.next = 34;\n            break;\n          case 29:\n            _context5.prev = 29;\n            _context5.t0 = _context5[\"catch\"](6);\n            console.error('QR 코드 생성 중 오류 발생:', _context5.t0);\n            console.error('스택 트레이스:', _context5.t0.stack);\n            qrPreview.innerHTML = \"\\n        <div class=\\\"p-4 bg-red-100 rounded-lg text-red-800\\\">\\n          <h3 class=\\\"font-medium\\\">QR \\uCF54\\uB4DC \\uC0DD\\uC131 \\uC2E4\\uD328</h3>\\n          <p>\".concat(_context5.t0.message, \"</p>\\n          <div class=\\\"mt-2 text-xs bg-red-50 p-2 rounded-md overflow-auto\\\">\\n            <pre>\").concat(_context5.t0.stack || '스택 트레이스 없음', \"</pre>\\n          </div>\\n        </div>\\n      \");\n          case 34:\n          case \"end\":\n            return _context5.stop();\n        }\n      }, _callee4, null, [[6, 29]]);\n    }))();\n  },\n  /**\n   * 내용 타입에 따른 포맷팅\n   * @returns {string} 포맷팅된 내용\n   * @private\n   */\n  _formatContent: function _formatContent() {\n    var content = this.state.currentOptions.content;\n    var type = this.state.currentOptions.type;\n    if (!content) return '';\n    switch (type) {\n      case 'url':\n        if (!content.startsWith('http://') && !content.startsWith('https://')) {\n          return \"https://\".concat(content);\n        }\n        return content;\n      case 'email':\n        if (!content.startsWith('mailto:')) {\n          return \"mailto:\".concat(content);\n        }\n        return content;\n      case 'tel':\n        if (!content.startsWith('tel:')) {\n          return \"tel:\".concat(content);\n        }\n        return content;\n      case 'sms':\n        if (!content.startsWith('sms:')) {\n          return \"sms:\".concat(content);\n        }\n        return content;\n      case 'wifi':\n        if (!content.startsWith('WIFI:')) {\n          // 기본 WiFi 형식 확인\n          if (content.includes(';') && content.includes(':')) {\n            return content;\n          }\n          // 간단한 입력을 WiFi 형식으로 변환\n          return \"WIFI:S:\".concat(content, \";T:WPA;P:password;;\");\n        }\n        return content;\n      case 'geo':\n        if (!content.startsWith('geo:')) {\n          return \"geo:\".concat(content);\n        }\n        return content;\n      case 'vcard':\n        if (!content.startsWith('BEGIN:VCARD')) {\n          return \"BEGIN:VCARD\\nVERSION:3.0\\nN:\".concat(content, \"\\nEND:VCARD\");\n        }\n        return content;\n      default:\n        return content;\n    }\n  },\n  /**\n   * 오류 수정 레벨 반환\n   * @returns {number} QRCode.js 오류 수정 레벨\n   * @private\n   */\n  _getErrorCorrectionLevel: function _getErrorCorrectionLevel() {\n    switch (this.state.currentOptions.errorCorrectionLevel) {\n      case 'L':\n        return this.state.qrLibrary.CorrectLevel.L;\n      // 약 7%\n      case 'M':\n        return this.state.qrLibrary.CorrectLevel.M;\n      // 약 15%\n      case 'Q':\n        return this.state.qrLibrary.CorrectLevel.Q;\n      // 약 25%\n      case 'H':\n        return this.state.qrLibrary.CorrectLevel.H;\n      // 약 30%\n      default:\n        return this.state.qrLibrary.CorrectLevel.M;\n    }\n  },\n  /**\n   * 캔버스에 로고 추가\n   * @param {HTMLCanvasElement} canvas - QR 코드 캔버스\n   * @private\n   */\n  _addLogoToCanvas: function _addLogoToCanvas(canvas) {\n    var _this5 = this;\n    var qrPreview = document.getElementById('qr-preview');\n    var downloadBtns = document.getElementById('download-buttons');\n    if (!qrPreview) return;\n    var ctx = canvas.getContext('2d');\n    var size = this.state.currentOptions.size;\n    var logoImg = new Image();\n    logoImg.onload = function () {\n      // 로고 크기 계산 (QR 코드 크기의 약 20%)\n      var logoSize = size * 0.2;\n      var logoX = (size - logoSize) / 2;\n      var logoY = (size - logoSize) / 2;\n\n      // 로고 배경 (흰색 원)\n      ctx.fillStyle = '#FFFFFF';\n      ctx.beginPath();\n      ctx.arc(size / 2, size / 2, logoSize / 1.8, 0, 2 * Math.PI);\n      ctx.fill();\n\n      // 로고 그리기\n      ctx.drawImage(logoImg, logoX, logoY, logoSize, logoSize);\n\n      // 결과 표시\n      qrPreview.innerHTML = '';\n      qrPreview.appendChild(canvas);\n\n      // 다운로드 버튼 표시\n      if (downloadBtns) downloadBtns.classList.remove('hidden');\n\n      // 생성된 QR 코드 저장\n      _this5.state.generatedQR = canvas;\n    };\n    logoImg.onerror = function () {\n      console.error('로고 이미지 로드 실패');\n\n      // 로고 없이 결과 표시\n      qrPreview.innerHTML = '';\n      qrPreview.appendChild(canvas);\n\n      // 다운로드 버튼 표시\n      if (downloadBtns) downloadBtns.classList.remove('hidden');\n\n      // 생성된 QR 코드 저장\n      _this5.state.generatedQR = canvas;\n    };\n    logoImg.src = this.state.currentOptions.logo;\n  },\n  /**\n   * QR 코드 다운로드\n   * @param {string} format - 다운로드 형식 ('png', 'svg')\n   * @private\n   */\n  _downloadQRCode: function _downloadQRCode(format) {\n    if (!this.state.generatedQR) {\n      alert('먼저 QR 코드를 생성해주세요.');\n      return;\n    }\n    var canvas = this.state.generatedQR;\n    var content = this.state.currentOptions.content;\n\n    // 파일명 생성\n    var filename = \"qrcode_\".concat(new Date().getTime());\n    if (format === 'png') {\n      var dataUrl = canvas.toDataURL('image/png');\n      var link = document.createElement('a');\n      link.href = dataUrl;\n      link.download = \"\".concat(filename, \".png\");\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    } else if (format === 'svg') {\n      // 캔버스를 SVG로 변환\n      this._canvasToSVG(canvas, \"\".concat(filename, \".svg\"));\n    }\n  },\n  /**\n   * 캔버스를 SVG로 변환\n   * @param {HTMLCanvasElement} canvas - 변환할 캔버스\n   * @param {string} filename - 다운로드 파일명\n   * @private\n   */\n  _canvasToSVG: function _canvasToSVG(canvas, filename) {\n    var ctx = canvas.getContext('2d');\n    var imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n    var data = imageData.data;\n    var svgContent = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 \".concat(canvas.width, \" \").concat(canvas.height, \"\\\" width=\\\"\").concat(canvas.width, \"\\\" height=\\\"\").concat(canvas.height, \"\\\">\");\n\n    // 배경 추가\n    svgContent += \"<rect width=\\\"\".concat(canvas.width, \"\\\" height=\\\"\").concat(canvas.height, \"\\\" fill=\\\"\").concat(this.state.currentOptions.background, \"\\\"/>\");\n\n    // 픽셀 데이터 처리\n    for (var y = 0; y < canvas.height; y++) {\n      for (var x = 0; x < canvas.width; x++) {\n        var i = (y * canvas.width + x) * 4;\n        var r = data[i];\n        var g = data[i + 1];\n        var b = data[i + 2];\n        var a = data[i + 3];\n\n        // 어두운 픽셀만 QR 코드 데이터로 처리\n        var isDark = r < 128 && g < 128 && b < 128 && a > 0;\n        if (isDark) {\n          svgContent += \"<rect x=\\\"\".concat(x, \"\\\" y=\\\"\").concat(y, \"\\\" width=\\\"1\\\" height=\\\"1\\\" fill=\\\"\").concat(this.state.currentOptions.foreground, \"\\\"/>\");\n        }\n      }\n    }\n    svgContent += '</svg>';\n\n    // SVG 다운로드\n    var blob = new Blob([svgContent], {\n      type: 'image/svg+xml'\n    });\n    var url = URL.createObjectURL(blob);\n    var link = document.createElement('a');\n    link.href = url;\n    link.download = filename;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n  }\n};\n\n// 글로벌 네임스페이스에 등록\nif (typeof window !== 'undefined') {\n  window.FileToQR = window.FileToQR || {};\n  window.FileToQR.QRGenerator = QRGenerator;\n\n  // 브라우저 환경에서 직접 로드된 경우에 대한 처리\n  if (typeof document !== 'undefined' && document.readyState !== 'loading') {\n    console.log('QRGenerator 모듈이 직접 로드되었습니다. 자동 초기화를 시도합니다.');\n    setTimeout(function () {\n      // 이미 DOM이 로드되었다면 초기화 시도\n      if (!QRGenerator.state.initialized) {\n        QRGenerator.init().then(function (success) {\n          console.log('QRGenerator 자동 초기화 결과:', success ? '성공' : '실패');\n        });\n      }\n    }, 100);\n  } else if (typeof document !== 'undefined') {\n    // DOM이 아직 로드되지 않았다면 이벤트 리스너 등록\n    document.addEventListener('DOMContentLoaded', function () {\n      console.log('DOM 로드 완료 후 QRGenerator 자동 초기화 시도');\n      if (!QRGenerator.state.initialized) {\n        QRGenerator.init().then(function (success) {\n          console.log('QRGenerator 자동 초기화 결과:', success ? '성공' : '실패');\n        });\n      }\n    });\n  }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (QRGenerator);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///890\n")}}]);