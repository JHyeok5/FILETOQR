"use strict";(self.webpackChunkfiletoqr=self.webpackChunkfiletoqr||[]).push([[638],{15:()=>{eval("\n;// ./assets/js/core/Timer.js\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\r\n * 타이머 클래스\r\n * 카운트다운 타이머 기능을 제공합니다.\r\n */\nvar Timer = /*#__PURE__*/function () {\n  function Timer() {\n    _classCallCheck(this, Timer);\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.totalSeconds = 0;\n    this.timer = null;\n    this.isPaused = false;\n    this.isActive = false;\n\n    // 콜백 함수\n    this.onUpdate = null;\n    this.onComplete = null;\n  }\n\n  /**\r\n   * 타이머 시작\r\n   * @param {number} hours - 시간\r\n   * @param {number} minutes - 분\r\n   * @param {number} seconds - 초\r\n   */\n  return _createClass(Timer, [{\n    key: \"start\",\n    value: function start(hours, minutes, seconds) {\n      // 시간 설정\n      this.hours = hours || 0;\n      this.minutes = minutes || 0;\n      this.seconds = seconds || 0;\n\n      // 총 초 계산\n      this.totalSeconds = this.hours * 3600 + this.minutes * 60 + this.seconds;\n      if (this.totalSeconds <= 0) {\n        console.error('타이머 시간은 0보다 커야 합니다.');\n        return;\n      }\n      this.isActive = true;\n      this.isPaused = false;\n\n      // 타이머 업데이트 및 시작\n      this._updateTimerDisplay();\n      this._startCountdown();\n    }\n\n    /**\r\n     * 타이머 일시 정지\r\n     */\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      if (!this.isActive || !this.timer) return;\n      clearInterval(this.timer);\n      this.timer = null;\n      this.isPaused = true;\n    }\n\n    /**\r\n     * 일시 정지된 타이머 재개\r\n     */\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      if (!this.isActive || !this.isPaused) return;\n      this.isPaused = false;\n      this._startCountdown();\n    }\n\n    /**\r\n     * 타이머 초기화\r\n     */\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      clearInterval(this.timer);\n      this.timer = null;\n      this.hours = 0;\n      this.minutes = 0;\n      this.seconds = 0;\n      this.totalSeconds = 0;\n      this.isActive = false;\n      this.isPaused = false;\n\n      // 타이머 표시 업데이트\n      if (typeof this.onUpdate === 'function') {\n        this.onUpdate(0, 0, 0);\n      }\n    }\n\n    /**\r\n     * 현재 남은 시간 정보 가져오기\r\n     * @returns {Object} 시간, 분, 초 정보를 담은 객체\r\n     */\n  }, {\n    key: \"getRemainingTime\",\n    value: function getRemainingTime() {\n      return {\n        hours: this.hours,\n        minutes: this.minutes,\n        seconds: this.seconds\n      };\n    }\n\n    /**\r\n     * 카운트다운 시작\r\n     * @private\r\n     */\n  }, {\n    key: \"_startCountdown\",\n    value: function _startCountdown() {\n      var _this = this;\n      if (this.timer !== null) {\n        clearInterval(this.timer);\n      }\n      var startTime = Date.now();\n      var initialTotalSeconds = this.totalSeconds;\n      this.timer = setInterval(function () {\n        // 경과 시간 계산\n        var elapsedSeconds = Math.floor((Date.now() - startTime) / 1000);\n        _this.totalSeconds = initialTotalSeconds - elapsedSeconds;\n        if (_this.totalSeconds <= 0) {\n          // 타이머 완료\n          clearInterval(_this.timer);\n          _this.timer = null;\n          _this.totalSeconds = 0;\n          _this.isActive = false;\n          _this._updateTimerDisplay();\n\n          // 완료 콜백 호출\n          if (typeof _this.onComplete === 'function') {\n            _this.onComplete();\n          }\n          return;\n        }\n        _this._updateTimerDisplay();\n      }, 100); // 더 부드러운 업데이트를 위해 100ms 간격으로 설정\n    }\n\n    /**\r\n     * 타이머 표시 업데이트\r\n     * @private\r\n     */\n  }, {\n    key: \"_updateTimerDisplay\",\n    value: function _updateTimerDisplay() {\n      // 시간, 분, 초 계산\n      this.hours = Math.floor(this.totalSeconds / 3600);\n      this.minutes = Math.floor(this.totalSeconds % 3600 / 60);\n      this.seconds = this.totalSeconds % 60;\n\n      // 업데이트 콜백 호출\n      if (typeof this.onUpdate === 'function') {\n        this.onUpdate(this.hours, this.minutes, this.seconds);\n      }\n    }\n  }]);\n}();\n;// ./assets/js/core/Stopwatch.js\nfunction Stopwatch_typeof(o) { \"@babel/helpers - typeof\"; return Stopwatch_typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, Stopwatch_typeof(o); }\nfunction Stopwatch_classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction Stopwatch_defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, Stopwatch_toPropertyKey(o.key), o); } }\nfunction Stopwatch_createClass(e, r, t) { return r && Stopwatch_defineProperties(e.prototype, r), t && Stopwatch_defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction Stopwatch_toPropertyKey(t) { var i = Stopwatch_toPrimitive(t, \"string\"); return \"symbol\" == Stopwatch_typeof(i) ? i : i + \"\"; }\nfunction Stopwatch_toPrimitive(t, r) { if (\"object\" != Stopwatch_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != Stopwatch_typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\r\n * 스톱워치 클래스\r\n * 시간 측정 기능을 제공합니다.\r\n */\nvar Stopwatch = /*#__PURE__*/function () {\n  function Stopwatch() {\n    Stopwatch_classCallCheck(this, Stopwatch);\n    this.startTime = 0;\n    this.elapsedTime = 0;\n    this.timer = null;\n    this.isPaused = false;\n    this.isActive = false;\n    this.laps = [];\n    this.lastLapTime = 0;\n\n    // 콜백 함수\n    this.onUpdate = null;\n  }\n\n  /**\r\n   * 스톱워치 시작\r\n   */\n  return Stopwatch_createClass(Stopwatch, [{\n    key: \"start\",\n    value: function start() {\n      if (this.isActive && !this.isPaused) return;\n      if (!this.isActive) {\n        // 새로 시작하는 경우\n        this.startTime = Date.now();\n        this.elapsedTime = 0;\n        this.laps = [];\n        this.lastLapTime = 0;\n      } else if (this.isPaused) {\n        // 일시 정지 후 재개하는 경우\n        this.startTime = Date.now() - this.elapsedTime;\n      }\n      this.isActive = true;\n      this.isPaused = false;\n\n      // 스톱워치 업데이트 시작\n      this._startTimer();\n    }\n\n    /**\r\n     * 스톱워치 일시 정지\r\n     */\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      if (!this.isActive || this.isPaused || !this.timer) return;\n      clearInterval(this.timer);\n      this.timer = null;\n      this.isPaused = true;\n\n      // 일시 정지 시점까지의 경과 시간 저장\n      this.elapsedTime = Date.now() - this.startTime;\n    }\n\n    /**\r\n     * 일시 정지된 스톱워치 재개\r\n     */\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      if (!this.isActive || !this.isPaused) return;\n      this.start();\n    }\n\n    /**\r\n     * 스톱워치 초기화\r\n     */\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      clearInterval(this.timer);\n      this.timer = null;\n      this.startTime = 0;\n      this.elapsedTime = 0;\n      this.isActive = false;\n      this.isPaused = false;\n      this.laps = [];\n      this.lastLapTime = 0;\n\n      // 스톱워치 표시 업데이트\n      if (typeof this.onUpdate === 'function') {\n        this.onUpdate(0, 0, 0, 0);\n      }\n    }\n\n    /**\r\n     * 랩 타임 기록\r\n     * @returns {Object} 랩 타임 정보\r\n     */\n  }, {\n    key: \"getLapTime\",\n    value: function getLapTime() {\n      if (!this.isActive) return null;\n      var currentTime = this.isPaused ? this.elapsedTime : Date.now() - this.startTime;\n      var lapTime = currentTime - this.lastLapTime;\n      this.lastLapTime = currentTime;\n\n      // 랩 시간을 시, 분, 초, 밀리초로 변환\n      var _this$_convertTime = this._convertTime(lapTime),\n        hours = _this$_convertTime.hours,\n        minutes = _this$_convertTime.minutes,\n        seconds = _this$_convertTime.seconds,\n        milliseconds = _this$_convertTime.milliseconds;\n\n      // 랩 정보 저장 및 반환\n      var lap = {\n        time: lapTime,\n        hours: hours,\n        minutes: minutes,\n        seconds: seconds,\n        milliseconds: milliseconds\n      };\n      this.laps.push(lap);\n      return lap;\n    }\n\n    /**\r\n     * 스톱워치 업데이트 시작\r\n     * @private\r\n     */\n  }, {\n    key: \"_startTimer\",\n    value: function _startTimer() {\n      var _this = this;\n      if (this.timer !== null) {\n        clearInterval(this.timer);\n      }\n      this.timer = setInterval(function () {\n        // 경과 시간 계산\n        var elapsedTime = Date.now() - _this.startTime;\n\n        // 시간 변환 및 표시 업데이트\n        var _this$_convertTime2 = _this._convertTime(elapsedTime),\n          hours = _this$_convertTime2.hours,\n          minutes = _this$_convertTime2.minutes,\n          seconds = _this$_convertTime2.seconds,\n          milliseconds = _this$_convertTime2.milliseconds;\n\n        // 업데이트 콜백 호출\n        if (typeof _this.onUpdate === 'function') {\n          _this.onUpdate(hours, minutes, seconds, milliseconds);\n        }\n      }, 10); // 더 정확한 밀리초 표시를 위해 10ms 간격으로 설정\n    }\n\n    /**\r\n     * 밀리초 단위 시간을 시, 분, 초, 밀리초로 변환\r\n     * @param {number} timeMs - 밀리초 단위 시간\r\n     * @returns {Object} 변환된 시간 정보\r\n     * @private\r\n     */\n  }, {\n    key: \"_convertTime\",\n    value: function _convertTime(timeMs) {\n      // 시간 단위 변환\n      var totalSeconds = Math.floor(timeMs / 1000);\n      var hours = Math.floor(totalSeconds / 3600);\n      var minutes = Math.floor(totalSeconds % 3600 / 60);\n      var seconds = totalSeconds % 60;\n      var milliseconds = Math.floor(timeMs % 1000 / 10); // 2자리 밀리초\n\n      return {\n        hours: hours,\n        minutes: minutes,\n        seconds: seconds,\n        milliseconds: milliseconds\n      };\n    }\n  }]);\n}();\n;// ./assets/js/core/Pomodoro.js\nfunction Pomodoro_typeof(o) { \"@babel/helpers - typeof\"; return Pomodoro_typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, Pomodoro_typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = Pomodoro_toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction Pomodoro_classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction Pomodoro_defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, Pomodoro_toPropertyKey(o.key), o); } }\nfunction Pomodoro_createClass(e, r, t) { return r && Pomodoro_defineProperties(e.prototype, r), t && Pomodoro_defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction Pomodoro_toPropertyKey(t) { var i = Pomodoro_toPrimitive(t, \"string\"); return \"symbol\" == Pomodoro_typeof(i) ? i : i + \"\"; }\nfunction Pomodoro_toPrimitive(t, r) { if (\"object\" != Pomodoro_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != Pomodoro_typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\r\n * 포모도로 클래스\r\n * 포모도로 기법 타이머 기능을 제공합니다.\r\n */\nvar Pomodoro = /*#__PURE__*/function () {\n  function Pomodoro() {\n    Pomodoro_classCallCheck(this, Pomodoro);\n    // 기본 포모도로 설정\n    this.settings = {\n      workMinutes: 25,\n      shortBreakMinutes: 5,\n      longBreakMinutes: 15,\n      totalCycles: 4\n    };\n    this.totalSeconds = this.settings.workMinutes * 60;\n    this.timer = null;\n    this.isPaused = false;\n    this.isActive = false;\n    this.currentMode = 'work'; // 'work', 'shortBreak', 'longBreak'\n    this.currentCycle = 0;\n\n    // 콜백 함수\n    this.onUpdate = null;\n    this.onModeChange = null;\n    this.onComplete = null;\n    this.onWorkSessionComplete = null;\n  }\n\n  /**\r\n   * 포모도로 설정 업데이트\r\n   * @param {Object} newSettings - 새 설정\r\n   */\n  return Pomodoro_createClass(Pomodoro, [{\n    key: \"setSettings\",\n    value: function setSettings(newSettings) {\n      // 기존 설정에 새 설정 병합\n      this.settings = _objectSpread(_objectSpread({}, this.settings), newSettings);\n\n      // 활성 상태가 아닐 때 최초 타이머 시간 설정\n      if (!this.isActive) {\n        this.totalSeconds = this.settings.workMinutes * 60;\n      }\n    }\n\n    /**\r\n     * 포모도로 타이머 시작\r\n     */\n  }, {\n    key: \"start\",\n    value: function start() {\n      if (this.isActive && !this.isPaused) return;\n      if (!this.isActive) {\n        // 새로 시작하는 경우 작업 단계로 시작\n        this.currentMode = 'work';\n        this.totalSeconds = this.settings.workMinutes * 60;\n        this.currentCycle = 0;\n      }\n      this.isActive = true;\n      this.isPaused = false;\n\n      // 타이머 시작\n      this._startCountdown();\n    }\n\n    /**\r\n     * 포모도로 타이머 일시 정지\r\n     */\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      if (!this.isActive || this.isPaused || !this.timer) return;\n      clearInterval(this.timer);\n      this.timer = null;\n      this.isPaused = true;\n    }\n\n    /**\r\n     * 일시 정지된 포모도로 타이머 재개\r\n     */\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      if (!this.isActive || !this.isPaused) return;\n      this.isPaused = false;\n      this._startCountdown();\n    }\n\n    /**\r\n     * 포모도로 타이머 초기화\r\n     */\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      clearInterval(this.timer);\n      this.timer = null;\n      this.isActive = false;\n      this.isPaused = false;\n      this.currentMode = 'work';\n      this.currentCycle = 0;\n      this.totalSeconds = this.settings.workMinutes * 60;\n\n      // 포모도로 표시 업데이트\n      this._updateTimerDisplay();\n    }\n\n    /**\r\n     * 카운트다운 시작\r\n     * @private\r\n     */\n  }, {\n    key: \"_startCountdown\",\n    value: function _startCountdown() {\n      var _this = this;\n      if (this.timer !== null) {\n        clearInterval(this.timer);\n      }\n      var startTime = Date.now();\n      var initialTotalSeconds = this.totalSeconds;\n      this.timer = setInterval(function () {\n        // 경과 시간 계산\n        var elapsedSeconds = Math.floor((Date.now() - startTime) / 1000);\n        _this.totalSeconds = initialTotalSeconds - elapsedSeconds;\n        if (_this.totalSeconds <= 0) {\n          // 현재 단계 완료\n          clearInterval(_this.timer);\n          _this.timer = null;\n          _this._handleModeComplete();\n          return;\n        }\n        _this._updateTimerDisplay();\n      }, 100); // 더 부드러운 업데이트를 위해 100ms 간격으로 설정\n    }\n\n    /**\r\n     * 모드 완료 처리\r\n     * @private\r\n     */\n  }, {\n    key: \"_handleModeComplete\",\n    value: function _handleModeComplete() {\n      var nextMode;\n      if (this.currentMode === 'work') {\n        // 작업 세션 완료 콜백 호출\n        if (typeof this.onWorkSessionComplete === 'function') {\n          this.onWorkSessionComplete();\n        }\n\n        // 한 사이클은 (작업 + 휴식)을 의미\n        // 작업을 완료하면 휴식으로 전환하기 전에 사이클 카운트를 증가시키지 않음\n\n        // 다음 세션이 짧은 휴식인지 긴 휴식인지 결정\n        if ((this.currentCycle + 1) % this.settings.totalCycles === 0 && this.currentCycle > 0) {\n          // 긴 휴식 시간\n          nextMode = 'longBreak';\n          this.totalSeconds = this.settings.longBreakMinutes * 60;\n        } else {\n          // 짧은 휴식 시간\n          nextMode = 'shortBreak';\n          this.totalSeconds = this.settings.shortBreakMinutes * 60;\n        }\n      } else {\n        // 휴식 단계 완료 시\n        // 휴식 완료 후 사이클 카운트 증가 (한 사이클 완료)\n        this.currentCycle++;\n\n        // 모든 사이클 완료 확인\n        if (this.currentCycle >= this.settings.totalCycles) {\n          // 모든 사이클 완료\n          this.isActive = false;\n          this.currentMode = 'work';\n          this.totalSeconds = this.settings.workMinutes * 60;\n\n          // 완료 콜백 호출\n          if (typeof this.onComplete === 'function') {\n            this.onComplete(this.currentCycle);\n          }\n\n          // 표시 업데이트 및 종료\n          this._updateTimerDisplay();\n          return;\n        }\n\n        // 다음 작업 단계로\n        nextMode = 'work';\n        this.totalSeconds = this.settings.workMinutes * 60;\n      }\n\n      // 모드 전환 콜백 호출\n      if (typeof this.onModeChange === 'function') {\n        this.onModeChange(nextMode);\n      }\n\n      // 다음 모드로 전환\n      this.currentMode = nextMode;\n\n      // 타이머 표시 업데이트\n      this._updateTimerDisplay();\n\n      // 다음 단계 자동 시작\n      this._startCountdown();\n    }\n\n    /**\r\n     * 타이머 표시 업데이트\r\n     * @private\r\n     */\n  }, {\n    key: \"_updateTimerDisplay\",\n    value: function _updateTimerDisplay() {\n      // 분, 초 계산\n      var minutes = Math.floor(this.totalSeconds / 60);\n      var seconds = this.totalSeconds % 60;\n\n      // 업데이트 콜백 호출\n      if (typeof this.onUpdate === 'function') {\n        this.onUpdate(minutes, seconds, this.currentCycle, this.settings.totalCycles, this.currentMode);\n      }\n    }\n  }]);\n}();\n;// ./assets/js/core/PlantSystem.js\nfunction PlantSystem_typeof(o) { \"@babel/helpers - typeof\"; return PlantSystem_typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, PlantSystem_typeof(o); }\nfunction PlantSystem_classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction PlantSystem_defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, PlantSystem_toPropertyKey(o.key), o); } }\nfunction PlantSystem_createClass(e, r, t) { return r && PlantSystem_defineProperties(e.prototype, r), t && PlantSystem_defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction PlantSystem_toPropertyKey(t) { var i = PlantSystem_toPrimitive(t, \"string\"); return \"symbol\" == PlantSystem_typeof(i) ? i : i + \"\"; }\nfunction PlantSystem_toPrimitive(t, r) { if (\"object\" != PlantSystem_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != PlantSystem_typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\r\n * 가상 식물 시스템 클래스\r\n * 식물 성장 및 관리 기능을 제공합니다.\r\n */\nvar PlantSystem = /*#__PURE__*/function () {\n  function PlantSystem() {\n    PlantSystem_classCallCheck(this, PlantSystem);\n    // 현재 식물 상태\n    this.currentPlant = {\n      id: 'sprout',\n      name: '새싹',\n      level: 0,\n      experience: 0,\n      maxExperience: 100,\n      stage: 0,\n      maxStage: 5\n    };\n\n    // 테마별 식물 정보\n    this.plantThemes = {\n      indoor: [{\n        id: 'pothos',\n        name: '스킨답서스',\n        stages: 5,\n        requiredLevel: 0\n      }, {\n        id: 'cactus',\n        name: '선인장',\n        stages: 5,\n        requiredLevel: 3\n      }, {\n        id: 'ficus',\n        name: '고무나무',\n        stages: 5,\n        requiredLevel: 5\n      }, {\n        id: 'moneyPlant',\n        name: '행운목',\n        stages: 5,\n        requiredLevel: 8\n      }, {\n        id: 'orchid',\n        name: '서양란',\n        stages: 5,\n        requiredLevel: 12\n      }],\n      garden: [{\n        id: 'tulip',\n        name: '튤립',\n        stages: 5,\n        requiredLevel: 0\n      }, {\n        id: 'rose',\n        name: '장미',\n        stages: 5,\n        requiredLevel: 3\n      }, {\n        id: 'sunflower',\n        name: '해바라기',\n        stages: 5,\n        requiredLevel: 5\n      }, {\n        id: 'lavender',\n        name: '라벤더',\n        stages: 5,\n        requiredLevel: 8\n      }, {\n        id: 'daisy',\n        name: '데이지',\n        stages: 5,\n        requiredLevel: 12\n      }],\n      tropical: [{\n        id: 'monstera',\n        name: '몬스테라',\n        stages: 5,\n        requiredLevel: 0\n      }, {\n        id: 'palmTree',\n        name: '야자수',\n        stages: 5,\n        requiredLevel: 3\n      }, {\n        id: 'birdOfParadise',\n        name: '극락조',\n        stages: 5,\n        requiredLevel: 5\n      }, {\n        id: 'anthurium',\n        name: '안스리움',\n        stages: 5,\n        requiredLevel: 8\n      }, {\n        id: 'hybiscus',\n        name: '히비스커스',\n        stages: 5,\n        requiredLevel: 12\n      }],\n      succulent: [{\n        id: 'echeveria',\n        name: '에케베리아',\n        stages: 5,\n        requiredLevel: 0\n      }, {\n        id: 'aloe',\n        name: '알로에',\n        stages: 5,\n        requiredLevel: 3\n      }, {\n        id: 'haworthia',\n        name: '하월시아',\n        stages: 5,\n        requiredLevel: 5\n      }, {\n        id: 'jadePlant',\n        name: '금전수',\n        stages: 5,\n        requiredLevel: 8\n      }, {\n        id: 'burrosTail',\n        name: '달꼬리',\n        stages: 5,\n        requiredLevel: 12\n      }]\n    };\n\n    // 사용자 컬렉션\n    this.collection = {};\n\n    // 현재 테마\n    this.currentTheme = 'indoor';\n  }\n\n  /**\r\n   * 식물 시스템 초기화\r\n   */\n  return PlantSystem_createClass(PlantSystem, [{\n    key: \"initialize\",\n    value: function initialize() {\n      // 로컬 스토리지에서 저장된 데이터 로드\n      this._loadData();\n\n      // UI 업데이트\n      this._updatePlantDisplay();\n      this._updatePlantInfo();\n      this._updateCollection();\n    }\n\n    /**\r\n     * 식물 테마 설정\r\n     * @param {string} theme - 테마 (indoor, garden, tropical, succulent)\r\n     */\n  }, {\n    key: \"setTheme\",\n    value: function setTheme(theme) {\n      if (!this.plantThemes[theme]) return;\n      this.currentTheme = theme;\n\n      // 테마 변경 시 UI 업데이트\n      this._updateCollection();\n      this._saveData();\n    }\n\n    /**\r\n     * 경험치 추가\r\n     * @param {number} exp - 추가할 경험치\r\n     */\n  }, {\n    key: \"addExperience\",\n    value: function addExperience(exp) {\n      if (exp <= 0) return;\n      this.currentPlant.experience += exp;\n\n      // 레벨업 체크\n      while (this.currentPlant.experience >= this.currentPlant.maxExperience) {\n        this.currentPlant.experience -= this.currentPlant.maxExperience;\n        this.currentPlant.level++;\n\n        // 새 식물 잠금 해제 확인\n        this._checkUnlocks();\n\n        // 최대 경험치 증가 (레벨에 따라)\n        this.currentPlant.maxExperience = 100 + this.currentPlant.level * 20;\n      }\n\n      // 성장 단계 계산\n      this._calculateStage();\n\n      // UI 업데이트\n      this._updatePlantDisplay();\n      this._updatePlantInfo();\n      this._updateCollection();\n\n      // 데이터 저장\n      this._saveData();\n    }\n\n    /**\r\n     * 식물 변경\r\n     * @param {string} plantId - 식물 ID\r\n     */\n  }, {\n    key: \"changePlant\",\n    value: function changePlant(plantId) {\n      // 컬렉션에 있는 식물인지 확인\n      if (!this.collection[plantId]) return;\n      var themeKey = this._findPlantTheme(plantId);\n      if (!themeKey) return;\n      var plantInfo = this.plantThemes[themeKey].find(function (p) {\n        return p.id === plantId;\n      });\n      if (!plantInfo) return;\n\n      // 현재 식물 업데이트\n      this.currentPlant.id = plantId;\n      this.currentPlant.name = plantInfo.name;\n      this.currentPlant.maxStage = plantInfo.stages;\n\n      // 성장 단계 재계산\n      this._calculateStage();\n\n      // UI 업데이트\n      this._updatePlantDisplay();\n      this._updatePlantInfo();\n\n      // 데이터 저장\n      this._saveData();\n    }\n\n    /**\r\n     * 성장 단계 계산\r\n     * @private\r\n     */\n  }, {\n    key: \"_calculateStage\",\n    value: function _calculateStage() {\n      // 레벨에 따른 성장 단계 계산 (0부터 maxStage까지)\n      var levelPerStage = 3; // 3레벨마다 성장\n      var calculatedStage = Math.min(Math.floor(this.currentPlant.level / levelPerStage), this.currentPlant.maxStage);\n      this.currentPlant.stage = calculatedStage;\n    }\n\n    /**\r\n     * 새 식물 잠금 해제 확인\r\n     * @private\r\n     */\n  }, {\n    key: \"_checkUnlocks\",\n    value: function _checkUnlocks() {\n      var _this = this;\n      Object.keys(this.plantThemes).forEach(function (theme) {\n        _this.plantThemes[theme].forEach(function (plant) {\n          if (_this.currentPlant.level >= plant.requiredLevel) {\n            // 컬렉션에 추가\n            _this.collection[plant.id] = {\n              id: plant.id,\n              name: plant.name,\n              theme: theme,\n              unlocked: true\n            };\n          }\n        });\n      });\n    }\n\n    /**\r\n     * 식물이 속한 테마 찾기\r\n     * @param {string} plantId - 식물 ID\r\n     * @returns {string|null} - 테마 키\r\n     * @private\r\n     */\n  }, {\n    key: \"_findPlantTheme\",\n    value: function _findPlantTheme(plantId) {\n      for (var theme in this.plantThemes) {\n        var found = this.plantThemes[theme].find(function (p) {\n          return p.id === plantId;\n        });\n        if (found) return theme;\n      }\n      return null;\n    }\n\n    /**\r\n     * 식물 표시 업데이트\r\n     * @private\r\n     */\n  }, {\n    key: \"_updatePlantDisplay\",\n    value: function _updatePlantDisplay() {\n      var plantImage = document.getElementById('plant-image');\n\n      // 모든 성장 단계 클래스 제거\n      for (var i = 0; i <= this.currentPlant.maxStage; i++) {\n        plantImage.querySelector('.plant-growth').classList.remove(\"plant-stage-\".concat(i));\n      }\n\n      // 현재 성장 단계 클래스 추가\n      plantImage.querySelector('.plant-growth').classList.add(\"plant-stage-\".concat(this.currentPlant.stage));\n    }\n\n    /**\r\n     * 식물 정보 업데이트\r\n     * @private\r\n     */\n  }, {\n    key: \"_updatePlantInfo\",\n    value: function _updatePlantInfo() {\n      var plantName = document.getElementById('plant-name');\n      var plantLevel = document.getElementById('plant-level');\n      var plantExp = document.getElementById('plant-exp');\n      var plantExpProgress = document.getElementById('plant-exp-progress');\n      plantName.textContent = this.currentPlant.name;\n      plantLevel.textContent = \"\\uB808\\uBCA8: \".concat(this.currentPlant.level);\n      plantExp.textContent = \"\\uACBD\\uD5D8\\uCE58: \".concat(this.currentPlant.experience, \" / \").concat(this.currentPlant.maxExperience);\n\n      // 경험치 바 업데이트\n      var expPercentage = this.currentPlant.experience / this.currentPlant.maxExperience * 100;\n      plantExpProgress.style.width = \"\".concat(expPercentage, \"%\");\n    }\n\n    /**\r\n     * 컬렉션 업데이트\r\n     * @private\r\n     */\n  }, {\n    key: \"_updateCollection\",\n    value: function _updateCollection() {\n      var _this2 = this;\n      var collectionGrid = document.getElementById('plant-collection-grid');\n      collectionGrid.innerHTML = '';\n\n      // 현재 테마의 식물만 표시\n      this.plantThemes[this.currentTheme].forEach(function (plant) {\n        var _this2$collection$pla;\n        var isUnlocked = ((_this2$collection$pla = _this2.collection[plant.id]) === null || _this2$collection$pla === void 0 ? void 0 : _this2$collection$pla.unlocked) || false;\n        var plantItem = document.createElement('div');\n        plantItem.className = \"plant-item \".concat(isUnlocked ? '' : 'locked');\n\n        // 잠금 해제된 식물만 클릭 가능\n        if (isUnlocked) {\n          plantItem.addEventListener('click', function () {\n            return _this2.changePlant(plant.id);\n          });\n        }\n\n        // 현재 선택된 식물 표시\n        if (_this2.currentPlant.id === plant.id) {\n          plantItem.classList.add('selected');\n        }\n        plantItem.innerHTML = \"\\n                <div class=\\\"plant-item-image\\\">\\n                    \".concat(isUnlocked ? \"<div class=\\\"plant-icon \".concat(plant.id, \"\\\"></div>\") : '<div class=\"plant-icon locked\"><i class=\"fas fa-lock\"></i></div>', \"\\n                </div>\\n                <p>\").concat(isUnlocked ? plant.name : '???', \"</p>\\n                \").concat(!isUnlocked ? \"<small>\\uB808\\uBCA8 \".concat(plant.requiredLevel, \" \\uD544\\uC694</small>\") : '', \"\\n            \");\n        collectionGrid.appendChild(plantItem);\n      });\n    }\n\n    /**\r\n     * 데이터 저장\r\n     * @private\r\n     */\n  }, {\n    key: \"_saveData\",\n    value: function _saveData() {\n      var data = {\n        currentPlant: this.currentPlant,\n        collection: this.collection,\n        currentTheme: this.currentTheme\n      };\n      localStorage.setItem('plantSystem', JSON.stringify(data));\n    }\n\n    /**\r\n     * 데이터 로드\r\n     * @private\r\n     */\n  }, {\n    key: \"_loadData\",\n    value: function _loadData() {\n      var savedData = localStorage.getItem('plantSystem');\n      if (savedData) {\n        var data = JSON.parse(savedData);\n        this.currentPlant = data.currentPlant;\n        this.collection = data.collection;\n        this.currentTheme = data.currentTheme || 'indoor';\n      } else {\n        // 초기 식물 잠금 해제\n        var initialPlant = this.plantThemes[this.currentTheme][0];\n        this.collection[initialPlant.id] = {\n          id: initialPlant.id,\n          name: initialPlant.name,\n          theme: this.currentTheme,\n          unlocked: true\n        };\n        this.currentPlant.id = initialPlant.id;\n        this.currentPlant.name = initialPlant.name;\n      }\n    }\n  }]);\n}();\n;// ./assets/js/utils/NotificationManager.js\nfunction NotificationManager_typeof(o) { \"@babel/helpers - typeof\"; return NotificationManager_typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, NotificationManager_typeof(o); }\nfunction NotificationManager_classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction NotificationManager_defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, NotificationManager_toPropertyKey(o.key), o); } }\nfunction NotificationManager_createClass(e, r, t) { return r && NotificationManager_defineProperties(e.prototype, r), t && NotificationManager_defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction NotificationManager_toPropertyKey(t) { var i = NotificationManager_toPrimitive(t, \"string\"); return \"symbol\" == NotificationManager_typeof(i) ? i : i + \"\"; }\nfunction NotificationManager_toPrimitive(t, r) { if (\"object\" != NotificationManager_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != NotificationManager_typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * 알림 관리 클래스\n * 타이머 알림 및 소리 재생 기능을 제공합니다.\n */\nvar NotificationManager = /*#__PURE__*/function () {\n  function NotificationManager() {\n    NotificationManager_classCallCheck(this, NotificationManager);\n    this.sound = 'bell'; // 기본 소리\n    this.volume = 0.8; // 기본 볼륨 (0.0 ~ 1.0)\n    this.backgroundNotification = true; // 백그라운드 알림 활성화 여부\n\n    // 웹 알림 권한 요청\n    this._requestNotificationPermission();\n  }\n\n  /**\n   * 알림 소리 설정\n   * @param {string} soundName - 소리 이름 ('bell', 'digital', 'nature', 'none')\n   */\n  return NotificationManager_createClass(NotificationManager, [{\n    key: \"setSound\",\n    value: function setSound(soundName) {\n      if (['bell', 'digital', 'nature', 'none'].includes(soundName)) {\n        this.sound = soundName;\n      }\n    }\n\n    /**\n     * 알림 볼륨 설정\n     * @param {number} volume - 볼륨 (0.0 ~ 1.0)\n     */\n  }, {\n    key: \"setVolume\",\n    value: function setVolume(volume) {\n      if (volume >= 0 && volume <= 1) {\n        this.volume = volume;\n      }\n    }\n\n    /**\n     * 백그라운드 알림 설정\n     * @param {boolean} enable - 활성화 여부\n     */\n  }, {\n    key: \"setBackgroundNotification\",\n    value: function setBackgroundNotification(enable) {\n      this.backgroundNotification = enable;\n    }\n\n    /**\n     * 알림 재생\n     * @param {string} title - 알림 제목\n     * @param {string} message - 알림 메시지\n     */\n  }, {\n    key: \"playNotification\",\n    value: function playNotification(title, message) {\n      // 소리 재생\n      this._playSound();\n\n      // 웹 알림 표시 (백그라운드 알림이 활성화되어 있고 권한이 있는 경우)\n      if (this.backgroundNotification) {\n        this._showNotification(title, message);\n      }\n    }\n\n    /**\n     * 소리 재생\n     * @private\n     */\n  }, {\n    key: \"_playSound\",\n    value: function _playSound() {\n      if (this.sound === 'none') return;\n      var audioElement = document.getElementById(\"\".concat(this.sound, \"-sound\"));\n      if (audioElement) {\n        audioElement.volume = this.volume;\n\n        // 재생 중인 경우 다시 시작\n        audioElement.pause();\n        audioElement.currentTime = 0;\n\n        // 소리 재생 (자동 재생 정책으로 인한 오류 처리)\n        var playPromise = audioElement.play();\n        if (playPromise !== undefined) {\n          playPromise[\"catch\"](function (error) {\n            console.warn('자동 재생이 차단되었습니다:', error);\n          });\n        }\n      }\n    }\n\n    /**\n     * 웹 알림 표시\n     * @param {string} title - 알림 제목\n     * @param {string} message - 알림 메시지\n     * @private\n     */\n  }, {\n    key: \"_showNotification\",\n    value: function _showNotification(title, message) {\n      var i18n = window.FileToQR && window.FileToQR.i18n;\n      if (!('Notification' in window)) {\n        var notSupportedMsg = i18n && typeof i18n.translate === 'function' ? i18n.translate('errors.notificationNotSupported', {}, '이 브라우저는 알림을 지원하지 않습니다.') : '이 브라우저는 알림을 지원하지 않습니다.';\n        console.warn(notSupportedMsg);\n        return;\n      }\n      if (Notification.permission === 'granted') {\n        var notification = new Notification(title, {\n          body: message,\n          icon: '/assets/images/timer-icon.png'\n        });\n        notification.onclick = function () {\n          window.focus();\n          notification.close();\n        };\n        setTimeout(function () {\n          return notification.close();\n        }, 5000);\n      } else if (Notification.permission !== 'denied') {\n        this._requestNotificationPermission();\n      }\n    }\n\n    /**\n     * 웹 알림 권한 요청\n     * @private\n     */\n  }, {\n    key: \"_requestNotificationPermission\",\n    value: function _requestNotificationPermission() {\n      var i18n = window.FileToQR && window.FileToQR.i18n;\n      if (!('Notification' in window)) return;\n      if (Notification.permission !== 'granted' && Notification.permission !== 'denied') {\n        Notification.requestPermission().then(function (permission) {\n          if (permission === 'granted') {\n            var grantedMsg = i18n && typeof i18n.translate === 'function' ? i18n.translate('notification.permissionGranted', {}, '알림 권한이 허용되었습니다.') : '알림 권한이 허용되었습니다.';\n            console.log(grantedMsg);\n          }\n        })[\"catch\"](function (error) {\n          var errorMsg = i18n && typeof i18n.translate === 'function' ? i18n.translate('errors.notificationPermissionError', {}, '알림 권한 요청 중 오류 발생:') : '알림 권한 요청 중 오류 발생:';\n          console.error(errorMsg, error);\n        });\n      }\n    }\n  }]);\n}();\n;// ./assets/js/pages/timer.js\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n// 타이머 관련 모듈 불러오기\n\n\n\n\n\n\n// 전역 변수\nvar timers = new Map();\nvar timerIdCounter = 1;\nvar notificationManager;\n\n// DOM 요소\ndocument.addEventListener('DOMContentLoaded', function () {\n  console.log('타이머 페이지 초기화');\n  try {\n    // 모듈 인스턴스 생성\n    notificationManager = new NotificationManager();\n    var stopwatch = new Stopwatch();\n    var pomodoro = new Pomodoro();\n    var plantSystem = new PlantSystem();\n\n    // 탭 전환 설정\n    setupTabs();\n\n    // 각 기능 초기화\n    setupMultipleTimers();\n    initializeStopwatch(stopwatch);\n    initializePomodoro(pomodoro, notificationManager, plantSystem);\n    initializeSettings(notificationManager, plantSystem);\n\n    // 식물 시스템 초기화\n    plantSystem.initialize();\n\n    // 타이머 추가 버튼 이벤트를 여러 방식으로 설정\n    // 1. 버튼에 직접 이벤트 리스너\n    var addTimerBtn = document.getElementById('add-timer');\n    if (addTimerBtn) {\n      addTimerBtn.addEventListener('click', function (e) {\n        console.log('타이머 추가 버튼 클릭 이벤트 발생');\n        e.preventDefault();\n        addNewTimer();\n      });\n    }\n\n    // 2. 커스텀 이벤트 리스너\n    document.addEventListener('add-new-timer', function () {\n      console.log('커스텀 이벤트로 타이머 추가');\n      addNewTimer();\n    });\n\n    // 3. 글로벌 함수 설정\n    window.addNewTimerGlobal = function () {\n      console.log('글로벌 함수로 타이머 추가');\n      addNewTimer();\n    };\n    console.log('타이머 페이지 초기화 완료');\n  } catch (error) {\n    console.error('타이머 페이지 초기화 오류:', error);\n  }\n});\n\n// 탭 전환 설정 함수\nfunction setupTabs() {\n  var tabButtons = document.querySelectorAll('.tab-btn');\n  var tabContents = document.querySelectorAll('.tab-content');\n  tabButtons.forEach(function (button) {\n    button.addEventListener('click', function () {\n      var tabName = button.dataset.tab;\n      console.log(\"\\uD0ED \\uC804\\uD658: \".concat(tabName));\n\n      // 버튼 활성화 상태 변경\n      tabButtons.forEach(function (btn) {\n        return btn.classList.remove('active');\n      });\n      button.classList.add('active');\n\n      // 탭 콘텐츠 전환\n      tabContents.forEach(function (content) {\n        return content.classList.remove('active');\n      });\n      document.getElementById(\"\".concat(tabName, \"-tab\")).classList.add('active');\n\n      // 포모도로 탭일 때만 식물 컨테이너 표시\n      var plantContainer = document.querySelector('.plant-container');\n      if (plantContainer) {\n        plantContainer.style.display = tabName === 'pomodoro' ? 'block' : 'none';\n      }\n    });\n  });\n}\n\n// 다중 타이머 설정 함수\nfunction setupMultipleTimers() {\n  console.log('다중 타이머 설정');\n\n  // 초기 타이머 설정\n  var initialTimerItem = document.querySelector('.timer-item');\n  if (initialTimerItem) {\n    console.log('초기 타이머 설정');\n    var timerId = initialTimerItem.dataset.timerId;\n    var timerInstance = new Timer();\n    timers.set(timerId, timerInstance);\n    setupTimerControls(initialTimerItem, timerInstance);\n  }\n\n  // 저장된 타이머 불러오기\n  loadSavedTimers();\n\n  // 타이머 상태 주기적 저장\n  setInterval(saveActiveTimers, 10000);\n}\n\n// 새 타이머 추가 함수\nfunction addNewTimer() {\n  console.log('새 타이머 추가 함수 호출됨');\n  try {\n    var timersListElem = document.getElementById('timers-list');\n    if (!timersListElem) {\n      console.error('타이머 목록 요소를 찾을 수 없음');\n      return;\n    }\n    var timerId = String(timerIdCounter++);\n    console.log(\"\\uC0C8 \\uD0C0\\uC774\\uBA38 ID: \".concat(timerId, \" \\uC0DD\\uC131 \\uC911\"));\n\n    // 타이머 인스턴스 생성\n    var timerInstance = new Timer();\n    timers.set(timerId, timerInstance);\n\n    // 타이머 요소 생성\n    var newTimerElem = document.createElement('div');\n    newTimerElem.className = 'timer-item';\n    newTimerElem.dataset.timerId = timerId;\n    newTimerElem.innerHTML = \"\\n            <div class=\\\"timer-header\\\">\\n                <input type=\\\"text\\\" class=\\\"timer-label\\\" placeholder=\\\"\\uD0C0\\uC774\\uBA38 \\uC774\\uB984\\\">\\n                <button class=\\\"close-timer\\\"><i class=\\\"fas fa-times\\\"></i></button>\\n            </div>\\n            <div class=\\\"timer-display\\\">\\n                <span class=\\\"timer-hours\\\">00</span>:<span class=\\\"timer-minutes\\\">00</span>:<span class=\\\"timer-seconds\\\">00</span>\\n            </div>\\n            <div class=\\\"timer-controls\\\">\\n                <button class=\\\"timer-start control-btn\\\"><i class=\\\"fas fa-play\\\"></i></button>\\n                <button class=\\\"timer-pause control-btn\\\" disabled><i class=\\\"fas fa-pause\\\"></i></button>\\n                <button class=\\\"timer-reset control-btn\\\"><i class=\\\"fas fa-redo\\\"></i></button>\\n            </div>\\n            <div class=\\\"timer-settings\\\">\\n                <div class=\\\"time-input\\\">\\n                    <label>\\uC2DC\\uAC04:</label>\\n                    <input type=\\\"number\\\" class=\\\"hours-input\\\" min=\\\"0\\\" max=\\\"23\\\" value=\\\"0\\\">\\n                </div>\\n                <div class=\\\"time-input\\\">\\n                    <label>\\uBD84:</label>\\n                    <input type=\\\"number\\\" class=\\\"minutes-input\\\" min=\\\"0\\\" max=\\\"59\\\" value=\\\"0\\\">\\n                </div>\\n                <div class=\\\"time-input\\\">\\n                    <label>\\uCD08:</label>\\n                    <input type=\\\"number\\\" class=\\\"seconds-input\\\" min=\\\"0\\\" max=\\\"59\\\" value=\\\"0\\\">\\n                </div>\\n            </div>\\n            <div class=\\\"preset-buttons\\\">\\n                <button class=\\\"preset-btn\\\" data-minutes=\\\"5\\\">5\\uBD84</button>\\n                <button class=\\\"preset-btn\\\" data-minutes=\\\"10\\\">10\\uBD84</button>\\n                <button class=\\\"preset-btn\\\" data-minutes=\\\"15\\\">15\\uBD84</button>\\n                <button class=\\\"preset-btn\\\" data-minutes=\\\"30\\\">30\\uBD84</button>\\n            </div>\\n        \";\n\n    // 타이머 요소 추가\n    timersListElem.appendChild(newTimerElem);\n    console.log('타이머 요소 DOM에 추가됨');\n\n    // 타이머 컨트롤 설정\n    setupTimerControls(newTimerElem, timerInstance);\n\n    // 닫기 버튼 이벤트\n    var closeBtn = newTimerElem.querySelector('.close-timer');\n    closeBtn.addEventListener('click', function () {\n      console.log('닫기 버튼 클릭');\n      removeTimer(newTimerElem, timerId);\n    });\n\n    // 포커스 설정 및 스크롤\n    newTimerElem.querySelector('.timer-label').focus();\n    newTimerElem.scrollIntoView({\n      behavior: 'smooth'\n    });\n    console.log('새 타이머 추가 완료');\n  } catch (error) {\n    console.error('타이머 추가 오류:', error);\n    alert('타이머 추가 중 오류가 발생했습니다.');\n  }\n}\n\n// 타이머 제거 함수\nfunction removeTimer(timerElem, timerId) {\n  console.log(\"\\uD0C0\\uC774\\uBA38 \\uC81C\\uAC70: \".concat(timerId));\n\n  // 타이머 인스턴스 정리\n  var timerInstance = timers.get(timerId);\n  if (timerInstance) {\n    timerInstance.reset();\n    timers[\"delete\"](timerId);\n  }\n\n  // 애니메이션 후 요소 제거\n  timerElem.style.opacity = '0';\n  timerElem.style.transform = 'scale(0.8)';\n  timerElem.style.transition = 'all 0.3s ease-out';\n  setTimeout(function () {\n    timerElem.remove();\n    console.log('타이머 요소 제거됨');\n  }, 300);\n\n  // 저장된 데이터에서도 제거\n  var savedTimers = JSON.parse(localStorage.getItem('activeTimers') || '{}');\n  delete savedTimers[timerId];\n  localStorage.setItem('activeTimers', JSON.stringify(savedTimers));\n}\n\n// 타이머 컨트롤 설정 함수\nfunction setupTimerControls(timerElem, timerInstance) {\n  // DOM 요소\n  var hoursInput = timerElem.querySelector('.hours-input');\n  var minutesInput = timerElem.querySelector('.minutes-input');\n  var secondsInput = timerElem.querySelector('.seconds-input');\n  var timerLabel = timerElem.querySelector('.timer-label');\n  var startBtn = timerElem.querySelector('.timer-start');\n  var pauseBtn = timerElem.querySelector('.timer-pause');\n  var resetBtn = timerElem.querySelector('.timer-reset');\n  var presetBtns = timerElem.querySelectorAll('.preset-btn');\n  var timerHours = timerElem.querySelector('.timer-hours');\n  var timerMinutes = timerElem.querySelector('.timer-minutes');\n  var timerSeconds = timerElem.querySelector('.timer-seconds');\n\n  // 타이머 업데이트 콜백\n  timerInstance.onUpdate = function (hours, minutes, seconds) {\n    timerHours.textContent = hours.toString().padStart(2, '0');\n    timerMinutes.textContent = minutes.toString().padStart(2, '0');\n    timerSeconds.textContent = seconds.toString().padStart(2, '0');\n  };\n\n  // 타이머 완료 콜백\n  timerInstance.onComplete = function () {\n    var name = timerLabel.value.trim() || '타이머';\n    notificationManager.playNotification(\"\".concat(name, \" \\uC644\\uB8CC!\"), '설정한 시간이 완료되었습니다.');\n    timerElem.classList.add('timer-complete');\n    resetTimerControls();\n\n    // 알림음 재생\n    try {\n      var audio = new Audio('assets/sounds/bell.mp3');\n      audio.volume = 0.5;\n      audio.play();\n    } catch (e) {\n      console.warn('알림음 재생 실패:', e);\n    }\n  };\n\n  // 시작 버튼 이벤트\n  startBtn.addEventListener('click', function () {\n    var hours = parseInt(hoursInput.value) || 0;\n    var minutes = parseInt(minutesInput.value) || 0;\n    var seconds = parseInt(secondsInput.value) || 0;\n    if (hours === 0 && minutes === 0 && seconds === 0) {\n      alert('타이머 시간을 설정해주세요.');\n      return;\n    }\n    timerElem.classList.remove('timer-complete');\n    timerInstance.start(hours, minutes, seconds);\n    startBtn.disabled = true;\n    pauseBtn.disabled = false;\n    hoursInput.disabled = true;\n    minutesInput.disabled = true;\n    secondsInput.disabled = true;\n    presetBtns.forEach(function (btn) {\n      return btn.disabled = true;\n    });\n  });\n\n  // 일시정지 버튼 이벤트\n  pauseBtn.addEventListener('click', function () {\n    if (timerInstance.isPaused) {\n      timerInstance.resume();\n      pauseBtn.innerHTML = '<i class=\"fas fa-pause\"></i>';\n    } else {\n      timerInstance.pause();\n      pauseBtn.innerHTML = '<i class=\"fas fa-play\"></i>';\n    }\n  });\n\n  // 리셋 버튼 이벤트\n  resetBtn.addEventListener('click', function () {\n    timerInstance.reset();\n    resetTimerControls();\n    timerElem.classList.remove('timer-complete');\n  });\n\n  // 프리셋 버튼 이벤트\n  presetBtns.forEach(function (btn) {\n    btn.addEventListener('click', function () {\n      var minutes = parseInt(btn.dataset.minutes);\n      hoursInput.value = 0;\n      minutesInput.value = minutes;\n      secondsInput.value = 0;\n      timerHours.textContent = '00';\n      timerMinutes.textContent = minutes.toString().padStart(2, '0');\n      timerSeconds.textContent = '00';\n    });\n  });\n\n  // 컨트롤 리셋 함수\n  function resetTimerControls() {\n    startBtn.disabled = false;\n    pauseBtn.disabled = true;\n    pauseBtn.innerHTML = '<i class=\"fas fa-pause\"></i>';\n    hoursInput.disabled = false;\n    minutesInput.disabled = false;\n    secondsInput.disabled = false;\n    presetBtns.forEach(function (btn) {\n      return btn.disabled = false;\n    });\n  }\n}\n\n// 활성 타이머 저장 함수\nfunction saveActiveTimers() {\n  var activeTimers = {};\n  timers.forEach(function (timerInstance, timerId) {\n    if (timerInstance.isActive) {\n      var timerElem = document.querySelector(\".timer-item[data-timer-id=\\\"\".concat(timerId, \"\\\"]\"));\n      if (timerElem) {\n        var timerLabel = timerElem.querySelector('.timer-label').value;\n        var remainingTime = timerInstance.getRemainingTime();\n        activeTimers[timerId] = {\n          label: timerLabel,\n          hours: remainingTime.hours,\n          minutes: remainingTime.minutes,\n          seconds: remainingTime.seconds,\n          isPaused: timerInstance.isPaused\n        };\n      }\n    }\n  });\n  localStorage.setItem('activeTimers', JSON.stringify(activeTimers));\n}\n\n// 저장된 타이머 불러오기 함수\nfunction loadSavedTimers() {\n  var savedTimers = JSON.parse(localStorage.getItem('activeTimers') || '{}');\n  var timersListElem = document.getElementById('timers-list');\n  if (Object.keys(savedTimers).length === 0) return;\n  Object.entries(savedTimers).forEach(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n      timerId = _ref2[0],\n      timerData = _ref2[1];\n    var timerInstance = new Timer();\n    timers.set(timerId, timerInstance);\n    var timerElem = document.createElement('div');\n    timerElem.className = 'timer-item';\n    timerElem.dataset.timerId = timerId;\n    timerElem.innerHTML = \"\\n            <div class=\\\"timer-header\\\">\\n                <input type=\\\"text\\\" class=\\\"timer-label\\\" placeholder=\\\"\\uD0C0\\uC774\\uBA38 \\uC774\\uB984\\\" value=\\\"\".concat(timerData.label || '', \"\\\">\\n                <button class=\\\"close-timer\\\"><i class=\\\"fas fa-times\\\"></i></button>\\n            </div>\\n            <div class=\\\"timer-display\\\">\\n                <span class=\\\"timer-hours\\\">\").concat(timerData.hours.toString().padStart(2, '0'), \"</span>:\\n                <span class=\\\"timer-minutes\\\">\").concat(timerData.minutes.toString().padStart(2, '0'), \"</span>:\\n                <span class=\\\"timer-seconds\\\">\").concat(timerData.seconds.toString().padStart(2, '0'), \"</span>\\n            </div>\\n            <div class=\\\"timer-controls\\\">\\n                <button class=\\\"timer-start control-btn\\\" \").concat(timerData.isPaused ? '' : 'disabled', \"><i class=\\\"fas fa-play\\\"></i></button>\\n                <button class=\\\"timer-pause control-btn\\\" \").concat(timerData.isPaused ? 'disabled' : '', \"><i class=\\\"fas fa-pause\\\"></i></button>\\n                <button class=\\\"timer-reset control-btn\\\"><i class=\\\"fas fa-redo\\\"></i></button>\\n            </div>\\n            <div class=\\\"timer-settings\\\">\\n                <div class=\\\"time-input\\\">\\n                    <label>\\uC2DC\\uAC04:</label>\\n                    <input type=\\\"number\\\" class=\\\"hours-input\\\" min=\\\"0\\\" max=\\\"23\\\" value=\\\"\").concat(timerData.hours, \"\\\" \").concat(timerData.isPaused ? '' : 'disabled', \">\\n                </div>\\n                <div class=\\\"time-input\\\">\\n                    <label>\\uBD84:</label>\\n                    <input type=\\\"number\\\" class=\\\"minutes-input\\\" min=\\\"0\\\" max=\\\"59\\\" value=\\\"\").concat(timerData.minutes, \"\\\" \").concat(timerData.isPaused ? '' : 'disabled', \">\\n                </div>\\n                <div class=\\\"time-input\\\">\\n                    <label>\\uCD08:</label>\\n                    <input type=\\\"number\\\" class=\\\"seconds-input\\\" min=\\\"0\\\" max=\\\"59\\\" value=\\\"\").concat(timerData.seconds, \"\\\" \").concat(timerData.isPaused ? '' : 'disabled', \">\\n                </div>\\n            </div>\\n            <div class=\\\"preset-buttons\\\">\\n                <button class=\\\"preset-btn\\\" data-minutes=\\\"5\\\" \").concat(timerData.isPaused ? '' : 'disabled', \">5\\uBD84</button>\\n                <button class=\\\"preset-btn\\\" data-minutes=\\\"10\\\" \").concat(timerData.isPaused ? '' : 'disabled', \">10\\uBD84</button>\\n                <button class=\\\"preset-btn\\\" data-minutes=\\\"15\\\" \").concat(timerData.isPaused ? '' : 'disabled', \">15\\uBD84</button>\\n                <button class=\\\"preset-btn\\\" data-minutes=\\\"30\\\" \").concat(timerData.isPaused ? '' : 'disabled', \">30\\uBD84</button>\\n            </div>\\n        \");\n    timersListElem.appendChild(timerElem);\n    setupTimerControls(timerElem, timerInstance);\n    var closeBtn = timerElem.querySelector('.close-timer');\n    closeBtn.addEventListener('click', function () {\n      return removeTimer(timerElem, timerId);\n    });\n    if (!timerData.isPaused) {\n      timerInstance.start(timerData.hours, timerData.minutes, timerData.seconds);\n    }\n  });\n  var maxId = Math.max.apply(Math, [0].concat(_toConsumableArray(Object.keys(savedTimers).map(function (id) {\n    return parseInt(id);\n  }))));\n  timerIdCounter = maxId + 1;\n}\n\n// 스톱워치 초기화 및 이벤트 설정 함수\nfunction initializeStopwatch(stopwatch) {\n  var startBtn = document.getElementById('stopwatch-start');\n  var pauseBtn = document.getElementById('stopwatch-pause');\n  var resetBtn = document.getElementById('stopwatch-reset');\n  var lapBtn = document.getElementById('stopwatch-lap');\n  var lapsList = document.getElementById('laps-list');\n  var stopwatchHours = document.getElementById('stopwatch-hours');\n  var stopwatchMinutes = document.getElementById('stopwatch-minutes');\n  var stopwatchSeconds = document.getElementById('stopwatch-seconds');\n  var stopwatchMilliseconds = document.getElementById('stopwatch-milliseconds');\n\n  // 스톱워치 업데이트 함수\n  stopwatch.onUpdate = function (hours, minutes, seconds, milliseconds) {\n    stopwatchHours.textContent = hours.toString().padStart(2, '0');\n    stopwatchMinutes.textContent = minutes.toString().padStart(2, '0');\n    stopwatchSeconds.textContent = seconds.toString().padStart(2, '0');\n    stopwatchMilliseconds.textContent = milliseconds.toString().padStart(2, '0');\n  };\n\n  // 시작 버튼 클릭 이벤트\n  startBtn.addEventListener('click', function () {\n    stopwatch.start();\n\n    // 버튼 상태 업데이트\n    startBtn.disabled = true;\n    pauseBtn.disabled = false;\n    lapBtn.disabled = false;\n  });\n\n  // 일시 정지 버튼 클릭 이벤트\n  pauseBtn.addEventListener('click', function () {\n    if (stopwatch.isPaused) {\n      stopwatch.resume();\n      pauseBtn.innerHTML = '<i class=\"fas fa-pause\"></i>';\n    } else {\n      stopwatch.pause();\n      pauseBtn.innerHTML = '<i class=\"fas fa-play\"></i>';\n    }\n  });\n\n  // 리셋 버튼 클릭 이벤트\n  resetBtn.addEventListener('click', function () {\n    stopwatch.reset();\n    resetStopwatchControls();\n    lapsList.innerHTML = '';\n  });\n\n  // 랩 버튼 클릭 이벤트\n  lapBtn.addEventListener('click', function () {\n    var lapTime = stopwatch.getLapTime();\n    var lapIndex = stopwatch.laps.length;\n\n    // 랩 시간 표시\n    var lapItem = document.createElement('li');\n    lapItem.innerHTML = \"\\n            <span>\\uB7A9 \".concat(lapIndex, \"</span>\\n            <span>\").concat(formatTime(lapTime), \"</span>\\n        \");\n    lapsList.appendChild(lapItem);\n  });\n\n  // 스톱워치 컨트롤 리셋 함수\n  function resetStopwatchControls() {\n    startBtn.disabled = false;\n    pauseBtn.disabled = true;\n    lapBtn.disabled = true;\n    pauseBtn.innerHTML = '<i class=\"fas fa-pause\"></i>';\n  }\n\n  // 시간 포맷팅 함수\n  function formatTime(timeObj) {\n    var hours = timeObj.hours,\n      minutes = timeObj.minutes,\n      seconds = timeObj.seconds,\n      milliseconds = timeObj.milliseconds;\n    return \"\".concat(hours.toString().padStart(2, '0'), \":\").concat(minutes.toString().padStart(2, '0'), \":\").concat(seconds.toString().padStart(2, '0'), \".\").concat(milliseconds.toString().padStart(2, '0'));\n  }\n}\n\n// 포모도로 초기화 및 이벤트 설정 함수\nfunction initializePomodoro(pomodoro, notificationManager, plantSystem) {\n  var startBtn = document.getElementById('pomodoro-start');\n  var pauseBtn = document.getElementById('pomodoro-pause');\n  var resetBtn = document.getElementById('pomodoro-reset');\n  var pomodoroMinutes = document.getElementById('pomodoro-minutes');\n  var pomodoroSeconds = document.getElementById('pomodoro-seconds');\n  var statusText = document.getElementById('status-text');\n  var cycleCount = document.getElementById('cycle-count');\n  var currentModeTime = document.getElementById('current-mode-time');\n  var workTime = document.getElementById('work-time');\n  var breakTime = document.getElementById('break-time');\n  var workMinutesInput = document.getElementById('work-minutes');\n  var shortBreakMinutesInput = document.getElementById('short-break-minutes');\n  var longBreakMinutesInput = document.getElementById('long-break-minutes');\n  var pomodoroCyclesInput = document.getElementById('pomodoro-cycles');\n\n  // 포모도로 설정 변경 시 이벤트\n  workMinutesInput.addEventListener('change', updatePomodoroSettings);\n  shortBreakMinutesInput.addEventListener('change', updatePomodoroSettings);\n  longBreakMinutesInput.addEventListener('change', updatePomodoroSettings);\n  pomodoroCyclesInput.addEventListener('change', updatePomodoroSettings);\n\n  // 설정 업데이트 함수\n  function updatePomodoroSettings() {\n    var workMinutes = parseInt(workMinutesInput.value) || 25;\n    var shortBreakMinutes = parseInt(shortBreakMinutesInput.value) || 5;\n    var longBreakMinutes = parseInt(longBreakMinutesInput.value) || 15;\n    var totalCycles = parseInt(pomodoroCyclesInput.value) || 4;\n\n    // 유효성 검사 및 범위 조정\n    workMinutesInput.value = Math.max(1, Math.min(60, workMinutes));\n    shortBreakMinutesInput.value = Math.max(1, Math.min(30, shortBreakMinutes));\n    longBreakMinutesInput.value = Math.max(1, Math.min(60, longBreakMinutes));\n    pomodoroCyclesInput.value = Math.max(1, Math.min(10, totalCycles));\n\n    // 포모도로 설정 업데이트\n    pomodoro.setSettings({\n      workMinutes: workMinutesInput.value,\n      shortBreakMinutes: shortBreakMinutesInput.value,\n      longBreakMinutes: longBreakMinutesInput.value,\n      totalCycles: pomodoroCyclesInput.value\n    });\n\n    // 초기 상태 업데이트 (작업 시간 표시)\n    pomodoroMinutes.textContent = workMinutesInput.value.toString().padStart(2, '0');\n    pomodoroSeconds.textContent = '00';\n\n    // 현재 모드 시간 표시 업데이트\n    updateCurrentModeTime('work');\n\n    // 작업/휴식 시간 표시 업데이트\n    updateTimeDisplays();\n\n    // 사이클 카운트 업데이트\n    cycleCount.textContent = \"0/\".concat(pomodoroCyclesInput.value);\n  }\n\n  // 시간 표시 업데이트 함수\n  function updateTimeDisplays() {\n    var workMin = parseInt(workMinutesInput.value) || 25;\n    var shortBreakMin = parseInt(shortBreakMinutesInput.value) || 5;\n    workTime.textContent = \"\".concat(workMin.toString().padStart(2, '0'), \":00\");\n    breakTime.textContent = \"\".concat(shortBreakMin.toString().padStart(2, '0'), \":00\");\n  }\n\n  // 현재 모드 시간 표시 업데이트 함수\n  function updateCurrentModeTime(mode) {\n    var minutes = 0;\n    switch (mode) {\n      case 'work':\n        minutes = parseInt(workMinutesInput.value) || 25;\n        break;\n      case 'shortBreak':\n        minutes = parseInt(shortBreakMinutesInput.value) || 5;\n        break;\n      case 'longBreak':\n        minutes = parseInt(longBreakMinutesInput.value) || 15;\n        break;\n    }\n    currentModeTime.textContent = \"\".concat(minutes.toString().padStart(2, '0'), \":00\");\n  }\n\n  // 시작 버튼 클릭 이벤트\n  startBtn.addEventListener('click', function () {\n    // 포모도로 시작\n    pomodoro.start();\n\n    // 버튼 상태 업데이트\n    startBtn.disabled = true;\n    pauseBtn.disabled = false;\n\n    // 입력 필드 비활성화\n    workMinutesInput.disabled = true;\n    shortBreakMinutesInput.disabled = true;\n    longBreakMinutesInput.disabled = true;\n    pomodoroCyclesInput.disabled = true;\n  });\n\n  // 일시 정지 버튼 클릭 이벤트\n  pauseBtn.addEventListener('click', function () {\n    if (pomodoro.isPaused) {\n      pomodoro.resume();\n      pauseBtn.innerHTML = '<i class=\"fas fa-pause\"></i>';\n    } else {\n      pomodoro.pause();\n      pauseBtn.innerHTML = '<i class=\"fas fa-play\"></i>';\n    }\n  });\n\n  // 리셋 버튼 클릭 이벤트\n  resetBtn.addEventListener('click', function () {\n    pomodoro.reset();\n    resetPomodoroControls();\n  });\n\n  // 포모도로 업데이트 함수\n  pomodoro.onUpdate = function (minutes, seconds, currentCycle, totalCycles, mode) {\n    pomodoroMinutes.textContent = minutes.toString().padStart(2, '0');\n    pomodoroSeconds.textContent = seconds.toString().padStart(2, '0');\n\n    // 사이클 정보 업데이트\n    cycleCount.textContent = \"\".concat(currentCycle, \"/\").concat(totalCycles);\n\n    // 모드에 따른 상태 텍스트 업데이트\n    if (mode === 'work') {\n      statusText.textContent = '작업 시간';\n    } else if (mode === 'shortBreak') {\n      statusText.textContent = '짧은 휴식';\n    } else if (mode === 'longBreak') {\n      statusText.textContent = '긴 휴식';\n    }\n  };\n\n  // 포모도로 모드 변경 시 실행 함수\n  pomodoro.onModeChange = function (mode) {\n    // 모드에 따른 알림\n    var title = '';\n    var message = '';\n    if (mode === 'work') {\n      title = '작업 시간!';\n      message = '지금부터 집중해서 작업하세요.';\n      updateCurrentModeTime('work');\n    } else if (mode === 'shortBreak') {\n      title = '짧은 휴식 시간!';\n      message = '잠시 휴식을 취하세요.';\n      updateCurrentModeTime('shortBreak');\n    } else if (mode === 'longBreak') {\n      title = '긴 휴식 시간!';\n      message = '충분히 휴식을 취하세요.';\n      updateCurrentModeTime('longBreak');\n    }\n    notificationManager.playNotification(title, message);\n  };\n\n  // 포모도로 완료 시 실행 함수\n  pomodoro.onComplete = function (completedCycles) {\n    notificationManager.playNotification('포모도로 완료!', \"\".concat(completedCycles, \"\\uBC88\\uC758 \\uD3EC\\uBAA8\\uB3C4\\uB85C \\uC138\\uC158\\uC744 \\uC644\\uB8CC\\uD588\\uC2B5\\uB2C8\\uB2E4.\"));\n    resetPomodoroControls();\n\n    // 포모도로 완료 시 경험치 제공\n    // 완료한 사이클 수에 따라 경험치 차등 지급\n    var exp = completedCycles * 15;\n    plantSystem.addExperience(exp);\n  };\n\n  // 작업 세션 완료 시 실행 함수\n  pomodoro.onWorkSessionComplete = function () {\n    // 작업 세션 완료 시 경험치 제공\n    plantSystem.addExperience(10);\n  };\n\n  // 포모도로 컨트롤 리셋 함수\n  function resetPomodoroControls() {\n    startBtn.disabled = false;\n    pauseBtn.disabled = true;\n    pauseBtn.innerHTML = '<i class=\"fas fa-pause\"></i>';\n    workMinutesInput.disabled = false;\n    shortBreakMinutesInput.disabled = false;\n    longBreakMinutesInput.disabled = false;\n    pomodoroCyclesInput.disabled = false;\n    updatePomodoroSettings();\n  }\n\n  // 초기 설정 적용\n  updatePomodoroSettings();\n}\n\n// 설정 초기화 및 이벤트 설정 함수\nfunction initializeSettings(notificationManager, plantSystem) {\n  var notificationSoundSelect = document.getElementById('notification-sound');\n  var notificationVolumeInput = document.getElementById('notification-volume');\n  var backgroundNotificationCheckbox = document.getElementById('background-notification');\n  var plantThemeSelect = document.getElementById('plant-theme');\n\n  // 설정 변경 시 이벤트\n  notificationSoundSelect.addEventListener('change', saveSettings);\n  notificationVolumeInput.addEventListener('input', saveSettings);\n  backgroundNotificationCheckbox.addEventListener('change', saveSettings);\n  plantThemeSelect.addEventListener('change', function () {\n    saveSettings();\n    plantSystem.changeTheme(plantThemeSelect.value);\n  });\n\n  // 설정 저장 함수\n  function saveSettings() {\n    var settings = {\n      notificationSound: notificationSoundSelect.value,\n      notificationVolume: notificationVolumeInput.value,\n      backgroundNotification: backgroundNotificationCheckbox.checked,\n      plantTheme: plantThemeSelect.value\n    };\n    localStorage.setItem('timerSettings', JSON.stringify(settings));\n\n    // 알림 설정 업데이트\n    notificationManager.setSound(settings.notificationSound);\n    notificationManager.setVolume(settings.notificationVolume / 100);\n    notificationManager.setBackgroundNotification(settings.backgroundNotification);\n  }\n\n  // 설정 불러오기 함수\n  function loadSettings() {\n    var savedSettings = localStorage.getItem('timerSettings');\n    if (savedSettings) {\n      var settings = JSON.parse(savedSettings);\n      notificationSoundSelect.value = settings.notificationSound || 'bell';\n      notificationVolumeInput.value = settings.notificationVolume || 80;\n      backgroundNotificationCheckbox.checked = settings.backgroundNotification !== undefined ? settings.backgroundNotification : true;\n      plantThemeSelect.value = settings.plantTheme || 'indoor';\n\n      // 알림 설정 업데이트\n      notificationManager.setSound(settings.notificationSound);\n      notificationManager.setVolume(settings.notificationVolume / 100);\n      notificationManager.setBackgroundNotification(settings.backgroundNotification);\n\n      // 식물 테마 업데이트\n      plantSystem.changeTheme(settings.plantTheme);\n    }\n  }\n\n  // 초기 설정 불러오기\n  loadSettings();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QiIsInNvdXJjZXMiOlsid2VicGFjazovL2ZpbGV0b3FyLy4vYXNzZXRzL2pzL2NvcmUvVGltZXIuanM/MjA2YyIsIndlYnBhY2s6Ly9maWxldG9xci8uL2Fzc2V0cy9qcy9jb3JlL1N0b3B3YXRjaC5qcz9lMmQ2Iiwid2VicGFjazovL2ZpbGV0b3FyLy4vYXNzZXRzL2pzL2NvcmUvUG9tb2Rvcm8uanM/Mjg3NiIsIndlYnBhY2s6Ly9maWxldG9xci8uL2Fzc2V0cy9qcy9jb3JlL1BsYW50U3lzdGVtLmpzP2IzNjciLCJ3ZWJwYWNrOi8vZmlsZXRvcXIvLi9hc3NldHMvanMvdXRpbHMvTm90aWZpY2F0aW9uTWFuYWdlci5qcz81ZmFlIiwid2VicGFjazovL2ZpbGV0b3FyLy4vYXNzZXRzL2pzL3BhZ2VzL3RpbWVyLmpzPzA3ZWQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIO2DgOydtOuouCDtgbTrnpjsiqRcclxuICog7Lm07Jq07Yq464uk7Jq0IO2DgOydtOuouCDquLDriqXsnYQg7KCc6rO17ZWp64uI64ukLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFRpbWVyIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuaG91cnMgPSAwO1xyXG4gICAgICAgIHRoaXMubWludXRlcyA9IDA7XHJcbiAgICAgICAgdGhpcy5zZWNvbmRzID0gMDtcclxuICAgICAgICB0aGlzLnRvdGFsU2Vjb25kcyA9IDA7XHJcbiAgICAgICAgdGhpcy50aW1lciA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5pc1BhdXNlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuaXNBY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICBcclxuICAgICAgICAvLyDsvZzrsLEg7ZWo7IiYXHJcbiAgICAgICAgdGhpcy5vblVwZGF0ZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5vbkNvbXBsZXRlID0gbnVsbDtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiDtg4DsnbTrqLgg7Iuc7J6RXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaG91cnMgLSDsi5zqsIRcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtaW51dGVzIC0g67aEXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc2Vjb25kcyAtIOy0iFxyXG4gICAgICovXHJcbiAgICBzdGFydChob3VycywgbWludXRlcywgc2Vjb25kcykge1xyXG4gICAgICAgIC8vIOyLnOqwhCDshKTsoJVcclxuICAgICAgICB0aGlzLmhvdXJzID0gaG91cnMgfHwgMDtcclxuICAgICAgICB0aGlzLm1pbnV0ZXMgPSBtaW51dGVzIHx8IDA7XHJcbiAgICAgICAgdGhpcy5zZWNvbmRzID0gc2Vjb25kcyB8fCAwO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIOy0nSDstIgg6rOE7IKwXHJcbiAgICAgICAgdGhpcy50b3RhbFNlY29uZHMgPSB0aGlzLmhvdXJzICogMzYwMCArIHRoaXMubWludXRlcyAqIDYwICsgdGhpcy5zZWNvbmRzO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmICh0aGlzLnRvdGFsU2Vjb25kcyA8PSAwKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ+2DgOydtOuouCDsi5zqsITsnYAgMOuztOuLpCDsu6Tslbwg7ZWp64uI64ukLicpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuaXNBY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuaXNQYXVzZWQgPSBmYWxzZTtcclxuICAgICAgICBcclxuICAgICAgICAvLyDtg4DsnbTrqLgg7JeF642w7J207Yq4IOuwjyDsi5zsnpFcclxuICAgICAgICB0aGlzLl91cGRhdGVUaW1lckRpc3BsYXkoKTtcclxuICAgICAgICB0aGlzLl9zdGFydENvdW50ZG93bigpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqIO2DgOydtOuouCDsnbzsi5wg7KCV7KeAXHJcbiAgICAgKi9cclxuICAgIHBhdXNlKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5pc0FjdGl2ZSB8fCAhdGhpcy50aW1lcikgcmV0dXJuO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy50aW1lcik7XHJcbiAgICAgICAgdGhpcy50aW1lciA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5pc1BhdXNlZCA9IHRydWU7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8qKlxyXG4gICAgICog7J287IucIOygleyngOuQnCDtg4DsnbTrqLgg7J6s6rCcXHJcbiAgICAgKi9cclxuICAgIHJlc3VtZSgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuaXNBY3RpdmUgfHwgIXRoaXMuaXNQYXVzZWQpIHJldHVybjtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLmlzUGF1c2VkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5fc3RhcnRDb3VudGRvd24oKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiDtg4DsnbTrqLgg7LSI6riw7ZmUXHJcbiAgICAgKi9cclxuICAgIHJlc2V0KCkge1xyXG4gICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy50aW1lcik7XHJcbiAgICAgICAgdGhpcy50aW1lciA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5ob3VycyA9IDA7XHJcbiAgICAgICAgdGhpcy5taW51dGVzID0gMDtcclxuICAgICAgICB0aGlzLnNlY29uZHMgPSAwO1xyXG4gICAgICAgIHRoaXMudG90YWxTZWNvbmRzID0gMDtcclxuICAgICAgICB0aGlzLmlzQWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5pc1BhdXNlZCA9IGZhbHNlO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIO2DgOydtOuouCDtkZzsi5wg7JeF642w7J207Yq4XHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm9uVXBkYXRlID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIHRoaXMub25VcGRhdGUoMCwgMCwgMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqIO2YhOyerCDrgqjsnYAg7Iuc6rCEIOygleuztCDqsIDsoLjsmKTquLBcclxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IOyLnOqwhCwg67aELCDstIgg7KCV67O066W8IOuLtOydgCDqsJ3ssrRcclxuICAgICAqL1xyXG4gICAgZ2V0UmVtYWluaW5nVGltZSgpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBob3VyczogdGhpcy5ob3VycyxcclxuICAgICAgICAgICAgbWludXRlczogdGhpcy5taW51dGVzLFxyXG4gICAgICAgICAgICBzZWNvbmRzOiB0aGlzLnNlY29uZHNcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqIOy5tOyatO2KuOuLpOyatCDsi5zsnpFcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIF9zdGFydENvdW50ZG93bigpIHtcclxuICAgICAgICBpZiAodGhpcy50aW1lciAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBjbGVhckludGVydmFsKHRoaXMudGltZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgIGNvbnN0IGluaXRpYWxUb3RhbFNlY29uZHMgPSB0aGlzLnRvdGFsU2Vjb25kcztcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLnRpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xyXG4gICAgICAgICAgICAvLyDqsr3qs7wg7Iuc6rCEIOqzhOyCsFxyXG4gICAgICAgICAgICBjb25zdCBlbGFwc2VkU2Vjb25kcyA9IE1hdGguZmxvb3IoKERhdGUubm93KCkgLSBzdGFydFRpbWUpIC8gMTAwMCk7XHJcbiAgICAgICAgICAgIHRoaXMudG90YWxTZWNvbmRzID0gaW5pdGlhbFRvdGFsU2Vjb25kcyAtIGVsYXBzZWRTZWNvbmRzO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgKHRoaXMudG90YWxTZWNvbmRzIDw9IDApIHtcclxuICAgICAgICAgICAgICAgIC8vIO2DgOydtOuouCDsmYTro4xcclxuICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy50aW1lcik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRpbWVyID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIHRoaXMudG90YWxTZWNvbmRzID0gMDtcclxuICAgICAgICAgICAgICAgIHRoaXMuaXNBY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVRpbWVyRGlzcGxheSgpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyDsmYTro4wg7L2c67CxIO2YuOy2nFxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm9uQ29tcGxldGUgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uQ29tcGxldGUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgdGhpcy5fdXBkYXRlVGltZXJEaXNwbGF5KCk7XHJcbiAgICAgICAgfSwgMTAwKTsgLy8g642UIOu2gOuTnOufrOyatCDsl4XrjbDsnbTtirjrpbwg7JyE7ZW0IDEwMG1zIOqwhOqyqeycvOuhnCDshKTsoJVcclxuICAgIH1cclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiDtg4DsnbTrqLgg7ZGc7IucIOyXheuNsOydtO2KuFxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgX3VwZGF0ZVRpbWVyRGlzcGxheSgpIHtcclxuICAgICAgICAvLyDsi5zqsIQsIOu2hCwg7LSIIOqzhOyCsFxyXG4gICAgICAgIHRoaXMuaG91cnMgPSBNYXRoLmZsb29yKHRoaXMudG90YWxTZWNvbmRzIC8gMzYwMCk7XHJcbiAgICAgICAgdGhpcy5taW51dGVzID0gTWF0aC5mbG9vcigodGhpcy50b3RhbFNlY29uZHMgJSAzNjAwKSAvIDYwKTtcclxuICAgICAgICB0aGlzLnNlY29uZHMgPSB0aGlzLnRvdGFsU2Vjb25kcyAlIDYwO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIOyXheuNsOydtO2KuCDsvZzrsLEg7Zi47LacXHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm9uVXBkYXRlID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIHRoaXMub25VcGRhdGUodGhpcy5ob3VycywgdGhpcy5taW51dGVzLCB0aGlzLnNlY29uZHMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSAiLCIvKipcclxuICog7Iqk7Yax7JuM7LmYIO2BtOuemOyKpFxyXG4gKiDsi5zqsIQg7Lih7KCVIOq4sOuKpeydhCDsoJzqs7Xtlanri4jri6QuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgU3RvcHdhdGNoIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuc3RhcnRUaW1lID0gMDtcclxuICAgICAgICB0aGlzLmVsYXBzZWRUaW1lID0gMDtcclxuICAgICAgICB0aGlzLnRpbWVyID0gbnVsbDtcclxuICAgICAgICB0aGlzLmlzUGF1c2VkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5pc0FjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMubGFwcyA9IFtdO1xyXG4gICAgICAgIHRoaXMubGFzdExhcFRpbWUgPSAwO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIOy9nOuwsSDtlajsiJhcclxuICAgICAgICB0aGlzLm9uVXBkYXRlID0gbnVsbDtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiDsiqTthrHsm4zsuZgg7Iuc7J6RXHJcbiAgICAgKi9cclxuICAgIHN0YXJ0KCkge1xyXG4gICAgICAgIGlmICh0aGlzLmlzQWN0aXZlICYmICF0aGlzLmlzUGF1c2VkKSByZXR1cm47XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKCF0aGlzLmlzQWN0aXZlKSB7XHJcbiAgICAgICAgICAgIC8vIOyDiOuhnCDsi5zsnpHtlZjripQg6rK97JqwXHJcbiAgICAgICAgICAgIHRoaXMuc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcclxuICAgICAgICAgICAgdGhpcy5lbGFwc2VkVGltZSA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMubGFwcyA9IFtdO1xyXG4gICAgICAgICAgICB0aGlzLmxhc3RMYXBUaW1lID0gMDtcclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNQYXVzZWQpIHtcclxuICAgICAgICAgICAgLy8g7J287IucIOygleyngCDtm4Qg7J6s6rCc7ZWY64qUIOqyveyasFxyXG4gICAgICAgICAgICB0aGlzLnN0YXJ0VGltZSA9IERhdGUubm93KCkgLSB0aGlzLmVsYXBzZWRUaW1lO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICB0aGlzLmlzQWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmlzUGF1c2VkID0gZmFsc2U7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8g7Iqk7Yax7JuM7LmYIOyXheuNsOydtO2KuCDsi5zsnpFcclxuICAgICAgICB0aGlzLl9zdGFydFRpbWVyKCk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8qKlxyXG4gICAgICog7Iqk7Yax7JuM7LmYIOydvOyLnCDsoJXsp4BcclxuICAgICAqL1xyXG4gICAgcGF1c2UoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzQWN0aXZlIHx8IHRoaXMuaXNQYXVzZWQgfHwgIXRoaXMudGltZXIpIHJldHVybjtcclxuICAgICAgICBcclxuICAgICAgICBjbGVhckludGVydmFsKHRoaXMudGltZXIpO1xyXG4gICAgICAgIHRoaXMudGltZXIgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuaXNQYXVzZWQgPSB0cnVlO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIOydvOyLnCDsoJXsp4Ag7Iuc7KCQ6rmM7KeA7J2YIOqyveqzvCDsi5zqsIQg7KCA7J6lXHJcbiAgICAgICAgdGhpcy5lbGFwc2VkVGltZSA9IERhdGUubm93KCkgLSB0aGlzLnN0YXJ0VGltZTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiDsnbzsi5wg7KCV7KeA65CcIOyKpO2GseybjOy5mCDsnqzqsJxcclxuICAgICAqL1xyXG4gICAgcmVzdW1lKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5pc0FjdGl2ZSB8fCAhdGhpcy5pc1BhdXNlZCkgcmV0dXJuO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuc3RhcnQoKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiDsiqTthrHsm4zsuZgg7LSI6riw7ZmUXHJcbiAgICAgKi9cclxuICAgIHJlc2V0KCkge1xyXG4gICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy50aW1lcik7XHJcbiAgICAgICAgdGhpcy50aW1lciA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5zdGFydFRpbWUgPSAwO1xyXG4gICAgICAgIHRoaXMuZWxhcHNlZFRpbWUgPSAwO1xyXG4gICAgICAgIHRoaXMuaXNBY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmlzUGF1c2VkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5sYXBzID0gW107XHJcbiAgICAgICAgdGhpcy5sYXN0TGFwVGltZSA9IDA7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8g7Iqk7Yax7JuM7LmYIO2RnOyLnCDsl4XrjbDsnbTtirhcclxuICAgICAgICBpZiAodHlwZW9mIHRoaXMub25VcGRhdGUgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgdGhpcy5vblVwZGF0ZSgwLCAwLCAwLCAwKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8qKlxyXG4gICAgICog656pIO2DgOyehCDquLDroZ1cclxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IOueqSDtg4DsnoQg7KCV67O0XHJcbiAgICAgKi9cclxuICAgIGdldExhcFRpbWUoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzQWN0aXZlKSByZXR1cm4gbnVsbDtcclxuICAgICAgICBcclxuICAgICAgICBjb25zdCBjdXJyZW50VGltZSA9IHRoaXMuaXNQYXVzZWQgPyB0aGlzLmVsYXBzZWRUaW1lIDogRGF0ZS5ub3coKSAtIHRoaXMuc3RhcnRUaW1lO1xyXG4gICAgICAgIGNvbnN0IGxhcFRpbWUgPSBjdXJyZW50VGltZSAtIHRoaXMubGFzdExhcFRpbWU7XHJcbiAgICAgICAgdGhpcy5sYXN0TGFwVGltZSA9IGN1cnJlbnRUaW1lO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIOueqSDsi5zqsITsnYQg7IucLCDrtoQsIOy0iCwg67CA66as7LSI66GcIOuzgO2ZmFxyXG4gICAgICAgIGNvbnN0IHsgaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMsIG1pbGxpc2Vjb25kcyB9ID0gdGhpcy5fY29udmVydFRpbWUobGFwVGltZSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8g656pIOygleuztCDsoIDsnqUg67CPIOuwmO2ZmFxyXG4gICAgICAgIGNvbnN0IGxhcCA9IHsgdGltZTogbGFwVGltZSwgaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMsIG1pbGxpc2Vjb25kcyB9O1xyXG4gICAgICAgIHRoaXMubGFwcy5wdXNoKGxhcCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIGxhcDtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiDsiqTthrHsm4zsuZgg7JeF642w7J207Yq4IOyLnOyekVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgX3N0YXJ0VGltZXIoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMudGltZXIgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLnRpbWVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy50aW1lciA9IHNldEludGVydmFsKCgpID0+IHtcclxuICAgICAgICAgICAgLy8g6rK96rO8IOyLnOqwhCDqs4TsgrBcclxuICAgICAgICAgICAgY29uc3QgZWxhcHNlZFRpbWUgPSBEYXRlLm5vdygpIC0gdGhpcy5zdGFydFRpbWU7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyDsi5zqsIQg67OA7ZmYIOuwjyDtkZzsi5wg7JeF642w7J207Yq4XHJcbiAgICAgICAgICAgIGNvbnN0IHsgaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMsIG1pbGxpc2Vjb25kcyB9ID0gdGhpcy5fY29udmVydFRpbWUoZWxhcHNlZFRpbWUpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8g7JeF642w7J207Yq4IOy9nOuwsSDtmLjstpxcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm9uVXBkYXRlID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uVXBkYXRlKGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzLCBtaWxsaXNlY29uZHMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgMTApOyAvLyDrjZQg7KCV7ZmV7ZWcIOuwgOumrOy0iCDtkZzsi5zrpbwg7JyE7ZW0IDEwbXMg6rCE6rKp7Jy866GcIOyEpOyglVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqIOuwgOumrOy0iCDri6jsnIQg7Iuc6rCE7J2EIOyLnCwg67aELCDstIgsIOuwgOumrOy0iOuhnCDrs4DtmZhcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lTXMgLSDrsIDrpqzstIgg64uo7JyEIOyLnOqwhFxyXG4gICAgICogQHJldHVybnMge09iamVjdH0g67OA7ZmY65CcIOyLnOqwhCDsoJXrs7RcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIF9jb252ZXJ0VGltZSh0aW1lTXMpIHtcclxuICAgICAgICAvLyDsi5zqsIQg64uo7JyEIOuzgO2ZmFxyXG4gICAgICAgIGNvbnN0IHRvdGFsU2Vjb25kcyA9IE1hdGguZmxvb3IodGltZU1zIC8gMTAwMCk7XHJcbiAgICAgICAgY29uc3QgaG91cnMgPSBNYXRoLmZsb29yKHRvdGFsU2Vjb25kcyAvIDM2MDApO1xyXG4gICAgICAgIGNvbnN0IG1pbnV0ZXMgPSBNYXRoLmZsb29yKCh0b3RhbFNlY29uZHMgJSAzNjAwKSAvIDYwKTtcclxuICAgICAgICBjb25zdCBzZWNvbmRzID0gdG90YWxTZWNvbmRzICUgNjA7XHJcbiAgICAgICAgY29uc3QgbWlsbGlzZWNvbmRzID0gTWF0aC5mbG9vcigodGltZU1zICUgMTAwMCkgLyAxMCk7IC8vIDLsnpDrpqwg67CA66as7LSIXHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIHsgaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMsIG1pbGxpc2Vjb25kcyB9O1xyXG4gICAgfVxyXG59ICIsIi8qKlxyXG4gKiDtj6zrqqjrj4TroZwg7YG0656Y7IqkXHJcbiAqIO2PrOuqqOuPhOuhnCDquLDrspUg7YOA7J2066i4IOq4sOuKpeydhCDsoJzqs7Xtlanri4jri6QuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgUG9tb2Rvcm8ge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgLy8g6riw67O4IO2PrOuqqOuPhOuhnCDshKTsoJVcclxuICAgICAgICB0aGlzLnNldHRpbmdzID0ge1xyXG4gICAgICAgICAgICB3b3JrTWludXRlczogMjUsXHJcbiAgICAgICAgICAgIHNob3J0QnJlYWtNaW51dGVzOiA1LFxyXG4gICAgICAgICAgICBsb25nQnJlYWtNaW51dGVzOiAxNSxcclxuICAgICAgICAgICAgdG90YWxDeWNsZXM6IDRcclxuICAgICAgICB9O1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMudG90YWxTZWNvbmRzID0gdGhpcy5zZXR0aW5ncy53b3JrTWludXRlcyAqIDYwO1xyXG4gICAgICAgIHRoaXMudGltZXIgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuaXNQYXVzZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmlzQWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50TW9kZSA9ICd3b3JrJzsgLy8gJ3dvcmsnLCAnc2hvcnRCcmVhaycsICdsb25nQnJlYWsnXHJcbiAgICAgICAgdGhpcy5jdXJyZW50Q3ljbGUgPSAwO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIOy9nOuwsSDtlajsiJhcclxuICAgICAgICB0aGlzLm9uVXBkYXRlID0gbnVsbDtcclxuICAgICAgICB0aGlzLm9uTW9kZUNoYW5nZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5vbkNvbXBsZXRlID0gbnVsbDtcclxuICAgICAgICB0aGlzLm9uV29ya1Nlc3Npb25Db21wbGV0ZSA9IG51bGw7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8qKlxyXG4gICAgICog7Y+s66qo64+E66GcIOyEpOyglSDsl4XrjbDsnbTtirhcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBuZXdTZXR0aW5ncyAtIOyDiCDshKTsoJVcclxuICAgICAqL1xyXG4gICAgc2V0U2V0dGluZ3MobmV3U2V0dGluZ3MpIHtcclxuICAgICAgICAvLyDquLDsobQg7ISk7KCV7JeQIOyDiCDshKTsoJUg67OR7ZWpXHJcbiAgICAgICAgdGhpcy5zZXR0aW5ncyA9IHtcclxuICAgICAgICAgICAgLi4udGhpcy5zZXR0aW5ncyxcclxuICAgICAgICAgICAgLi4ubmV3U2V0dGluZ3NcclxuICAgICAgICB9O1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIO2ZnOyEsSDsg4Htg5zqsIAg7JWE64uQIOuVjCDstZzstIgg7YOA7J2066i4IOyLnOqwhCDshKTsoJVcclxuICAgICAgICBpZiAoIXRoaXMuaXNBY3RpdmUpIHtcclxuICAgICAgICAgICAgdGhpcy50b3RhbFNlY29uZHMgPSB0aGlzLnNldHRpbmdzLndvcmtNaW51dGVzICogNjA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqIO2PrOuqqOuPhOuhnCDtg4DsnbTrqLgg7Iuc7J6RXHJcbiAgICAgKi9cclxuICAgIHN0YXJ0KCkge1xyXG4gICAgICAgIGlmICh0aGlzLmlzQWN0aXZlICYmICF0aGlzLmlzUGF1c2VkKSByZXR1cm47XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKCF0aGlzLmlzQWN0aXZlKSB7XHJcbiAgICAgICAgICAgIC8vIOyDiOuhnCDsi5zsnpHtlZjripQg6rK97JqwIOyekeyXhSDri6jqs4TroZwg7Iuc7J6RXHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudE1vZGUgPSAnd29yayc7XHJcbiAgICAgICAgICAgIHRoaXMudG90YWxTZWNvbmRzID0gdGhpcy5zZXR0aW5ncy53b3JrTWludXRlcyAqIDYwO1xyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRDeWNsZSA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuaXNBY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuaXNQYXVzZWQgPSBmYWxzZTtcclxuICAgICAgICBcclxuICAgICAgICAvLyDtg4DsnbTrqLgg7Iuc7J6RXHJcbiAgICAgICAgdGhpcy5fc3RhcnRDb3VudGRvd24oKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiDtj6zrqqjrj4TroZwg7YOA7J2066i4IOydvOyLnCDsoJXsp4BcclxuICAgICAqL1xyXG4gICAgcGF1c2UoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzQWN0aXZlIHx8IHRoaXMuaXNQYXVzZWQgfHwgIXRoaXMudGltZXIpIHJldHVybjtcclxuICAgICAgICBcclxuICAgICAgICBjbGVhckludGVydmFsKHRoaXMudGltZXIpO1xyXG4gICAgICAgIHRoaXMudGltZXIgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuaXNQYXVzZWQgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqIOydvOyLnCDsoJXsp4DrkJwg7Y+s66qo64+E66GcIO2DgOydtOuouCDsnqzqsJxcclxuICAgICAqL1xyXG4gICAgcmVzdW1lKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5pc0FjdGl2ZSB8fCAhdGhpcy5pc1BhdXNlZCkgcmV0dXJuO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuaXNQYXVzZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLl9zdGFydENvdW50ZG93bigpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqIO2PrOuqqOuPhOuhnCDtg4DsnbTrqLgg7LSI6riw7ZmUXHJcbiAgICAgKi9cclxuICAgIHJlc2V0KCkge1xyXG4gICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy50aW1lcik7XHJcbiAgICAgICAgdGhpcy50aW1lciA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5pc0FjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuaXNQYXVzZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmN1cnJlbnRNb2RlID0gJ3dvcmsnO1xyXG4gICAgICAgIHRoaXMuY3VycmVudEN5Y2xlID0gMDtcclxuICAgICAgICB0aGlzLnRvdGFsU2Vjb25kcyA9IHRoaXMuc2V0dGluZ3Mud29ya01pbnV0ZXMgKiA2MDtcclxuICAgICAgICBcclxuICAgICAgICAvLyDtj6zrqqjrj4TroZwg7ZGc7IucIOyXheuNsOydtO2KuFxyXG4gICAgICAgIHRoaXMuX3VwZGF0ZVRpbWVyRGlzcGxheSgpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqIOy5tOyatO2KuOuLpOyatCDsi5zsnpFcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIF9zdGFydENvdW50ZG93bigpIHtcclxuICAgICAgICBpZiAodGhpcy50aW1lciAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBjbGVhckludGVydmFsKHRoaXMudGltZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgIGNvbnN0IGluaXRpYWxUb3RhbFNlY29uZHMgPSB0aGlzLnRvdGFsU2Vjb25kcztcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLnRpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xyXG4gICAgICAgICAgICAvLyDqsr3qs7wg7Iuc6rCEIOqzhOyCsFxyXG4gICAgICAgICAgICBjb25zdCBlbGFwc2VkU2Vjb25kcyA9IE1hdGguZmxvb3IoKERhdGUubm93KCkgLSBzdGFydFRpbWUpIC8gMTAwMCk7XHJcbiAgICAgICAgICAgIHRoaXMudG90YWxTZWNvbmRzID0gaW5pdGlhbFRvdGFsU2Vjb25kcyAtIGVsYXBzZWRTZWNvbmRzO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgKHRoaXMudG90YWxTZWNvbmRzIDw9IDApIHtcclxuICAgICAgICAgICAgICAgIC8vIO2YhOyerCDri6jqs4Qg7JmE66OMXHJcbiAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKHRoaXMudGltZXIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy50aW1lciA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9oYW5kbGVNb2RlQ29tcGxldGUoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgdGhpcy5fdXBkYXRlVGltZXJEaXNwbGF5KCk7XHJcbiAgICAgICAgfSwgMTAwKTsgLy8g642UIOu2gOuTnOufrOyatCDsl4XrjbDsnbTtirjrpbwg7JyE7ZW0IDEwMG1zIOqwhOqyqeycvOuhnCDshKTsoJVcclxuICAgIH1cclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiDrqqjrk5wg7JmE66OMIOyymOumrFxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgX2hhbmRsZU1vZGVDb21wbGV0ZSgpIHtcclxuICAgICAgICBsZXQgbmV4dE1vZGU7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudE1vZGUgPT09ICd3b3JrJykge1xyXG4gICAgICAgICAgICAvLyDsnpHsl4Ug7IS47IWYIOyZhOujjCDsvZzrsLEg7Zi47LacXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5vbldvcmtTZXNzaW9uQ29tcGxldGUgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub25Xb3JrU2Vzc2lvbkNvbXBsZXRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIO2VnCDsgqzsnbTtgbTsnYAgKOyekeyXhSArIO2ctOyLnSnsnYQg7J2Y66+4XHJcbiAgICAgICAgICAgIC8vIOyekeyXheydhCDsmYTro4ztlZjrqbQg7Zy07Iud7Jy866GcIOyghO2ZmO2VmOq4sCDsoITsl5Ag7IKs7J207YG0IOy5tOyatO2KuOulvCDspp3qsIDsi5ztgqTsp4Ag7JWK7J2MXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyDri6TsnYwg7IS47IWY7J20IOynp+ydgCDtnLTsi53snbjsp4Ag6ri0IO2ctOyLneyduOyngCDqsrDsoJVcclxuICAgICAgICAgICAgaWYgKCh0aGlzLmN1cnJlbnRDeWNsZSArIDEpICUgdGhpcy5zZXR0aW5ncy50b3RhbEN5Y2xlcyA9PT0gMCAmJiB0aGlzLmN1cnJlbnRDeWNsZSA+IDApIHtcclxuICAgICAgICAgICAgICAgIC8vIOq4tCDtnLTsi50g7Iuc6rCEXHJcbiAgICAgICAgICAgICAgICBuZXh0TW9kZSA9ICdsb25nQnJlYWsnO1xyXG4gICAgICAgICAgICAgICAgdGhpcy50b3RhbFNlY29uZHMgPSB0aGlzLnNldHRpbmdzLmxvbmdCcmVha01pbnV0ZXMgKiA2MDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIOynp+ydgCDtnLTsi50g7Iuc6rCEXHJcbiAgICAgICAgICAgICAgICBuZXh0TW9kZSA9ICdzaG9ydEJyZWFrJztcclxuICAgICAgICAgICAgICAgIHRoaXMudG90YWxTZWNvbmRzID0gdGhpcy5zZXR0aW5ncy5zaG9ydEJyZWFrTWludXRlcyAqIDYwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8g7Zy07IudIOuLqOqzhCDsmYTro4wg7IucXHJcbiAgICAgICAgICAgIC8vIO2ctOyLnSDsmYTro4wg7ZuEIOyCrOydtO2BtCDsubTsmrTtirgg7Kad6rCAICjtlZwg7IKs7J207YG0IOyZhOujjClcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50Q3ljbGUrKztcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIOuqqOuToCDsgqzsnbTtgbQg7JmE66OMIO2ZleyduFxyXG4gICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50Q3ljbGUgPj0gdGhpcy5zZXR0aW5ncy50b3RhbEN5Y2xlcykge1xyXG4gICAgICAgICAgICAgICAgLy8g66qo65OgIOyCrOydtO2BtCDsmYTro4xcclxuICAgICAgICAgICAgICAgIHRoaXMuaXNBY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudE1vZGUgPSAnd29yayc7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRvdGFsU2Vjb25kcyA9IHRoaXMuc2V0dGluZ3Mud29ya01pbnV0ZXMgKiA2MDtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy8g7JmE66OMIOy9nOuwsSDtmLjstpxcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5vbkNvbXBsZXRlID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkNvbXBsZXRlKHRoaXMuY3VycmVudEN5Y2xlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy8g7ZGc7IucIOyXheuNsOydtO2KuCDrsI8g7KKF66OMXHJcbiAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVUaW1lckRpc3BsYXkoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8g64uk7J2MIOyekeyXhSDri6jqs4TroZxcclxuICAgICAgICAgICAgbmV4dE1vZGUgPSAnd29yayc7XHJcbiAgICAgICAgICAgIHRoaXMudG90YWxTZWNvbmRzID0gdGhpcy5zZXR0aW5ncy53b3JrTWludXRlcyAqIDYwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAvLyDrqqjrk5wg7KCE7ZmYIOy9nOuwsSDtmLjstpxcclxuICAgICAgICBpZiAodHlwZW9mIHRoaXMub25Nb2RlQ2hhbmdlID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIHRoaXMub25Nb2RlQ2hhbmdlKG5leHRNb2RlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8g64uk7J2MIOuqqOuTnOuhnCDsoITtmZhcclxuICAgICAgICB0aGlzLmN1cnJlbnRNb2RlID0gbmV4dE1vZGU7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8g7YOA7J2066i4IO2RnOyLnCDsl4XrjbDsnbTtirhcclxuICAgICAgICB0aGlzLl91cGRhdGVUaW1lckRpc3BsYXkoKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyDri6TsnYwg64uo6rOEIOyekOuPmSDsi5zsnpFcclxuICAgICAgICB0aGlzLl9zdGFydENvdW50ZG93bigpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqIO2DgOydtOuouCDtkZzsi5wg7JeF642w7J207Yq4XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBfdXBkYXRlVGltZXJEaXNwbGF5KCkge1xyXG4gICAgICAgIC8vIOu2hCwg7LSIIOqzhOyCsFxyXG4gICAgICAgIGNvbnN0IG1pbnV0ZXMgPSBNYXRoLmZsb29yKHRoaXMudG90YWxTZWNvbmRzIC8gNjApO1xyXG4gICAgICAgIGNvbnN0IHNlY29uZHMgPSB0aGlzLnRvdGFsU2Vjb25kcyAlIDYwO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIOyXheuNsOydtO2KuCDsvZzrsLEg7Zi47LacXHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm9uVXBkYXRlID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIHRoaXMub25VcGRhdGUobWludXRlcywgc2Vjb25kcywgdGhpcy5jdXJyZW50Q3ljbGUsIHRoaXMuc2V0dGluZ3MudG90YWxDeWNsZXMsIHRoaXMuY3VycmVudE1vZGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSAiLCIvKipcclxuICog6rCA7IOBIOyLneusvCDsi5zsiqTthZwg7YG0656Y7IqkXHJcbiAqIOyLneusvCDshLHsnqUg67CPIOq0gOumrCDquLDriqXsnYQg7KCc6rO17ZWp64uI64ukLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFBsYW50U3lzdGVtIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIC8vIO2YhOyerCDsi53rrLwg7IOB7YOcXHJcbiAgICAgICAgdGhpcy5jdXJyZW50UGxhbnQgPSB7XHJcbiAgICAgICAgICAgIGlkOiAnc3Byb3V0JyxcclxuICAgICAgICAgICAgbmFtZTogJ+yDiOyLuScsXHJcbiAgICAgICAgICAgIGxldmVsOiAwLFxyXG4gICAgICAgICAgICBleHBlcmllbmNlOiAwLFxyXG4gICAgICAgICAgICBtYXhFeHBlcmllbmNlOiAxMDAsXHJcbiAgICAgICAgICAgIHN0YWdlOiAwLFxyXG4gICAgICAgICAgICBtYXhTdGFnZTogNVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8g7YWM66eI67OEIOyLneusvCDsoJXrs7RcclxuICAgICAgICB0aGlzLnBsYW50VGhlbWVzID0ge1xyXG4gICAgICAgICAgICBpbmRvb3I6IFtcclxuICAgICAgICAgICAgICAgIHsgaWQ6ICdwb3Rob3MnLCBuYW1lOiAn7Iqk7YKo64u17ISc7IqkJywgc3RhZ2VzOiA1LCByZXF1aXJlZExldmVsOiAwIH0sXHJcbiAgICAgICAgICAgICAgICB7IGlkOiAnY2FjdHVzJywgbmFtZTogJ+yEoOyduOyepScsIHN0YWdlczogNSwgcmVxdWlyZWRMZXZlbDogMyB9LFxyXG4gICAgICAgICAgICAgICAgeyBpZDogJ2ZpY3VzJywgbmFtZTogJ+qzoOustOuCmOustCcsIHN0YWdlczogNSwgcmVxdWlyZWRMZXZlbDogNSB9LFxyXG4gICAgICAgICAgICAgICAgeyBpZDogJ21vbmV5UGxhbnQnLCBuYW1lOiAn7ZaJ7Jq066qpJywgc3RhZ2VzOiA1LCByZXF1aXJlZExldmVsOiA4IH0sXHJcbiAgICAgICAgICAgICAgICB7IGlkOiAnb3JjaGlkJywgbmFtZTogJ+yEnOyWkeuegCcsIHN0YWdlczogNSwgcmVxdWlyZWRMZXZlbDogMTIgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBnYXJkZW46IFtcclxuICAgICAgICAgICAgICAgIHsgaWQ6ICd0dWxpcCcsIG5hbWU6ICftiqTrpr0nLCBzdGFnZXM6IDUsIHJlcXVpcmVkTGV2ZWw6IDAgfSxcclxuICAgICAgICAgICAgICAgIHsgaWQ6ICdyb3NlJywgbmFtZTogJ+yepeuvuCcsIHN0YWdlczogNSwgcmVxdWlyZWRMZXZlbDogMyB9LFxyXG4gICAgICAgICAgICAgICAgeyBpZDogJ3N1bmZsb3dlcicsIG5hbWU6ICftlbTrsJTrnbzquLAnLCBzdGFnZXM6IDUsIHJlcXVpcmVkTGV2ZWw6IDUgfSxcclxuICAgICAgICAgICAgICAgIHsgaWQ6ICdsYXZlbmRlcicsIG5hbWU6ICfrnbzrsqTrjZQnLCBzdGFnZXM6IDUsIHJlcXVpcmVkTGV2ZWw6IDggfSxcclxuICAgICAgICAgICAgICAgIHsgaWQ6ICdkYWlzeScsIG5hbWU6ICfrjbDsnbTsp4AnLCBzdGFnZXM6IDUsIHJlcXVpcmVkTGV2ZWw6IDEyIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgdHJvcGljYWw6IFtcclxuICAgICAgICAgICAgICAgIHsgaWQ6ICdtb25zdGVyYScsIG5hbWU6ICfrqqzsiqTthYzrnbwnLCBzdGFnZXM6IDUsIHJlcXVpcmVkTGV2ZWw6IDAgfSxcclxuICAgICAgICAgICAgICAgIHsgaWQ6ICdwYWxtVHJlZScsIG5hbWU6ICfslbzsnpDsiJgnLCBzdGFnZXM6IDUsIHJlcXVpcmVkTGV2ZWw6IDMgfSxcclxuICAgICAgICAgICAgICAgIHsgaWQ6ICdiaXJkT2ZQYXJhZGlzZScsIG5hbWU6ICfqt7nrnb3sobAnLCBzdGFnZXM6IDUsIHJlcXVpcmVkTGV2ZWw6IDUgfSxcclxuICAgICAgICAgICAgICAgIHsgaWQ6ICdhbnRodXJpdW0nLCBuYW1lOiAn7JWI7Iqk66as7JuAJywgc3RhZ2VzOiA1LCByZXF1aXJlZExldmVsOiA4IH0sXHJcbiAgICAgICAgICAgICAgICB7IGlkOiAnaHliaXNjdXMnLCBuYW1lOiAn7Z6I67mE7Iqk7Luk7IqkJywgc3RhZ2VzOiA1LCByZXF1aXJlZExldmVsOiAxMiB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIHN1Y2N1bGVudDogW1xyXG4gICAgICAgICAgICAgICAgeyBpZDogJ2VjaGV2ZXJpYScsIG5hbWU6ICfsl5DsvIDrsqDrpqzslYQnLCBzdGFnZXM6IDUsIHJlcXVpcmVkTGV2ZWw6IDAgfSxcclxuICAgICAgICAgICAgICAgIHsgaWQ6ICdhbG9lJywgbmFtZTogJ+yVjOuhnOyXkCcsIHN0YWdlczogNSwgcmVxdWlyZWRMZXZlbDogMyB9LFxyXG4gICAgICAgICAgICAgICAgeyBpZDogJ2hhd29ydGhpYScsIG5hbWU6ICftlZjsm5Tsi5zslYQnLCBzdGFnZXM6IDUsIHJlcXVpcmVkTGV2ZWw6IDUgfSxcclxuICAgICAgICAgICAgICAgIHsgaWQ6ICdqYWRlUGxhbnQnLCBuYW1lOiAn6riI7KCE7IiYJywgc3RhZ2VzOiA1LCByZXF1aXJlZExldmVsOiA4IH0sXHJcbiAgICAgICAgICAgICAgICB7IGlkOiAnYnVycm9zVGFpbCcsIG5hbWU6ICfri6zqvKzrpqwnLCBzdGFnZXM6IDUsIHJlcXVpcmVkTGV2ZWw6IDEyIH1cclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8g7IKs7Jqp7J6QIOy7rOugieyFmFxyXG4gICAgICAgIHRoaXMuY29sbGVjdGlvbiA9IHt9O1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIO2YhOyerCDthYzrp4hcclxuICAgICAgICB0aGlzLmN1cnJlbnRUaGVtZSA9ICdpbmRvb3InO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqIOyLneusvCDsi5zsiqTthZwg7LSI6riw7ZmUXHJcbiAgICAgKi9cclxuICAgIGluaXRpYWxpemUoKSB7XHJcbiAgICAgICAgLy8g66Gc7LusIOyKpO2GoOumrOyngOyXkOyEnCDsoIDsnqXrkJwg642w7J207YSwIOuhnOuTnFxyXG4gICAgICAgIHRoaXMuX2xvYWREYXRhKCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gVUkg7JeF642w7J207Yq4XHJcbiAgICAgICAgdGhpcy5fdXBkYXRlUGxhbnREaXNwbGF5KCk7XHJcbiAgICAgICAgdGhpcy5fdXBkYXRlUGxhbnRJbmZvKCk7XHJcbiAgICAgICAgdGhpcy5fdXBkYXRlQ29sbGVjdGlvbigpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqIOyLneusvCDthYzrp4gg7ISk7KCVXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGhlbWUgLSDthYzrp4ggKGluZG9vciwgZ2FyZGVuLCB0cm9waWNhbCwgc3VjY3VsZW50KVxyXG4gICAgICovXHJcbiAgICBzZXRUaGVtZSh0aGVtZSkge1xyXG4gICAgICAgIGlmICghdGhpcy5wbGFudFRoZW1lc1t0aGVtZV0pIHJldHVybjtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLmN1cnJlbnRUaGVtZSA9IHRoZW1lO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIO2FjOuniCDrs4Dqsr0g7IucIFVJIOyXheuNsOydtO2KuFxyXG4gICAgICAgIHRoaXMuX3VwZGF0ZUNvbGxlY3Rpb24oKTtcclxuICAgICAgICB0aGlzLl9zYXZlRGF0YSgpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqIOqyve2XmOy5mCDstpTqsIBcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBleHAgLSDstpTqsIDtlaAg6rK97ZeY7LmYXHJcbiAgICAgKi9cclxuICAgIGFkZEV4cGVyaWVuY2UoZXhwKSB7XHJcbiAgICAgICAgaWYgKGV4cCA8PSAwKSByZXR1cm47XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5jdXJyZW50UGxhbnQuZXhwZXJpZW5jZSArPSBleHA7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8g66CI67Ko7JeFIOyytO2BrFxyXG4gICAgICAgIHdoaWxlICh0aGlzLmN1cnJlbnRQbGFudC5leHBlcmllbmNlID49IHRoaXMuY3VycmVudFBsYW50Lm1heEV4cGVyaWVuY2UpIHtcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50UGxhbnQuZXhwZXJpZW5jZSAtPSB0aGlzLmN1cnJlbnRQbGFudC5tYXhFeHBlcmllbmNlO1xyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRQbGFudC5sZXZlbCsrO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8g7IOIIOyLneusvCDsnqDquIgg7ZW07KCcIO2ZleyduFxyXG4gICAgICAgICAgICB0aGlzLl9jaGVja1VubG9ja3MoKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIOy1nOuMgCDqsr3tl5jsuZgg7Kad6rCAICjroIjrsqjsl5Ag65Sw6528KVxyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRQbGFudC5tYXhFeHBlcmllbmNlID0gMTAwICsgKHRoaXMuY3VycmVudFBsYW50LmxldmVsICogMjApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAvLyDshLHsnqUg64uo6rOEIOqzhOyCsFxyXG4gICAgICAgIHRoaXMuX2NhbGN1bGF0ZVN0YWdlKCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gVUkg7JeF642w7J207Yq4XHJcbiAgICAgICAgdGhpcy5fdXBkYXRlUGxhbnREaXNwbGF5KCk7XHJcbiAgICAgICAgdGhpcy5fdXBkYXRlUGxhbnRJbmZvKCk7XHJcbiAgICAgICAgdGhpcy5fdXBkYXRlQ29sbGVjdGlvbigpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIOuNsOydtO2EsCDsoIDsnqVcclxuICAgICAgICB0aGlzLl9zYXZlRGF0YSgpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqIOyLneusvCDrs4Dqsr1cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwbGFudElkIC0g7Iud66y8IElEXHJcbiAgICAgKi9cclxuICAgIGNoYW5nZVBsYW50KHBsYW50SWQpIHtcclxuICAgICAgICAvLyDsu6zroInshZjsl5Ag7J6I64qUIOyLneusvOyduOyngCDtmZXsnbhcclxuICAgICAgICBpZiAoIXRoaXMuY29sbGVjdGlvbltwbGFudElkXSkgcmV0dXJuO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IHRoZW1lS2V5ID0gdGhpcy5fZmluZFBsYW50VGhlbWUocGxhbnRJZCk7XHJcbiAgICAgICAgaWYgKCF0aGVtZUtleSkgcmV0dXJuO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IHBsYW50SW5mbyA9IHRoaXMucGxhbnRUaGVtZXNbdGhlbWVLZXldLmZpbmQocCA9PiBwLmlkID09PSBwbGFudElkKTtcclxuICAgICAgICBpZiAoIXBsYW50SW5mbykgcmV0dXJuO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIO2YhOyerCDsi53rrLwg7JeF642w7J207Yq4XHJcbiAgICAgICAgdGhpcy5jdXJyZW50UGxhbnQuaWQgPSBwbGFudElkO1xyXG4gICAgICAgIHRoaXMuY3VycmVudFBsYW50Lm5hbWUgPSBwbGFudEluZm8ubmFtZTtcclxuICAgICAgICB0aGlzLmN1cnJlbnRQbGFudC5tYXhTdGFnZSA9IHBsYW50SW5mby5zdGFnZXM7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8g7ISx7J6lIOuLqOqzhCDsnqzqs4TsgrBcclxuICAgICAgICB0aGlzLl9jYWxjdWxhdGVTdGFnZSgpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFVJIOyXheuNsOydtO2KuFxyXG4gICAgICAgIHRoaXMuX3VwZGF0ZVBsYW50RGlzcGxheSgpO1xyXG4gICAgICAgIHRoaXMuX3VwZGF0ZVBsYW50SW5mbygpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIOuNsOydtO2EsCDsoIDsnqVcclxuICAgICAgICB0aGlzLl9zYXZlRGF0YSgpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqIOyEseyepSDri6jqs4Qg6rOE7IKwXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBfY2FsY3VsYXRlU3RhZ2UoKSB7XHJcbiAgICAgICAgLy8g66CI67Ko7JeQIOuUsOuluCDshLHsnqUg64uo6rOEIOqzhOyCsCAoMOu2gO2EsCBtYXhTdGFnZeq5jOyngClcclxuICAgICAgICBjb25zdCBsZXZlbFBlclN0YWdlID0gMzsgLy8gM+ugiOuyqOuniOuLpCDshLHsnqVcclxuICAgICAgICBjb25zdCBjYWxjdWxhdGVkU3RhZ2UgPSBNYXRoLm1pbihcclxuICAgICAgICAgICAgTWF0aC5mbG9vcih0aGlzLmN1cnJlbnRQbGFudC5sZXZlbCAvIGxldmVsUGVyU3RhZ2UpLFxyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRQbGFudC5tYXhTdGFnZVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5jdXJyZW50UGxhbnQuc3RhZ2UgPSBjYWxjdWxhdGVkU3RhZ2U7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8qKlxyXG4gICAgICog7IOIIOyLneusvCDsnqDquIgg7ZW07KCcIO2ZleyduFxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgX2NoZWNrVW5sb2NrcygpIHtcclxuICAgICAgICBPYmplY3Qua2V5cyh0aGlzLnBsYW50VGhlbWVzKS5mb3JFYWNoKHRoZW1lID0+IHtcclxuICAgICAgICAgICAgdGhpcy5wbGFudFRoZW1lc1t0aGVtZV0uZm9yRWFjaChwbGFudCA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50UGxhbnQubGV2ZWwgPj0gcGxhbnQucmVxdWlyZWRMZXZlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIOy7rOugieyFmOyXkCDstpTqsIBcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbGxlY3Rpb25bcGxhbnQuaWRdID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogcGxhbnQuaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHBsYW50Lm5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoZW1lOiB0aGVtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdW5sb2NrZWQ6IHRydWVcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiDsi53rrLzsnbQg7IaN7ZWcIO2FjOuniCDssL7quLBcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwbGFudElkIC0g7Iud66y8IElEXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfG51bGx9IC0g7YWM66eIIO2CpFxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgX2ZpbmRQbGFudFRoZW1lKHBsYW50SWQpIHtcclxuICAgICAgICBmb3IgKGNvbnN0IHRoZW1lIGluIHRoaXMucGxhbnRUaGVtZXMpIHtcclxuICAgICAgICAgICAgY29uc3QgZm91bmQgPSB0aGlzLnBsYW50VGhlbWVzW3RoZW1lXS5maW5kKHAgPT4gcC5pZCA9PT0gcGxhbnRJZCk7XHJcbiAgICAgICAgICAgIGlmIChmb3VuZCkgcmV0dXJuIHRoZW1lO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiDsi53rrLwg7ZGc7IucIOyXheuNsOydtO2KuFxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgX3VwZGF0ZVBsYW50RGlzcGxheSgpIHtcclxuICAgICAgICBjb25zdCBwbGFudEltYWdlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BsYW50LWltYWdlJyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8g66qo65OgIOyEseyepSDri6jqs4Qg7YG0656Y7IqkIOygnOqxsFxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDw9IHRoaXMuY3VycmVudFBsYW50Lm1heFN0YWdlOyBpKyspIHtcclxuICAgICAgICAgICAgcGxhbnRJbWFnZS5xdWVyeVNlbGVjdG9yKCcucGxhbnQtZ3Jvd3RoJykuY2xhc3NMaXN0LnJlbW92ZShgcGxhbnQtc3RhZ2UtJHtpfWApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAvLyDtmITsnqwg7ISx7J6lIOuLqOqzhCDtgbTrnpjsiqQg7LaU6rCAXHJcbiAgICAgICAgcGxhbnRJbWFnZS5xdWVyeVNlbGVjdG9yKCcucGxhbnQtZ3Jvd3RoJykuY2xhc3NMaXN0LmFkZChgcGxhbnQtc3RhZ2UtJHt0aGlzLmN1cnJlbnRQbGFudC5zdGFnZX1gKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiDsi53rrLwg7KCV67O0IOyXheuNsOydtO2KuFxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgX3VwZGF0ZVBsYW50SW5mbygpIHtcclxuICAgICAgICBjb25zdCBwbGFudE5hbWUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGxhbnQtbmFtZScpO1xyXG4gICAgICAgIGNvbnN0IHBsYW50TGV2ZWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGxhbnQtbGV2ZWwnKTtcclxuICAgICAgICBjb25zdCBwbGFudEV4cCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwbGFudC1leHAnKTtcclxuICAgICAgICBjb25zdCBwbGFudEV4cFByb2dyZXNzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BsYW50LWV4cC1wcm9ncmVzcycpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHBsYW50TmFtZS50ZXh0Q29udGVudCA9IHRoaXMuY3VycmVudFBsYW50Lm5hbWU7XHJcbiAgICAgICAgcGxhbnRMZXZlbC50ZXh0Q29udGVudCA9IGDroIjrsqg6ICR7dGhpcy5jdXJyZW50UGxhbnQubGV2ZWx9YDtcclxuICAgICAgICBwbGFudEV4cC50ZXh0Q29udGVudCA9IGDqsr3tl5jsuZg6ICR7dGhpcy5jdXJyZW50UGxhbnQuZXhwZXJpZW5jZX0gLyAke3RoaXMuY3VycmVudFBsYW50Lm1heEV4cGVyaWVuY2V9YDtcclxuICAgICAgICBcclxuICAgICAgICAvLyDqsr3tl5jsuZgg67CUIOyXheuNsOydtO2KuFxyXG4gICAgICAgIGNvbnN0IGV4cFBlcmNlbnRhZ2UgPSAodGhpcy5jdXJyZW50UGxhbnQuZXhwZXJpZW5jZSAvIHRoaXMuY3VycmVudFBsYW50Lm1heEV4cGVyaWVuY2UpICogMTAwO1xyXG4gICAgICAgIHBsYW50RXhwUHJvZ3Jlc3Muc3R5bGUud2lkdGggPSBgJHtleHBQZXJjZW50YWdlfSVgO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqIOy7rOugieyFmCDsl4XrjbDsnbTtirhcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIF91cGRhdGVDb2xsZWN0aW9uKCkge1xyXG4gICAgICAgIGNvbnN0IGNvbGxlY3Rpb25HcmlkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BsYW50LWNvbGxlY3Rpb24tZ3JpZCcpO1xyXG4gICAgICAgIGNvbGxlY3Rpb25HcmlkLmlubmVySFRNTCA9ICcnO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIO2YhOyerCDthYzrp4jsnZgg7Iud66y866eMIO2RnOyLnFxyXG4gICAgICAgIHRoaXMucGxhbnRUaGVtZXNbdGhpcy5jdXJyZW50VGhlbWVdLmZvckVhY2gocGxhbnQgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBpc1VubG9ja2VkID0gdGhpcy5jb2xsZWN0aW9uW3BsYW50LmlkXT8udW5sb2NrZWQgfHwgZmFsc2U7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBjb25zdCBwbGFudEl0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgcGxhbnRJdGVtLmNsYXNzTmFtZSA9IGBwbGFudC1pdGVtICR7aXNVbmxvY2tlZCA/ICcnIDogJ2xvY2tlZCd9YDtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIOyeoOq4iCDtlbTsoJzrkJwg7Iud66y866eMIO2BtOumrSDqsIDriqVcclxuICAgICAgICAgICAgaWYgKGlzVW5sb2NrZWQpIHtcclxuICAgICAgICAgICAgICAgIHBsYW50SXRlbS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHRoaXMuY2hhbmdlUGxhbnQocGxhbnQuaWQpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8g7ZiE7J6sIOyEoO2DneuQnCDsi53rrLwg7ZGc7IucXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRQbGFudC5pZCA9PT0gcGxhbnQuaWQpIHtcclxuICAgICAgICAgICAgICAgIHBsYW50SXRlbS5jbGFzc0xpc3QuYWRkKCdzZWxlY3RlZCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBwbGFudEl0ZW0uaW5uZXJIVE1MID0gYFxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInBsYW50LWl0ZW0taW1hZ2VcIj5cclxuICAgICAgICAgICAgICAgICAgICAke2lzVW5sb2NrZWQgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gYDxkaXYgY2xhc3M9XCJwbGFudC1pY29uICR7cGxhbnQuaWR9XCI+PC9kaXY+YCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgOiAnPGRpdiBjbGFzcz1cInBsYW50LWljb24gbG9ja2VkXCI+PGkgY2xhc3M9XCJmYXMgZmEtbG9ja1wiPjwvaT48L2Rpdj4nXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8cD4ke2lzVW5sb2NrZWQgPyBwbGFudC5uYW1lIDogJz8/Pyd9PC9wPlxyXG4gICAgICAgICAgICAgICAgJHshaXNVbmxvY2tlZCA/IGA8c21hbGw+66CI67KoICR7cGxhbnQucmVxdWlyZWRMZXZlbH0g7ZWE7JqUPC9zbWFsbD5gIDogJyd9XHJcbiAgICAgICAgICAgIGA7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBjb2xsZWN0aW9uR3JpZC5hcHBlbmRDaGlsZChwbGFudEl0ZW0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqIOuNsOydtO2EsCDsoIDsnqVcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIF9zYXZlRGF0YSgpIHtcclxuICAgICAgICBjb25zdCBkYXRhID0ge1xyXG4gICAgICAgICAgICBjdXJyZW50UGxhbnQ6IHRoaXMuY3VycmVudFBsYW50LFxyXG4gICAgICAgICAgICBjb2xsZWN0aW9uOiB0aGlzLmNvbGxlY3Rpb24sXHJcbiAgICAgICAgICAgIGN1cnJlbnRUaGVtZTogdGhpcy5jdXJyZW50VGhlbWVcclxuICAgICAgICB9O1xyXG4gICAgICAgIFxyXG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdwbGFudFN5c3RlbScsIEpTT04uc3RyaW5naWZ5KGRhdGEpKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiDrjbDsnbTthLAg66Gc65OcXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBfbG9hZERhdGEoKSB7XHJcbiAgICAgICAgY29uc3Qgc2F2ZWREYXRhID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3BsYW50U3lzdGVtJyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKHNhdmVkRGF0YSkge1xyXG4gICAgICAgICAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZShzYXZlZERhdGEpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50UGxhbnQgPSBkYXRhLmN1cnJlbnRQbGFudDtcclxuICAgICAgICAgICAgdGhpcy5jb2xsZWN0aW9uID0gZGF0YS5jb2xsZWN0aW9uO1xyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRUaGVtZSA9IGRhdGEuY3VycmVudFRoZW1lIHx8ICdpbmRvb3InO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIOy0iOq4sCDsi53rrLwg7J6g6riIIO2VtOygnFxyXG4gICAgICAgICAgICBjb25zdCBpbml0aWFsUGxhbnQgPSB0aGlzLnBsYW50VGhlbWVzW3RoaXMuY3VycmVudFRoZW1lXVswXTtcclxuICAgICAgICAgICAgdGhpcy5jb2xsZWN0aW9uW2luaXRpYWxQbGFudC5pZF0gPSB7XHJcbiAgICAgICAgICAgICAgICBpZDogaW5pdGlhbFBsYW50LmlkLFxyXG4gICAgICAgICAgICAgICAgbmFtZTogaW5pdGlhbFBsYW50Lm5hbWUsXHJcbiAgICAgICAgICAgICAgICB0aGVtZTogdGhpcy5jdXJyZW50VGhlbWUsXHJcbiAgICAgICAgICAgICAgICB1bmxvY2tlZDogdHJ1ZVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50UGxhbnQuaWQgPSBpbml0aWFsUGxhbnQuaWQ7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFBsYW50Lm5hbWUgPSBpbml0aWFsUGxhbnQubmFtZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0gIiwiLyoqXG4gKiDslYzrprwg6rSA66asIO2BtOuemOyKpFxuICog7YOA7J2066i4IOyVjOumvCDrsI8g7IaM66asIOyerOyDnSDquLDriqXsnYQg7KCc6rO17ZWp64uI64ukLlxuICovXG5leHBvcnQgY2xhc3MgTm90aWZpY2F0aW9uTWFuYWdlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuc291bmQgPSAnYmVsbCc7IC8vIOq4sOuzuCDshozrpqxcbiAgICAgICAgdGhpcy52b2x1bWUgPSAwLjg7IC8vIOq4sOuzuCDrs7zrpaggKDAuMCB+IDEuMClcbiAgICAgICAgdGhpcy5iYWNrZ3JvdW5kTm90aWZpY2F0aW9uID0gdHJ1ZTsgLy8g67Cx6re465287Jq065OcIOyVjOumvCDtmZzshLHtmZQg7Jes67aAXG4gICAgICAgIFxuICAgICAgICAvLyDsm7kg7JWM66a8IOq2jO2VnCDsmpTssq1cbiAgICAgICAgdGhpcy5fcmVxdWVzdE5vdGlmaWNhdGlvblBlcm1pc3Npb24oKTtcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICog7JWM66a8IOyGjOumrCDshKTsoJVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc291bmROYW1lIC0g7IaM66asIOydtOumhCAoJ2JlbGwnLCAnZGlnaXRhbCcsICduYXR1cmUnLCAnbm9uZScpXG4gICAgICovXG4gICAgc2V0U291bmQoc291bmROYW1lKSB7XG4gICAgICAgIGlmIChbJ2JlbGwnLCAnZGlnaXRhbCcsICduYXR1cmUnLCAnbm9uZSddLmluY2x1ZGVzKHNvdW5kTmFtZSkpIHtcbiAgICAgICAgICAgIHRoaXMuc291bmQgPSBzb3VuZE5hbWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICog7JWM66a8IOuzvOulqCDshKTsoJVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdm9sdW1lIC0g67O866WoICgwLjAgfiAxLjApXG4gICAgICovXG4gICAgc2V0Vm9sdW1lKHZvbHVtZSkge1xuICAgICAgICBpZiAodm9sdW1lID49IDAgJiYgdm9sdW1lIDw9IDEpIHtcbiAgICAgICAgICAgIHRoaXMudm9sdW1lID0gdm9sdW1lO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIOuwseq3uOudvOyatOuTnCDslYzrprwg7ISk7KCVXG4gICAgICogQHBhcmFtIHtib29sZWFufSBlbmFibGUgLSDtmZzshLHtmZQg7Jes67aAXG4gICAgICovXG4gICAgc2V0QmFja2dyb3VuZE5vdGlmaWNhdGlvbihlbmFibGUpIHtcbiAgICAgICAgdGhpcy5iYWNrZ3JvdW5kTm90aWZpY2F0aW9uID0gZW5hYmxlO1xuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiDslYzrprwg7J6s7IOdXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRpdGxlIC0g7JWM66a8IOygnOuqqVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIC0g7JWM66a8IOuplOyLnOyngFxuICAgICAqL1xuICAgIHBsYXlOb3RpZmljYXRpb24odGl0bGUsIG1lc3NhZ2UpIHtcbiAgICAgICAgLy8g7IaM66asIOyerOyDnVxuICAgICAgICB0aGlzLl9wbGF5U291bmQoKTtcbiAgICAgICAgXG4gICAgICAgIC8vIOybuSDslYzrprwg7ZGc7IucICjrsLHqt7jrnbzsmrTrk5wg7JWM66a87J20IO2ZnOyEse2ZlOuQmOyWtCDsnojqs6Ag6raM7ZWc7J20IOyeiOuKlCDqsr3smrApXG4gICAgICAgIGlmICh0aGlzLmJhY2tncm91bmROb3RpZmljYXRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuX3Nob3dOb3RpZmljYXRpb24odGl0bGUsIG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIOyGjOumrCDsnqzsg51cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9wbGF5U291bmQoKSB7XG4gICAgICAgIGlmICh0aGlzLnNvdW5kID09PSAnbm9uZScpIHJldHVybjtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGF1ZGlvRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGAke3RoaXMuc291bmR9LXNvdW5kYCk7XG4gICAgICAgIGlmIChhdWRpb0VsZW1lbnQpIHtcbiAgICAgICAgICAgIGF1ZGlvRWxlbWVudC52b2x1bWUgPSB0aGlzLnZvbHVtZTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8g7J6s7IOdIOykkeyduCDqsr3smrAg64uk7IucIOyLnOyekVxuICAgICAgICAgICAgYXVkaW9FbGVtZW50LnBhdXNlKCk7XG4gICAgICAgICAgICBhdWRpb0VsZW1lbnQuY3VycmVudFRpbWUgPSAwO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyDshozrpqwg7J6s7IOdICjsnpDrj5kg7J6s7IOdIOygleyxheycvOuhnCDsnbjtlZwg7Jik66WYIOyymOumrClcbiAgICAgICAgICAgIGNvbnN0IHBsYXlQcm9taXNlID0gYXVkaW9FbGVtZW50LnBsYXkoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKHBsYXlQcm9taXNlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBwbGF5UHJvbWlzZS5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2Fybign7J6Q64+ZIOyerOyDneydtCDssKjri6jrkJjsl4jsirXri4jri6Q6JywgZXJyb3IpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIOybuSDslYzrprwg7ZGc7IucXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRpdGxlIC0g7JWM66a8IOygnOuqqVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIC0g7JWM66a8IOuplOyLnOyngFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3Nob3dOb3RpZmljYXRpb24odGl0bGUsIG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3QgaTE4biA9IHdpbmRvdy5GaWxlVG9RUiAmJiB3aW5kb3cuRmlsZVRvUVIuaTE4bjtcbiAgICAgICAgaWYgKCEoJ05vdGlmaWNhdGlvbicgaW4gd2luZG93KSkge1xuICAgICAgICAgICAgY29uc3Qgbm90U3VwcG9ydGVkTXNnID0gaTE4biAmJiB0eXBlb2YgaTE4bi50cmFuc2xhdGUgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICAgICA/IGkxOG4udHJhbnNsYXRlKCdlcnJvcnMubm90aWZpY2F0aW9uTm90U3VwcG9ydGVkJywge30sICfsnbQg67iM65287Jqw7KCA64qUIOyVjOumvOydhCDsp4Dsm5DtlZjsp4Ag7JWK7Iq164uI64ukLicpXG4gICAgICAgICAgICAgICAgOiAn7J20IOu4jOudvOyasOyggOuKlCDslYzrprzsnYQg7KeA7JuQ7ZWY7KeAIOyViuyKteuLiOuLpC4nO1xuICAgICAgICAgICAgY29uc29sZS53YXJuKG5vdFN1cHBvcnRlZE1zZyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKE5vdGlmaWNhdGlvbi5wZXJtaXNzaW9uID09PSAnZ3JhbnRlZCcpIHtcbiAgICAgICAgICAgIGNvbnN0IG5vdGlmaWNhdGlvbiA9IG5ldyBOb3RpZmljYXRpb24odGl0bGUsIHtcbiAgICAgICAgICAgICAgICBib2R5OiBtZXNzYWdlLFxuICAgICAgICAgICAgICAgIGljb246ICcvYXNzZXRzL2ltYWdlcy90aW1lci1pY29uLnBuZydcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbm90aWZpY2F0aW9uLm9uY2xpY2sgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgd2luZG93LmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uLmNsb3NlKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiBub3RpZmljYXRpb24uY2xvc2UoKSwgNTAwMCk7XG4gICAgICAgIH0gZWxzZSBpZiAoTm90aWZpY2F0aW9uLnBlcm1pc3Npb24gIT09ICdkZW5pZWQnKSB7XG4gICAgICAgICAgICB0aGlzLl9yZXF1ZXN0Tm90aWZpY2F0aW9uUGVybWlzc2lvbigpO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIOybuSDslYzrprwg6raM7ZWcIOyalOyyrVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3JlcXVlc3ROb3RpZmljYXRpb25QZXJtaXNzaW9uKCkge1xuICAgICAgICBjb25zdCBpMThuID0gd2luZG93LkZpbGVUb1FSICYmIHdpbmRvdy5GaWxlVG9RUi5pMThuO1xuICAgICAgICBpZiAoISgnTm90aWZpY2F0aW9uJyBpbiB3aW5kb3cpKSByZXR1cm47XG4gICAgICAgIGlmIChOb3RpZmljYXRpb24ucGVybWlzc2lvbiAhPT0gJ2dyYW50ZWQnICYmIE5vdGlmaWNhdGlvbi5wZXJtaXNzaW9uICE9PSAnZGVuaWVkJykge1xuICAgICAgICAgICAgTm90aWZpY2F0aW9uLnJlcXVlc3RQZXJtaXNzaW9uKClcbiAgICAgICAgICAgICAgICAudGhlbihwZXJtaXNzaW9uID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBlcm1pc3Npb24gPT09ICdncmFudGVkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZ3JhbnRlZE1zZyA9IGkxOG4gJiYgdHlwZW9mIGkxOG4udHJhbnNsYXRlID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBpMThuLnRyYW5zbGF0ZSgnbm90aWZpY2F0aW9uLnBlcm1pc3Npb25HcmFudGVkJywge30sICfslYzrprwg6raM7ZWc7J20IO2XiOyaqeuQmOyXiOyKteuLiOuLpC4nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogJ+yVjOumvCDqtoztlZzsnbQg7ZeI7Jqp65CY7JeI7Iq164uI64ukLic7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhncmFudGVkTXNnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXJyb3JNc2cgPSBpMThuICYmIHR5cGVvZiBpMThuLnRyYW5zbGF0ZSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICAgICAgICAgICAgPyBpMThuLnRyYW5zbGF0ZSgnZXJyb3JzLm5vdGlmaWNhdGlvblBlcm1pc3Npb25FcnJvcicsIHt9LCAn7JWM66a8IOq2jO2VnCDsmpTssq0g7KSRIOyYpOulmCDrsJzsg506JylcbiAgICAgICAgICAgICAgICAgICAgICAgIDogJ+yVjOumvCDqtoztlZwg7JqU7LKtIOykkSDsmKTrpZgg67Cc7IOdOic7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3JNc2csIGVycm9yKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbn0gIiwiLy8g7YOA7J2066i4IOq0gOugqCDrqqjrk4gg67aI65+s7Jik6riwXHJcbmltcG9ydCB7IFRpbWVyIH0gZnJvbSAnLi4vY29yZS9UaW1lci5qcyc7XHJcbmltcG9ydCB7IFN0b3B3YXRjaCB9IGZyb20gJy4uL2NvcmUvU3RvcHdhdGNoLmpzJztcclxuaW1wb3J0IHsgUG9tb2Rvcm8gfSBmcm9tICcuLi9jb3JlL1BvbW9kb3JvLmpzJztcclxuaW1wb3J0IHsgUGxhbnRTeXN0ZW0gfSBmcm9tICcuLi9jb3JlL1BsYW50U3lzdGVtLmpzJztcclxuaW1wb3J0IHsgTm90aWZpY2F0aW9uTWFuYWdlciB9IGZyb20gJy4uL3V0aWxzL05vdGlmaWNhdGlvbk1hbmFnZXIuanMnO1xyXG5cclxuLy8g7KCE7JetIOuzgOyImFxyXG5sZXQgdGltZXJzID0gbmV3IE1hcCgpO1xyXG5sZXQgdGltZXJJZENvdW50ZXIgPSAxO1xyXG5sZXQgbm90aWZpY2F0aW9uTWFuYWdlcjtcclxuXHJcbi8vIERPTSDsmpTshoxcclxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IHtcclxuICAgIGNvbnNvbGUubG9nKCftg4DsnbTrqLgg7Y6Y7J207KeAIOy0iOq4sO2ZlCcpO1xyXG4gICAgXHJcbiAgICB0cnkge1xyXG4gICAgICAgIC8vIOuqqOuTiCDsnbjsiqTthLTsiqQg7IOd7ISxXHJcbiAgICAgICAgbm90aWZpY2F0aW9uTWFuYWdlciA9IG5ldyBOb3RpZmljYXRpb25NYW5hZ2VyKCk7XHJcbiAgICAgICAgY29uc3Qgc3RvcHdhdGNoID0gbmV3IFN0b3B3YXRjaCgpO1xyXG4gICAgICAgIGNvbnN0IHBvbW9kb3JvID0gbmV3IFBvbW9kb3JvKCk7XHJcbiAgICAgICAgY29uc3QgcGxhbnRTeXN0ZW0gPSBuZXcgUGxhbnRTeXN0ZW0oKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyDtg60g7KCE7ZmYIOyEpOyglVxyXG4gICAgICAgIHNldHVwVGFicygpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIOqwgSDquLDriqUg7LSI6riw7ZmUXHJcbiAgICAgICAgc2V0dXBNdWx0aXBsZVRpbWVycygpO1xyXG4gICAgICAgIGluaXRpYWxpemVTdG9wd2F0Y2goc3RvcHdhdGNoKTtcclxuICAgICAgICBpbml0aWFsaXplUG9tb2Rvcm8ocG9tb2Rvcm8sIG5vdGlmaWNhdGlvbk1hbmFnZXIsIHBsYW50U3lzdGVtKTtcclxuICAgICAgICBpbml0aWFsaXplU2V0dGluZ3Mobm90aWZpY2F0aW9uTWFuYWdlciwgcGxhbnRTeXN0ZW0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIOyLneusvCDsi5zsiqTthZwg7LSI6riw7ZmUXHJcbiAgICAgICAgcGxhbnRTeXN0ZW0uaW5pdGlhbGl6ZSgpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIO2DgOydtOuouCDstpTqsIAg67KE7Yq8IOydtOuypO2KuOulvCDsl6zrn6wg67Cp7Iud7Jy866GcIOyEpOyglVxyXG4gICAgICAgIC8vIDEuIOuyhO2KvOyXkCDsp4HsoJEg7J2067Kk7Yq4IOumrOyKpOuEiFxyXG4gICAgICAgIGNvbnN0IGFkZFRpbWVyQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FkZC10aW1lcicpO1xyXG4gICAgICAgIGlmIChhZGRUaW1lckJ0bikge1xyXG4gICAgICAgICAgICBhZGRUaW1lckJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCftg4DsnbTrqLgg7LaU6rCAIOuyhO2KvCDtgbTrpq0g7J2067Kk7Yq4IOuwnOyDnScpO1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgYWRkTmV3VGltZXIoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIDIuIOy7pOyKpO2FgCDsnbTrsqTtirgg66as7Iqk64SIXHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignYWRkLW5ldy10aW1lcicsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygn7Luk7Iqk7YWAIOydtOuypO2KuOuhnCDtg4DsnbTrqLgg7LaU6rCAJyk7XHJcbiAgICAgICAgICAgIGFkZE5ld1RpbWVyKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gMy4g6riA66Gc67KMIO2VqOyImCDshKTsoJVcclxuICAgICAgICB3aW5kb3cuYWRkTmV3VGltZXJHbG9iYWwgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ+q4gOuhnOuyjCDtlajsiJjroZwg7YOA7J2066i4IOy2lOqwgCcpO1xyXG4gICAgICAgICAgICBhZGROZXdUaW1lcigpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc29sZS5sb2coJ+2DgOydtOuouCDtjpjsnbTsp4Ag7LSI6riw7ZmUIOyZhOujjCcpO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCftg4DsnbTrqLgg7Y6Y7J207KeAIOy0iOq4sO2ZlCDsmKTrpZg6JywgZXJyb3IpO1xyXG4gICAgfVxyXG59KTtcclxuXHJcbi8vIO2DrSDsoITtmZgg7ISk7KCVIO2VqOyImFxyXG5mdW5jdGlvbiBzZXR1cFRhYnMoKSB7XHJcbiAgICBjb25zdCB0YWJCdXR0b25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnRhYi1idG4nKTtcclxuICAgIGNvbnN0IHRhYkNvbnRlbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnRhYi1jb250ZW50Jyk7XHJcbiAgICBcclxuICAgIHRhYkJ1dHRvbnMuZm9yRWFjaChidXR0b24gPT4ge1xyXG4gICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgdGFiTmFtZSA9IGJ1dHRvbi5kYXRhc2V0LnRhYjtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYO2DrSDsoITtmZg6ICR7dGFiTmFtZX1gKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIOuyhO2KvCDtmZzshLHtmZQg7IOB7YOcIOuzgOqyvVxyXG4gICAgICAgICAgICB0YWJCdXR0b25zLmZvckVhY2goYnRuID0+IGJ0bi5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKSk7XHJcbiAgICAgICAgICAgIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIO2DrSDsvZjthZDsuKAg7KCE7ZmYXHJcbiAgICAgICAgICAgIHRhYkNvbnRlbnRzLmZvckVhY2goY29udGVudCA9PiBjb250ZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpKTtcclxuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYCR7dGFiTmFtZX0tdGFiYCkuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyDtj6zrqqjrj4TroZwg7YOt7J28IOuVjOunjCDsi53rrLwg7Luo7YWM7J2064SIIO2RnOyLnFxyXG4gICAgICAgICAgICBjb25zdCBwbGFudENvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wbGFudC1jb250YWluZXInKTtcclxuICAgICAgICAgICAgaWYgKHBsYW50Q29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgICAgICBwbGFudENvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gdGFiTmFtZSA9PT0gJ3BvbW9kb3JvJyA/ICdibG9jaycgOiAnbm9uZSc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcblxyXG4vLyDri6TspJEg7YOA7J2066i4IOyEpOyglSDtlajsiJhcclxuZnVuY3Rpb24gc2V0dXBNdWx0aXBsZVRpbWVycygpIHtcclxuICAgIGNvbnNvbGUubG9nKCfri6TspJEg7YOA7J2066i4IOyEpOyglScpO1xyXG4gICAgXHJcbiAgICAvLyDstIjquLAg7YOA7J2066i4IOyEpOyglVxyXG4gICAgY29uc3QgaW5pdGlhbFRpbWVySXRlbSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50aW1lci1pdGVtJyk7XHJcbiAgICBpZiAoaW5pdGlhbFRpbWVySXRlbSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCfstIjquLAg7YOA7J2066i4IOyEpOyglScpO1xyXG4gICAgICAgIGNvbnN0IHRpbWVySWQgPSBpbml0aWFsVGltZXJJdGVtLmRhdGFzZXQudGltZXJJZDtcclxuICAgICAgICBjb25zdCB0aW1lckluc3RhbmNlID0gbmV3IFRpbWVyKCk7XHJcbiAgICAgICAgdGltZXJzLnNldCh0aW1lcklkLCB0aW1lckluc3RhbmNlKTtcclxuICAgICAgICBzZXR1cFRpbWVyQ29udHJvbHMoaW5pdGlhbFRpbWVySXRlbSwgdGltZXJJbnN0YW5jZSk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIOyggOyepeuQnCDtg4DsnbTrqLgg67aI65+s7Jik6riwXHJcbiAgICBsb2FkU2F2ZWRUaW1lcnMoKTtcclxuICAgIFxyXG4gICAgLy8g7YOA7J2066i4IOyDge2DnCDso7zquLDsoIEg7KCA7J6lXHJcbiAgICBzZXRJbnRlcnZhbChzYXZlQWN0aXZlVGltZXJzLCAxMDAwMCk7XHJcbn1cclxuXHJcbi8vIOyDiCDtg4DsnbTrqLgg7LaU6rCAIO2VqOyImFxyXG5mdW5jdGlvbiBhZGROZXdUaW1lcigpIHtcclxuICAgIGNvbnNvbGUubG9nKCfsg4gg7YOA7J2066i4IOy2lOqwgCDtlajsiJgg7Zi47Lac65CoJyk7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IHRpbWVyc0xpc3RFbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RpbWVycy1saXN0Jyk7XHJcbiAgICAgICAgaWYgKCF0aW1lcnNMaXN0RWxlbSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCftg4DsnbTrqLgg66qp66GdIOyalOyGjOulvCDssL7snYQg7IiYIOyXhuydjCcpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IHRpbWVySWQgPSBTdHJpbmcodGltZXJJZENvdW50ZXIrKyk7XHJcbiAgICAgICAgY29uc29sZS5sb2coYOyDiCDtg4DsnbTrqLggSUQ6ICR7dGltZXJJZH0g7IOd7ISxIOykkWApO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIO2DgOydtOuouCDsnbjsiqTthLTsiqQg7IOd7ISxXHJcbiAgICAgICAgY29uc3QgdGltZXJJbnN0YW5jZSA9IG5ldyBUaW1lcigpO1xyXG4gICAgICAgIHRpbWVycy5zZXQodGltZXJJZCwgdGltZXJJbnN0YW5jZSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8g7YOA7J2066i4IOyalOyGjCDsg53shLFcclxuICAgICAgICBjb25zdCBuZXdUaW1lckVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICBuZXdUaW1lckVsZW0uY2xhc3NOYW1lID0gJ3RpbWVyLWl0ZW0nO1xyXG4gICAgICAgIG5ld1RpbWVyRWxlbS5kYXRhc2V0LnRpbWVySWQgPSB0aW1lcklkO1xyXG4gICAgICAgIFxyXG4gICAgICAgIG5ld1RpbWVyRWxlbS5pbm5lckhUTUwgPSBgXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0aW1lci1oZWFkZXJcIj5cclxuICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzPVwidGltZXItbGFiZWxcIiBwbGFjZWhvbGRlcj1cIu2DgOydtOuouCDsnbTrpoRcIj5cclxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJjbG9zZS10aW1lclwiPjxpIGNsYXNzPVwiZmFzIGZhLXRpbWVzXCI+PC9pPjwvYnV0dG9uPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRpbWVyLWRpc3BsYXlcIj5cclxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidGltZXItaG91cnNcIj4wMDwvc3Bhbj46PHNwYW4gY2xhc3M9XCJ0aW1lci1taW51dGVzXCI+MDA8L3NwYW4+OjxzcGFuIGNsYXNzPVwidGltZXItc2Vjb25kc1wiPjAwPC9zcGFuPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRpbWVyLWNvbnRyb2xzXCI+XHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwidGltZXItc3RhcnQgY29udHJvbC1idG5cIj48aSBjbGFzcz1cImZhcyBmYS1wbGF5XCI+PC9pPjwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInRpbWVyLXBhdXNlIGNvbnRyb2wtYnRuXCIgZGlzYWJsZWQ+PGkgY2xhc3M9XCJmYXMgZmEtcGF1c2VcIj48L2k+PC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwidGltZXItcmVzZXQgY29udHJvbC1idG5cIj48aSBjbGFzcz1cImZhcyBmYS1yZWRvXCI+PC9pPjwvYnV0dG9uPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRpbWVyLXNldHRpbmdzXCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGltZS1pbnB1dFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxsYWJlbD7si5zqsIQ6PC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiIGNsYXNzPVwiaG91cnMtaW5wdXRcIiBtaW49XCIwXCIgbWF4PVwiMjNcIiB2YWx1ZT1cIjBcIj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRpbWUtaW5wdXRcIj5cclxuICAgICAgICAgICAgICAgICAgICA8bGFiZWw+67aEOjwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIiBjbGFzcz1cIm1pbnV0ZXMtaW5wdXRcIiBtaW49XCIwXCIgbWF4PVwiNTlcIiB2YWx1ZT1cIjBcIj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRpbWUtaW5wdXRcIj5cclxuICAgICAgICAgICAgICAgICAgICA8bGFiZWw+7LSIOjwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIiBjbGFzcz1cInNlY29uZHMtaW5wdXRcIiBtaW49XCIwXCIgbWF4PVwiNTlcIiB2YWx1ZT1cIjBcIj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInByZXNldC1idXR0b25zXCI+XHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwicHJlc2V0LWJ0blwiIGRhdGEtbWludXRlcz1cIjVcIj4167aEPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwicHJlc2V0LWJ0blwiIGRhdGEtbWludXRlcz1cIjEwXCI+MTDrtoQ8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJwcmVzZXQtYnRuXCIgZGF0YS1taW51dGVzPVwiMTVcIj4xNeu2hDwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInByZXNldC1idG5cIiBkYXRhLW1pbnV0ZXM9XCIzMFwiPjMw67aEPC9idXR0b24+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIGA7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8g7YOA7J2066i4IOyalOyGjCDstpTqsIBcclxuICAgICAgICB0aW1lcnNMaXN0RWxlbS5hcHBlbmRDaGlsZChuZXdUaW1lckVsZW0pO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCftg4DsnbTrqLgg7JqU7IaMIERPTeyXkCDstpTqsIDrkKgnKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyDtg4DsnbTrqLgg7Luo7Yq466GkIOyEpOyglVxyXG4gICAgICAgIHNldHVwVGltZXJDb250cm9scyhuZXdUaW1lckVsZW0sIHRpbWVySW5zdGFuY2UpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIOuLq+q4sCDrsoTtirwg7J2067Kk7Yq4XHJcbiAgICAgICAgY29uc3QgY2xvc2VCdG4gPSBuZXdUaW1lckVsZW0ucXVlcnlTZWxlY3RvcignLmNsb3NlLXRpbWVyJyk7XHJcbiAgICAgICAgY2xvc2VCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ+uLq+q4sCDrsoTtirwg7YG066atJyk7XHJcbiAgICAgICAgICAgIHJlbW92ZVRpbWVyKG5ld1RpbWVyRWxlbSwgdGltZXJJZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8g7Y+s7Luk7IqkIOyEpOyglSDrsI8g7Iqk7YGs66GkXHJcbiAgICAgICAgbmV3VGltZXJFbGVtLnF1ZXJ5U2VsZWN0b3IoJy50aW1lci1sYWJlbCcpLmZvY3VzKCk7XHJcbiAgICAgICAgbmV3VGltZXJFbGVtLnNjcm9sbEludG9WaWV3KHsgYmVoYXZpb3I6ICdzbW9vdGgnIH0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnNvbGUubG9nKCfsg4gg7YOA7J2066i4IOy2lOqwgCDsmYTro4wnKTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcign7YOA7J2066i4IOy2lOqwgCDsmKTrpZg6JywgZXJyb3IpO1xyXG4gICAgICAgIGFsZXJ0KCftg4DsnbTrqLgg7LaU6rCAIOykkSDsmKTrpZjqsIAg67Cc7IOd7ZaI7Iq164uI64ukLicpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vLyDtg4DsnbTrqLgg7KCc6rGwIO2VqOyImFxyXG5mdW5jdGlvbiByZW1vdmVUaW1lcih0aW1lckVsZW0sIHRpbWVySWQpIHtcclxuICAgIGNvbnNvbGUubG9nKGDtg4DsnbTrqLgg7KCc6rGwOiAke3RpbWVySWR9YCk7XHJcbiAgICBcclxuICAgIC8vIO2DgOydtOuouCDsnbjsiqTthLTsiqQg7KCV66asXHJcbiAgICBjb25zdCB0aW1lckluc3RhbmNlID0gdGltZXJzLmdldCh0aW1lcklkKTtcclxuICAgIGlmICh0aW1lckluc3RhbmNlKSB7XHJcbiAgICAgICAgdGltZXJJbnN0YW5jZS5yZXNldCgpO1xyXG4gICAgICAgIHRpbWVycy5kZWxldGUodGltZXJJZCk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIOyVoOuLiOuplOydtOyFmCDtm4Qg7JqU7IaMIOygnOqxsFxyXG4gICAgdGltZXJFbGVtLnN0eWxlLm9wYWNpdHkgPSAnMCc7XHJcbiAgICB0aW1lckVsZW0uc3R5bGUudHJhbnNmb3JtID0gJ3NjYWxlKDAuOCknO1xyXG4gICAgdGltZXJFbGVtLnN0eWxlLnRyYW5zaXRpb24gPSAnYWxsIDAuM3MgZWFzZS1vdXQnO1xyXG4gICAgXHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICB0aW1lckVsZW0ucmVtb3ZlKCk7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ+2DgOydtOuouCDsmpTshowg7KCc6rGw65CoJyk7XHJcbiAgICB9LCAzMDApO1xyXG4gICAgXHJcbiAgICAvLyDsoIDsnqXrkJwg642w7J207YSw7JeQ7ISc64+EIOygnOqxsFxyXG4gICAgY29uc3Qgc2F2ZWRUaW1lcnMgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdhY3RpdmVUaW1lcnMnKSB8fCAne30nKTtcclxuICAgIGRlbGV0ZSBzYXZlZFRpbWVyc1t0aW1lcklkXTtcclxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdhY3RpdmVUaW1lcnMnLCBKU09OLnN0cmluZ2lmeShzYXZlZFRpbWVycykpO1xyXG59XHJcblxyXG4vLyDtg4DsnbTrqLgg7Luo7Yq466GkIOyEpOyglSDtlajsiJhcclxuZnVuY3Rpb24gc2V0dXBUaW1lckNvbnRyb2xzKHRpbWVyRWxlbSwgdGltZXJJbnN0YW5jZSkge1xyXG4gICAgLy8gRE9NIOyalOyGjFxyXG4gICAgY29uc3QgaG91cnNJbnB1dCA9IHRpbWVyRWxlbS5xdWVyeVNlbGVjdG9yKCcuaG91cnMtaW5wdXQnKTtcclxuICAgIGNvbnN0IG1pbnV0ZXNJbnB1dCA9IHRpbWVyRWxlbS5xdWVyeVNlbGVjdG9yKCcubWludXRlcy1pbnB1dCcpO1xyXG4gICAgY29uc3Qgc2Vjb25kc0lucHV0ID0gdGltZXJFbGVtLnF1ZXJ5U2VsZWN0b3IoJy5zZWNvbmRzLWlucHV0Jyk7XHJcbiAgICBjb25zdCB0aW1lckxhYmVsID0gdGltZXJFbGVtLnF1ZXJ5U2VsZWN0b3IoJy50aW1lci1sYWJlbCcpO1xyXG4gICAgXHJcbiAgICBjb25zdCBzdGFydEJ0biA9IHRpbWVyRWxlbS5xdWVyeVNlbGVjdG9yKCcudGltZXItc3RhcnQnKTtcclxuICAgIGNvbnN0IHBhdXNlQnRuID0gdGltZXJFbGVtLnF1ZXJ5U2VsZWN0b3IoJy50aW1lci1wYXVzZScpO1xyXG4gICAgY29uc3QgcmVzZXRCdG4gPSB0aW1lckVsZW0ucXVlcnlTZWxlY3RvcignLnRpbWVyLXJlc2V0Jyk7XHJcbiAgICBjb25zdCBwcmVzZXRCdG5zID0gdGltZXJFbGVtLnF1ZXJ5U2VsZWN0b3JBbGwoJy5wcmVzZXQtYnRuJyk7XHJcbiAgICBcclxuICAgIGNvbnN0IHRpbWVySG91cnMgPSB0aW1lckVsZW0ucXVlcnlTZWxlY3RvcignLnRpbWVyLWhvdXJzJyk7XHJcbiAgICBjb25zdCB0aW1lck1pbnV0ZXMgPSB0aW1lckVsZW0ucXVlcnlTZWxlY3RvcignLnRpbWVyLW1pbnV0ZXMnKTtcclxuICAgIGNvbnN0IHRpbWVyU2Vjb25kcyA9IHRpbWVyRWxlbS5xdWVyeVNlbGVjdG9yKCcudGltZXItc2Vjb25kcycpO1xyXG4gICAgXHJcbiAgICAvLyDtg4DsnbTrqLgg7JeF642w7J207Yq4IOy9nOuwsVxyXG4gICAgdGltZXJJbnN0YW5jZS5vblVwZGF0ZSA9IChob3VycywgbWludXRlcywgc2Vjb25kcykgPT4ge1xyXG4gICAgICAgIHRpbWVySG91cnMudGV4dENvbnRlbnQgPSBob3Vycy50b1N0cmluZygpLnBhZFN0YXJ0KDIsICcwJyk7XHJcbiAgICAgICAgdGltZXJNaW51dGVzLnRleHRDb250ZW50ID0gbWludXRlcy50b1N0cmluZygpLnBhZFN0YXJ0KDIsICcwJyk7XHJcbiAgICAgICAgdGltZXJTZWNvbmRzLnRleHRDb250ZW50ID0gc2Vjb25kcy50b1N0cmluZygpLnBhZFN0YXJ0KDIsICcwJyk7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICAvLyDtg4DsnbTrqLgg7JmE66OMIOy9nOuwsVxyXG4gICAgdGltZXJJbnN0YW5jZS5vbkNvbXBsZXRlID0gKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IG5hbWUgPSB0aW1lckxhYmVsLnZhbHVlLnRyaW0oKSB8fCAn7YOA7J2066i4JztcclxuICAgICAgICBub3RpZmljYXRpb25NYW5hZ2VyLnBsYXlOb3RpZmljYXRpb24oYCR7bmFtZX0g7JmE66OMIWAsICfshKTsoJXtlZwg7Iuc6rCE7J20IOyZhOujjOuQmOyXiOyKteuLiOuLpC4nKTtcclxuICAgICAgICB0aW1lckVsZW0uY2xhc3NMaXN0LmFkZCgndGltZXItY29tcGxldGUnKTtcclxuICAgICAgICByZXNldFRpbWVyQ29udHJvbHMoKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyDslYzrprzsnYwg7J6s7IOdXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgYXVkaW8gPSBuZXcgQXVkaW8oJ2Fzc2V0cy9zb3VuZHMvYmVsbC5tcDMnKTtcclxuICAgICAgICAgICAgYXVkaW8udm9sdW1lID0gMC41O1xyXG4gICAgICAgICAgICBhdWRpby5wbGF5KCk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ+yVjOumvOydjCDsnqzsg50g7Iuk7YyoOicsIGUpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBcclxuICAgIC8vIOyLnOyekSDrsoTtirwg7J2067Kk7Yq4XHJcbiAgICBzdGFydEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICBjb25zdCBob3VycyA9IHBhcnNlSW50KGhvdXJzSW5wdXQudmFsdWUpIHx8IDA7XHJcbiAgICAgICAgY29uc3QgbWludXRlcyA9IHBhcnNlSW50KG1pbnV0ZXNJbnB1dC52YWx1ZSkgfHwgMDtcclxuICAgICAgICBjb25zdCBzZWNvbmRzID0gcGFyc2VJbnQoc2Vjb25kc0lucHV0LnZhbHVlKSB8fCAwO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChob3VycyA9PT0gMCAmJiBtaW51dGVzID09PSAwICYmIHNlY29uZHMgPT09IDApIHtcclxuICAgICAgICAgICAgYWxlcnQoJ+2DgOydtOuouCDsi5zqsITsnYQg7ISk7KCV7ZW07KO87IS47JqULicpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHRpbWVyRWxlbS5jbGFzc0xpc3QucmVtb3ZlKCd0aW1lci1jb21wbGV0ZScpO1xyXG4gICAgICAgIHRpbWVySW5zdGFuY2Uuc3RhcnQoaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHN0YXJ0QnRuLmRpc2FibGVkID0gdHJ1ZTtcclxuICAgICAgICBwYXVzZUJ0bi5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGhvdXJzSW5wdXQuZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgIG1pbnV0ZXNJbnB1dC5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgICAgc2Vjb25kc0lucHV0LmRpc2FibGVkID0gdHJ1ZTtcclxuICAgICAgICBwcmVzZXRCdG5zLmZvckVhY2goYnRuID0+IGJ0bi5kaXNhYmxlZCA9IHRydWUpO1xyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIC8vIOydvOyLnOygleyngCDrsoTtirwg7J2067Kk7Yq4XHJcbiAgICBwYXVzZUJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICBpZiAodGltZXJJbnN0YW5jZS5pc1BhdXNlZCkge1xyXG4gICAgICAgICAgICB0aW1lckluc3RhbmNlLnJlc3VtZSgpO1xyXG4gICAgICAgICAgICBwYXVzZUJ0bi5pbm5lckhUTUwgPSAnPGkgY2xhc3M9XCJmYXMgZmEtcGF1c2VcIj48L2k+JztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aW1lckluc3RhbmNlLnBhdXNlKCk7XHJcbiAgICAgICAgICAgIHBhdXNlQnRuLmlubmVySFRNTCA9ICc8aSBjbGFzcz1cImZhcyBmYS1wbGF5XCI+PC9pPic7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIC8vIOumrOyFiyDrsoTtirwg7J2067Kk7Yq4XHJcbiAgICByZXNldEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICB0aW1lckluc3RhbmNlLnJlc2V0KCk7XHJcbiAgICAgICAgcmVzZXRUaW1lckNvbnRyb2xzKCk7XHJcbiAgICAgICAgdGltZXJFbGVtLmNsYXNzTGlzdC5yZW1vdmUoJ3RpbWVyLWNvbXBsZXRlJyk7XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgLy8g7ZSE66as7IWLIOuyhO2KvCDsnbTrsqTtirhcclxuICAgIHByZXNldEJ0bnMuZm9yRWFjaChidG4gPT4ge1xyXG4gICAgICAgIGJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgbWludXRlcyA9IHBhcnNlSW50KGJ0bi5kYXRhc2V0Lm1pbnV0ZXMpO1xyXG4gICAgICAgICAgICBob3Vyc0lucHV0LnZhbHVlID0gMDtcclxuICAgICAgICAgICAgbWludXRlc0lucHV0LnZhbHVlID0gbWludXRlcztcclxuICAgICAgICAgICAgc2Vjb25kc0lucHV0LnZhbHVlID0gMDtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHRpbWVySG91cnMudGV4dENvbnRlbnQgPSAnMDAnO1xyXG4gICAgICAgICAgICB0aW1lck1pbnV0ZXMudGV4dENvbnRlbnQgPSBtaW51dGVzLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgJzAnKTtcclxuICAgICAgICAgICAgdGltZXJTZWNvbmRzLnRleHRDb250ZW50ID0gJzAwJztcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICAvLyDsu6jtirjroaQg66as7IWLIO2VqOyImFxyXG4gICAgZnVuY3Rpb24gcmVzZXRUaW1lckNvbnRyb2xzKCkge1xyXG4gICAgICAgIHN0YXJ0QnRuLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgcGF1c2VCdG4uZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgIHBhdXNlQnRuLmlubmVySFRNTCA9ICc8aSBjbGFzcz1cImZhcyBmYS1wYXVzZVwiPjwvaT4nO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGhvdXJzSW5wdXQuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICBtaW51dGVzSW5wdXQuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICBzZWNvbmRzSW5wdXQuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICBwcmVzZXRCdG5zLmZvckVhY2goYnRuID0+IGJ0bi5kaXNhYmxlZCA9IGZhbHNlKTtcclxuICAgIH1cclxufVxyXG5cclxuLy8g7Zmc7ISxIO2DgOydtOuouCDsoIDsnqUg7ZWo7IiYXHJcbmZ1bmN0aW9uIHNhdmVBY3RpdmVUaW1lcnMoKSB7XHJcbiAgICBjb25zdCBhY3RpdmVUaW1lcnMgPSB7fTtcclxuICAgIFxyXG4gICAgdGltZXJzLmZvckVhY2goKHRpbWVySW5zdGFuY2UsIHRpbWVySWQpID0+IHtcclxuICAgICAgICBpZiAodGltZXJJbnN0YW5jZS5pc0FjdGl2ZSkge1xyXG4gICAgICAgICAgICBjb25zdCB0aW1lckVsZW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAudGltZXItaXRlbVtkYXRhLXRpbWVyLWlkPVwiJHt0aW1lcklkfVwiXWApO1xyXG4gICAgICAgICAgICBpZiAodGltZXJFbGVtKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0aW1lckxhYmVsID0gdGltZXJFbGVtLnF1ZXJ5U2VsZWN0b3IoJy50aW1lci1sYWJlbCcpLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVtYWluaW5nVGltZSA9IHRpbWVySW5zdGFuY2UuZ2V0UmVtYWluaW5nVGltZSgpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBhY3RpdmVUaW1lcnNbdGltZXJJZF0gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6IHRpbWVyTGFiZWwsXHJcbiAgICAgICAgICAgICAgICAgICAgaG91cnM6IHJlbWFpbmluZ1RpbWUuaG91cnMsXHJcbiAgICAgICAgICAgICAgICAgICAgbWludXRlczogcmVtYWluaW5nVGltZS5taW51dGVzLFxyXG4gICAgICAgICAgICAgICAgICAgIHNlY29uZHM6IHJlbWFpbmluZ1RpbWUuc2Vjb25kcyxcclxuICAgICAgICAgICAgICAgICAgICBpc1BhdXNlZDogdGltZXJJbnN0YW5jZS5pc1BhdXNlZFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnYWN0aXZlVGltZXJzJywgSlNPTi5zdHJpbmdpZnkoYWN0aXZlVGltZXJzKSk7XHJcbn1cclxuXHJcbi8vIOyggOyepeuQnCDtg4DsnbTrqLgg67aI65+s7Jik6riwIO2VqOyImFxyXG5mdW5jdGlvbiBsb2FkU2F2ZWRUaW1lcnMoKSB7XHJcbiAgICBjb25zdCBzYXZlZFRpbWVycyA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2FjdGl2ZVRpbWVycycpIHx8ICd7fScpO1xyXG4gICAgY29uc3QgdGltZXJzTGlzdEVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGltZXJzLWxpc3QnKTtcclxuICAgIFxyXG4gICAgaWYgKE9iamVjdC5rZXlzKHNhdmVkVGltZXJzKS5sZW5ndGggPT09IDApIHJldHVybjtcclxuICAgIFxyXG4gICAgT2JqZWN0LmVudHJpZXMoc2F2ZWRUaW1lcnMpLmZvckVhY2goKFt0aW1lcklkLCB0aW1lckRhdGFdKSA9PiB7XHJcbiAgICAgICAgY29uc3QgdGltZXJJbnN0YW5jZSA9IG5ldyBUaW1lcigpO1xyXG4gICAgICAgIHRpbWVycy5zZXQodGltZXJJZCwgdGltZXJJbnN0YW5jZSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3QgdGltZXJFbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgdGltZXJFbGVtLmNsYXNzTmFtZSA9ICd0aW1lci1pdGVtJztcclxuICAgICAgICB0aW1lckVsZW0uZGF0YXNldC50aW1lcklkID0gdGltZXJJZDtcclxuICAgICAgICBcclxuICAgICAgICB0aW1lckVsZW0uaW5uZXJIVE1MID0gYFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGltZXItaGVhZGVyXCI+XHJcbiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBjbGFzcz1cInRpbWVyLWxhYmVsXCIgcGxhY2Vob2xkZXI9XCLtg4DsnbTrqLgg7J2066aEXCIgdmFsdWU9XCIke3RpbWVyRGF0YS5sYWJlbCB8fCAnJ31cIj5cclxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJjbG9zZS10aW1lclwiPjxpIGNsYXNzPVwiZmFzIGZhLXRpbWVzXCI+PC9pPjwvYnV0dG9uPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRpbWVyLWRpc3BsYXlcIj5cclxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidGltZXItaG91cnNcIj4ke3RpbWVyRGF0YS5ob3Vycy50b1N0cmluZygpLnBhZFN0YXJ0KDIsICcwJyl9PC9zcGFuPjpcclxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidGltZXItbWludXRlc1wiPiR7dGltZXJEYXRhLm1pbnV0ZXMudG9TdHJpbmcoKS5wYWRTdGFydCgyLCAnMCcpfTwvc3Bhbj46XHJcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInRpbWVyLXNlY29uZHNcIj4ke3RpbWVyRGF0YS5zZWNvbmRzLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgJzAnKX08L3NwYW4+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGltZXItY29udHJvbHNcIj5cclxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJ0aW1lci1zdGFydCBjb250cm9sLWJ0blwiICR7dGltZXJEYXRhLmlzUGF1c2VkID8gJycgOiAnZGlzYWJsZWQnfT48aSBjbGFzcz1cImZhcyBmYS1wbGF5XCI+PC9pPjwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInRpbWVyLXBhdXNlIGNvbnRyb2wtYnRuXCIgJHt0aW1lckRhdGEuaXNQYXVzZWQgPyAnZGlzYWJsZWQnIDogJyd9PjxpIGNsYXNzPVwiZmFzIGZhLXBhdXNlXCI+PC9pPjwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInRpbWVyLXJlc2V0IGNvbnRyb2wtYnRuXCI+PGkgY2xhc3M9XCJmYXMgZmEtcmVkb1wiPjwvaT48L2J1dHRvbj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0aW1lci1zZXR0aW5nc1wiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRpbWUtaW5wdXRcIj5cclxuICAgICAgICAgICAgICAgICAgICA8bGFiZWw+7Iuc6rCEOjwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIiBjbGFzcz1cImhvdXJzLWlucHV0XCIgbWluPVwiMFwiIG1heD1cIjIzXCIgdmFsdWU9XCIke3RpbWVyRGF0YS5ob3Vyc31cIiAke3RpbWVyRGF0YS5pc1BhdXNlZCA/ICcnIDogJ2Rpc2FibGVkJ30+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0aW1lLWlucHV0XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGxhYmVsPuu2hDo8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgY2xhc3M9XCJtaW51dGVzLWlucHV0XCIgbWluPVwiMFwiIG1heD1cIjU5XCIgdmFsdWU9XCIke3RpbWVyRGF0YS5taW51dGVzfVwiICR7dGltZXJEYXRhLmlzUGF1c2VkID8gJycgOiAnZGlzYWJsZWQnfT5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRpbWUtaW5wdXRcIj5cclxuICAgICAgICAgICAgICAgICAgICA8bGFiZWw+7LSIOjwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIiBjbGFzcz1cInNlY29uZHMtaW5wdXRcIiBtaW49XCIwXCIgbWF4PVwiNTlcIiB2YWx1ZT1cIiR7dGltZXJEYXRhLnNlY29uZHN9XCIgJHt0aW1lckRhdGEuaXNQYXVzZWQgPyAnJyA6ICdkaXNhYmxlZCd9PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwicHJlc2V0LWJ1dHRvbnNcIj5cclxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJwcmVzZXQtYnRuXCIgZGF0YS1taW51dGVzPVwiNVwiICR7dGltZXJEYXRhLmlzUGF1c2VkID8gJycgOiAnZGlzYWJsZWQnfT4167aEPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwicHJlc2V0LWJ0blwiIGRhdGEtbWludXRlcz1cIjEwXCIgJHt0aW1lckRhdGEuaXNQYXVzZWQgPyAnJyA6ICdkaXNhYmxlZCd9PjEw67aEPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwicHJlc2V0LWJ0blwiIGRhdGEtbWludXRlcz1cIjE1XCIgJHt0aW1lckRhdGEuaXNQYXVzZWQgPyAnJyA6ICdkaXNhYmxlZCd9PjE167aEPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwicHJlc2V0LWJ0blwiIGRhdGEtbWludXRlcz1cIjMwXCIgJHt0aW1lckRhdGEuaXNQYXVzZWQgPyAnJyA6ICdkaXNhYmxlZCd9PjMw67aEPC9idXR0b24+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIGA7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGltZXJzTGlzdEVsZW0uYXBwZW5kQ2hpbGQodGltZXJFbGVtKTtcclxuICAgICAgICBzZXR1cFRpbWVyQ29udHJvbHModGltZXJFbGVtLCB0aW1lckluc3RhbmNlKTtcclxuICAgICAgICBcclxuICAgICAgICBjb25zdCBjbG9zZUJ0biA9IHRpbWVyRWxlbS5xdWVyeVNlbGVjdG9yKCcuY2xvc2UtdGltZXInKTtcclxuICAgICAgICBjbG9zZUJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHJlbW92ZVRpbWVyKHRpbWVyRWxlbSwgdGltZXJJZCkpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmICghdGltZXJEYXRhLmlzUGF1c2VkKSB7XHJcbiAgICAgICAgICAgIHRpbWVySW5zdGFuY2Uuc3RhcnQodGltZXJEYXRhLmhvdXJzLCB0aW1lckRhdGEubWludXRlcywgdGltZXJEYXRhLnNlY29uZHMpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICBjb25zdCBtYXhJZCA9IE1hdGgubWF4KDAsIC4uLk9iamVjdC5rZXlzKHNhdmVkVGltZXJzKS5tYXAoaWQgPT4gcGFyc2VJbnQoaWQpKSk7XHJcbiAgICB0aW1lcklkQ291bnRlciA9IG1heElkICsgMTtcclxufVxyXG5cclxuLy8g7Iqk7Yax7JuM7LmYIOy0iOq4sO2ZlCDrsI8g7J2067Kk7Yq4IOyEpOyglSDtlajsiJhcclxuZnVuY3Rpb24gaW5pdGlhbGl6ZVN0b3B3YXRjaChzdG9wd2F0Y2gpIHtcclxuICAgIGNvbnN0IHN0YXJ0QnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N0b3B3YXRjaC1zdGFydCcpO1xyXG4gICAgY29uc3QgcGF1c2VCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3RvcHdhdGNoLXBhdXNlJyk7XHJcbiAgICBjb25zdCByZXNldEJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdG9wd2F0Y2gtcmVzZXQnKTtcclxuICAgIGNvbnN0IGxhcEJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdG9wd2F0Y2gtbGFwJyk7XHJcbiAgICBjb25zdCBsYXBzTGlzdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsYXBzLWxpc3QnKTtcclxuICAgIFxyXG4gICAgY29uc3Qgc3RvcHdhdGNoSG91cnMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3RvcHdhdGNoLWhvdXJzJyk7XHJcbiAgICBjb25zdCBzdG9wd2F0Y2hNaW51dGVzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N0b3B3YXRjaC1taW51dGVzJyk7XHJcbiAgICBjb25zdCBzdG9wd2F0Y2hTZWNvbmRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N0b3B3YXRjaC1zZWNvbmRzJyk7XHJcbiAgICBjb25zdCBzdG9wd2F0Y2hNaWxsaXNlY29uZHMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3RvcHdhdGNoLW1pbGxpc2Vjb25kcycpO1xyXG4gICAgXHJcbiAgICAvLyDsiqTthrHsm4zsuZgg7JeF642w7J207Yq4IO2VqOyImFxyXG4gICAgc3RvcHdhdGNoLm9uVXBkYXRlID0gKGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzLCBtaWxsaXNlY29uZHMpID0+IHtcclxuICAgICAgICBzdG9wd2F0Y2hIb3Vycy50ZXh0Q29udGVudCA9IGhvdXJzLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgJzAnKTtcclxuICAgICAgICBzdG9wd2F0Y2hNaW51dGVzLnRleHRDb250ZW50ID0gbWludXRlcy50b1N0cmluZygpLnBhZFN0YXJ0KDIsICcwJyk7XHJcbiAgICAgICAgc3RvcHdhdGNoU2Vjb25kcy50ZXh0Q29udGVudCA9IHNlY29uZHMudG9TdHJpbmcoKS5wYWRTdGFydCgyLCAnMCcpO1xyXG4gICAgICAgIHN0b3B3YXRjaE1pbGxpc2Vjb25kcy50ZXh0Q29udGVudCA9IG1pbGxpc2Vjb25kcy50b1N0cmluZygpLnBhZFN0YXJ0KDIsICcwJyk7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICAvLyDsi5zsnpEg67KE7Yq8IO2BtOumrSDsnbTrsqTtirhcclxuICAgIHN0YXJ0QnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgIHN0b3B3YXRjaC5zdGFydCgpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIOuyhO2KvCDsg4Htg5wg7JeF642w7J207Yq4XHJcbiAgICAgICAgc3RhcnRCdG4uZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgIHBhdXNlQnRuLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgbGFwQnRuLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgLy8g7J287IucIOygleyngCDrsoTtirwg7YG066atIOydtOuypO2KuFxyXG4gICAgcGF1c2VCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgaWYgKHN0b3B3YXRjaC5pc1BhdXNlZCkge1xyXG4gICAgICAgICAgICBzdG9wd2F0Y2gucmVzdW1lKCk7XHJcbiAgICAgICAgICAgIHBhdXNlQnRuLmlubmVySFRNTCA9ICc8aSBjbGFzcz1cImZhcyBmYS1wYXVzZVwiPjwvaT4nO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHN0b3B3YXRjaC5wYXVzZSgpO1xyXG4gICAgICAgICAgICBwYXVzZUJ0bi5pbm5lckhUTUwgPSAnPGkgY2xhc3M9XCJmYXMgZmEtcGxheVwiPjwvaT4nO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICAvLyDrpqzshYsg67KE7Yq8IO2BtOumrSDsnbTrsqTtirhcclxuICAgIHJlc2V0QnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgIHN0b3B3YXRjaC5yZXNldCgpO1xyXG4gICAgICAgIHJlc2V0U3RvcHdhdGNoQ29udHJvbHMoKTtcclxuICAgICAgICBsYXBzTGlzdC5pbm5lckhUTUwgPSAnJztcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICAvLyDrnqkg67KE7Yq8IO2BtOumrSDsnbTrsqTtirhcclxuICAgIGxhcEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICBjb25zdCBsYXBUaW1lID0gc3RvcHdhdGNoLmdldExhcFRpbWUoKTtcclxuICAgICAgICBjb25zdCBsYXBJbmRleCA9IHN0b3B3YXRjaC5sYXBzLmxlbmd0aDtcclxuICAgICAgICBcclxuICAgICAgICAvLyDrnqkg7Iuc6rCEIO2RnOyLnFxyXG4gICAgICAgIGNvbnN0IGxhcEl0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xyXG4gICAgICAgIGxhcEl0ZW0uaW5uZXJIVE1MID0gYFxyXG4gICAgICAgICAgICA8c3Bhbj7rnqkgJHtsYXBJbmRleH08L3NwYW4+XHJcbiAgICAgICAgICAgIDxzcGFuPiR7Zm9ybWF0VGltZShsYXBUaW1lKX08L3NwYW4+XHJcbiAgICAgICAgYDtcclxuICAgICAgICBsYXBzTGlzdC5hcHBlbmRDaGlsZChsYXBJdGVtKTtcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICAvLyDsiqTthrHsm4zsuZgg7Luo7Yq466GkIOumrOyFiyDtlajsiJhcclxuICAgIGZ1bmN0aW9uIHJlc2V0U3RvcHdhdGNoQ29udHJvbHMoKSB7XHJcbiAgICAgICAgc3RhcnRCdG4uZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICBwYXVzZUJ0bi5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgICAgbGFwQnRuLmRpc2FibGVkID0gdHJ1ZTtcclxuICAgICAgICBwYXVzZUJ0bi5pbm5lckhUTUwgPSAnPGkgY2xhc3M9XCJmYXMgZmEtcGF1c2VcIj48L2k+JztcclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8g7Iuc6rCEIO2PrOunt+2MhSDtlajsiJhcclxuICAgIGZ1bmN0aW9uIGZvcm1hdFRpbWUodGltZU9iaikge1xyXG4gICAgICAgIGNvbnN0IHsgaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMsIG1pbGxpc2Vjb25kcyB9ID0gdGltZU9iajtcclxuICAgICAgICByZXR1cm4gYCR7aG91cnMudG9TdHJpbmcoKS5wYWRTdGFydCgyLCAnMCcpfToke21pbnV0ZXMudG9TdHJpbmcoKS5wYWRTdGFydCgyLCAnMCcpfToke3NlY29uZHMudG9TdHJpbmcoKS5wYWRTdGFydCgyLCAnMCcpfS4ke21pbGxpc2Vjb25kcy50b1N0cmluZygpLnBhZFN0YXJ0KDIsICcwJyl9YDtcclxuICAgIH1cclxufVxyXG5cclxuLy8g7Y+s66qo64+E66GcIOy0iOq4sO2ZlCDrsI8g7J2067Kk7Yq4IOyEpOyglSDtlajsiJhcclxuZnVuY3Rpb24gaW5pdGlhbGl6ZVBvbW9kb3JvKHBvbW9kb3JvLCBub3RpZmljYXRpb25NYW5hZ2VyLCBwbGFudFN5c3RlbSkge1xyXG4gICAgY29uc3Qgc3RhcnRCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncG9tb2Rvcm8tc3RhcnQnKTtcclxuICAgIGNvbnN0IHBhdXNlQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BvbW9kb3JvLXBhdXNlJyk7XHJcbiAgICBjb25zdCByZXNldEJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwb21vZG9yby1yZXNldCcpO1xyXG4gICAgXHJcbiAgICBjb25zdCBwb21vZG9yb01pbnV0ZXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncG9tb2Rvcm8tbWludXRlcycpO1xyXG4gICAgY29uc3QgcG9tb2Rvcm9TZWNvbmRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BvbW9kb3JvLXNlY29uZHMnKTtcclxuICAgIGNvbnN0IHN0YXR1c1RleHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3RhdHVzLXRleHQnKTtcclxuICAgIGNvbnN0IGN5Y2xlQ291bnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY3ljbGUtY291bnQnKTtcclxuICAgIGNvbnN0IGN1cnJlbnRNb2RlVGltZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjdXJyZW50LW1vZGUtdGltZScpO1xyXG4gICAgY29uc3Qgd29ya1RpbWUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnd29yay10aW1lJyk7XHJcbiAgICBjb25zdCBicmVha1RpbWUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYnJlYWstdGltZScpO1xyXG4gICAgXHJcbiAgICBjb25zdCB3b3JrTWludXRlc0lucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3dvcmstbWludXRlcycpO1xyXG4gICAgY29uc3Qgc2hvcnRCcmVha01pbnV0ZXNJbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzaG9ydC1icmVhay1taW51dGVzJyk7XHJcbiAgICBjb25zdCBsb25nQnJlYWtNaW51dGVzSW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbG9uZy1icmVhay1taW51dGVzJyk7XHJcbiAgICBjb25zdCBwb21vZG9yb0N5Y2xlc0lucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BvbW9kb3JvLWN5Y2xlcycpO1xyXG4gICAgXHJcbiAgICAvLyDtj6zrqqjrj4TroZwg7ISk7KCVIOuzgOqyvSDsi5wg7J2067Kk7Yq4XHJcbiAgICB3b3JrTWludXRlc0lucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHVwZGF0ZVBvbW9kb3JvU2V0dGluZ3MpO1xyXG4gICAgc2hvcnRCcmVha01pbnV0ZXNJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB1cGRhdGVQb21vZG9yb1NldHRpbmdzKTtcclxuICAgIGxvbmdCcmVha01pbnV0ZXNJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB1cGRhdGVQb21vZG9yb1NldHRpbmdzKTtcclxuICAgIHBvbW9kb3JvQ3ljbGVzSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdXBkYXRlUG9tb2Rvcm9TZXR0aW5ncyk7XHJcbiAgICBcclxuICAgIC8vIOyEpOyglSDsl4XrjbDsnbTtirgg7ZWo7IiYXHJcbiAgICBmdW5jdGlvbiB1cGRhdGVQb21vZG9yb1NldHRpbmdzKCkge1xyXG4gICAgICAgIGNvbnN0IHdvcmtNaW51dGVzID0gcGFyc2VJbnQod29ya01pbnV0ZXNJbnB1dC52YWx1ZSkgfHwgMjU7XHJcbiAgICAgICAgY29uc3Qgc2hvcnRCcmVha01pbnV0ZXMgPSBwYXJzZUludChzaG9ydEJyZWFrTWludXRlc0lucHV0LnZhbHVlKSB8fCA1O1xyXG4gICAgICAgIGNvbnN0IGxvbmdCcmVha01pbnV0ZXMgPSBwYXJzZUludChsb25nQnJlYWtNaW51dGVzSW5wdXQudmFsdWUpIHx8IDE1O1xyXG4gICAgICAgIGNvbnN0IHRvdGFsQ3ljbGVzID0gcGFyc2VJbnQocG9tb2Rvcm9DeWNsZXNJbnB1dC52YWx1ZSkgfHwgNDtcclxuICAgICAgICBcclxuICAgICAgICAvLyDsnKDtmqjshLEg6rKA7IKsIOuwjyDrspTsnIQg7KGw7KCVXHJcbiAgICAgICAgd29ya01pbnV0ZXNJbnB1dC52YWx1ZSA9IE1hdGgubWF4KDEsIE1hdGgubWluKDYwLCB3b3JrTWludXRlcykpO1xyXG4gICAgICAgIHNob3J0QnJlYWtNaW51dGVzSW5wdXQudmFsdWUgPSBNYXRoLm1heCgxLCBNYXRoLm1pbigzMCwgc2hvcnRCcmVha01pbnV0ZXMpKTtcclxuICAgICAgICBsb25nQnJlYWtNaW51dGVzSW5wdXQudmFsdWUgPSBNYXRoLm1heCgxLCBNYXRoLm1pbig2MCwgbG9uZ0JyZWFrTWludXRlcykpO1xyXG4gICAgICAgIHBvbW9kb3JvQ3ljbGVzSW5wdXQudmFsdWUgPSBNYXRoLm1heCgxLCBNYXRoLm1pbigxMCwgdG90YWxDeWNsZXMpKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyDtj6zrqqjrj4TroZwg7ISk7KCVIOyXheuNsOydtO2KuFxyXG4gICAgICAgIHBvbW9kb3JvLnNldFNldHRpbmdzKHtcclxuICAgICAgICAgICAgd29ya01pbnV0ZXM6IHdvcmtNaW51dGVzSW5wdXQudmFsdWUsXHJcbiAgICAgICAgICAgIHNob3J0QnJlYWtNaW51dGVzOiBzaG9ydEJyZWFrTWludXRlc0lucHV0LnZhbHVlLFxyXG4gICAgICAgICAgICBsb25nQnJlYWtNaW51dGVzOiBsb25nQnJlYWtNaW51dGVzSW5wdXQudmFsdWUsXHJcbiAgICAgICAgICAgIHRvdGFsQ3ljbGVzOiBwb21vZG9yb0N5Y2xlc0lucHV0LnZhbHVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8g7LSI6riwIOyDge2DnCDsl4XrjbDsnbTtirggKOyekeyXhSDsi5zqsIQg7ZGc7IucKVxyXG4gICAgICAgIHBvbW9kb3JvTWludXRlcy50ZXh0Q29udGVudCA9IHdvcmtNaW51dGVzSW5wdXQudmFsdWUudG9TdHJpbmcoKS5wYWRTdGFydCgyLCAnMCcpO1xyXG4gICAgICAgIHBvbW9kb3JvU2Vjb25kcy50ZXh0Q29udGVudCA9ICcwMCc7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8g7ZiE7J6sIOuqqOuTnCDsi5zqsIQg7ZGc7IucIOyXheuNsOydtO2KuFxyXG4gICAgICAgIHVwZGF0ZUN1cnJlbnRNb2RlVGltZSgnd29yaycpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIOyekeyXhS/tnLTsi50g7Iuc6rCEIO2RnOyLnCDsl4XrjbDsnbTtirhcclxuICAgICAgICB1cGRhdGVUaW1lRGlzcGxheXMoKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyDsgqzsnbTtgbQg7Lm07Jq07Yq4IOyXheuNsOydtO2KuFxyXG4gICAgICAgIGN5Y2xlQ291bnQudGV4dENvbnRlbnQgPSBgMC8ke3BvbW9kb3JvQ3ljbGVzSW5wdXQudmFsdWV9YDtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8g7Iuc6rCEIO2RnOyLnCDsl4XrjbDsnbTtirgg7ZWo7IiYXHJcbiAgICBmdW5jdGlvbiB1cGRhdGVUaW1lRGlzcGxheXMoKSB7XHJcbiAgICAgICAgY29uc3Qgd29ya01pbiA9IHBhcnNlSW50KHdvcmtNaW51dGVzSW5wdXQudmFsdWUpIHx8IDI1O1xyXG4gICAgICAgIGNvbnN0IHNob3J0QnJlYWtNaW4gPSBwYXJzZUludChzaG9ydEJyZWFrTWludXRlc0lucHV0LnZhbHVlKSB8fCA1O1xyXG4gICAgICAgIFxyXG4gICAgICAgIHdvcmtUaW1lLnRleHRDb250ZW50ID0gYCR7d29ya01pbi50b1N0cmluZygpLnBhZFN0YXJ0KDIsICcwJyl9OjAwYDtcclxuICAgICAgICBicmVha1RpbWUudGV4dENvbnRlbnQgPSBgJHtzaG9ydEJyZWFrTWluLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgJzAnKX06MDBgO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyDtmITsnqwg66qo65OcIOyLnOqwhCDtkZzsi5wg7JeF642w7J207Yq4IO2VqOyImFxyXG4gICAgZnVuY3Rpb24gdXBkYXRlQ3VycmVudE1vZGVUaW1lKG1vZGUpIHtcclxuICAgICAgICBsZXQgbWludXRlcyA9IDA7XHJcbiAgICAgICAgc3dpdGNoKG1vZGUpIHtcclxuICAgICAgICAgICAgY2FzZSAnd29yayc6XHJcbiAgICAgICAgICAgICAgICBtaW51dGVzID0gcGFyc2VJbnQod29ya01pbnV0ZXNJbnB1dC52YWx1ZSkgfHwgMjU7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnc2hvcnRCcmVhayc6XHJcbiAgICAgICAgICAgICAgICBtaW51dGVzID0gcGFyc2VJbnQoc2hvcnRCcmVha01pbnV0ZXNJbnB1dC52YWx1ZSkgfHwgNTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdsb25nQnJlYWsnOlxyXG4gICAgICAgICAgICAgICAgbWludXRlcyA9IHBhcnNlSW50KGxvbmdCcmVha01pbnV0ZXNJbnB1dC52YWx1ZSkgfHwgMTU7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgY3VycmVudE1vZGVUaW1lLnRleHRDb250ZW50ID0gYCR7bWludXRlcy50b1N0cmluZygpLnBhZFN0YXJ0KDIsICcwJyl9OjAwYDtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8g7Iuc7J6RIOuyhO2KvCDtgbTrpq0g7J2067Kk7Yq4XHJcbiAgICBzdGFydEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICAvLyDtj6zrqqjrj4TroZwg7Iuc7J6RXHJcbiAgICAgICAgcG9tb2Rvcm8uc3RhcnQoKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyDrsoTtirwg7IOB7YOcIOyXheuNsOydtO2KuFxyXG4gICAgICAgIHN0YXJ0QnRuLmRpc2FibGVkID0gdHJ1ZTtcclxuICAgICAgICBwYXVzZUJ0bi5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIOyeheugpSDtlYTrk5wg67mE7Zmc7ISx7ZmUXHJcbiAgICAgICAgd29ya01pbnV0ZXNJbnB1dC5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgICAgc2hvcnRCcmVha01pbnV0ZXNJbnB1dC5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgICAgbG9uZ0JyZWFrTWludXRlc0lucHV0LmRpc2FibGVkID0gdHJ1ZTtcclxuICAgICAgICBwb21vZG9yb0N5Y2xlc0lucHV0LmRpc2FibGVkID0gdHJ1ZTtcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICAvLyDsnbzsi5wg7KCV7KeAIOuyhO2KvCDtgbTrpq0g7J2067Kk7Yq4XHJcbiAgICBwYXVzZUJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICBpZiAocG9tb2Rvcm8uaXNQYXVzZWQpIHtcclxuICAgICAgICAgICAgcG9tb2Rvcm8ucmVzdW1lKCk7XHJcbiAgICAgICAgICAgIHBhdXNlQnRuLmlubmVySFRNTCA9ICc8aSBjbGFzcz1cImZhcyBmYS1wYXVzZVwiPjwvaT4nO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHBvbW9kb3JvLnBhdXNlKCk7XHJcbiAgICAgICAgICAgIHBhdXNlQnRuLmlubmVySFRNTCA9ICc8aSBjbGFzcz1cImZhcyBmYS1wbGF5XCI+PC9pPic7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIC8vIOumrOyFiyDrsoTtirwg7YG066atIOydtOuypO2KuFxyXG4gICAgcmVzZXRCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgcG9tb2Rvcm8ucmVzZXQoKTtcclxuICAgICAgICByZXNldFBvbW9kb3JvQ29udHJvbHMoKTtcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICAvLyDtj6zrqqjrj4TroZwg7JeF642w7J207Yq4IO2VqOyImFxyXG4gICAgcG9tb2Rvcm8ub25VcGRhdGUgPSAobWludXRlcywgc2Vjb25kcywgY3VycmVudEN5Y2xlLCB0b3RhbEN5Y2xlcywgbW9kZSkgPT4ge1xyXG4gICAgICAgIHBvbW9kb3JvTWludXRlcy50ZXh0Q29udGVudCA9IG1pbnV0ZXMudG9TdHJpbmcoKS5wYWRTdGFydCgyLCAnMCcpO1xyXG4gICAgICAgIHBvbW9kb3JvU2Vjb25kcy50ZXh0Q29udGVudCA9IHNlY29uZHMudG9TdHJpbmcoKS5wYWRTdGFydCgyLCAnMCcpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIOyCrOydtO2BtCDsoJXrs7Qg7JeF642w7J207Yq4XHJcbiAgICAgICAgY3ljbGVDb3VudC50ZXh0Q29udGVudCA9IGAke2N1cnJlbnRDeWNsZX0vJHt0b3RhbEN5Y2xlc31gO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIOuqqOuTnOyXkCDrlLDrpbgg7IOB7YOcIO2FjeyKpO2KuCDsl4XrjbDsnbTtirhcclxuICAgICAgICBpZiAobW9kZSA9PT0gJ3dvcmsnKSB7XHJcbiAgICAgICAgICAgIHN0YXR1c1RleHQudGV4dENvbnRlbnQgPSAn7J6R7JeFIOyLnOqwhCc7XHJcbiAgICAgICAgfSBlbHNlIGlmIChtb2RlID09PSAnc2hvcnRCcmVhaycpIHtcclxuICAgICAgICAgICAgc3RhdHVzVGV4dC50ZXh0Q29udGVudCA9ICfsp6fsnYAg7Zy07IudJztcclxuICAgICAgICB9IGVsc2UgaWYgKG1vZGUgPT09ICdsb25nQnJlYWsnKSB7XHJcbiAgICAgICAgICAgIHN0YXR1c1RleHQudGV4dENvbnRlbnQgPSAn6ri0IO2ctOyLnSc7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFxyXG4gICAgLy8g7Y+s66qo64+E66GcIOuqqOuTnCDrs4Dqsr0g7IucIOyLpO2WiSDtlajsiJhcclxuICAgIHBvbW9kb3JvLm9uTW9kZUNoYW5nZSA9IChtb2RlKSA9PiB7XHJcbiAgICAgICAgLy8g66qo65Oc7JeQIOuUsOuluCDslYzrprxcclxuICAgICAgICBsZXQgdGl0bGUgPSAnJztcclxuICAgICAgICBsZXQgbWVzc2FnZSA9ICcnO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChtb2RlID09PSAnd29yaycpIHtcclxuICAgICAgICAgICAgdGl0bGUgPSAn7J6R7JeFIOyLnOqwhCEnO1xyXG4gICAgICAgICAgICBtZXNzYWdlID0gJ+yngOq4iOu2gO2EsCDsp5HspJHtlbTshJwg7J6R7JeF7ZWY7IS47JqULic7XHJcbiAgICAgICAgICAgIHVwZGF0ZUN1cnJlbnRNb2RlVGltZSgnd29yaycpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAobW9kZSA9PT0gJ3Nob3J0QnJlYWsnKSB7XHJcbiAgICAgICAgICAgIHRpdGxlID0gJ+ynp+ydgCDtnLTsi50g7Iuc6rCEISc7XHJcbiAgICAgICAgICAgIG1lc3NhZ2UgPSAn7J6g7IucIO2ctOyLneydhCDst6jtlZjshLjsmpQuJztcclxuICAgICAgICAgICAgdXBkYXRlQ3VycmVudE1vZGVUaW1lKCdzaG9ydEJyZWFrJyk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChtb2RlID09PSAnbG9uZ0JyZWFrJykge1xyXG4gICAgICAgICAgICB0aXRsZSA9ICfquLQg7Zy07IudIOyLnOqwhCEnO1xyXG4gICAgICAgICAgICBtZXNzYWdlID0gJ+y2qeu2hO2eiCDtnLTsi53snYQg7Leo7ZWY7IS47JqULic7XHJcbiAgICAgICAgICAgIHVwZGF0ZUN1cnJlbnRNb2RlVGltZSgnbG9uZ0JyZWFrJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIG5vdGlmaWNhdGlvbk1hbmFnZXIucGxheU5vdGlmaWNhdGlvbih0aXRsZSwgbWVzc2FnZSk7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICAvLyDtj6zrqqjrj4TroZwg7JmE66OMIOyLnCDsi6Ttlokg7ZWo7IiYXHJcbiAgICBwb21vZG9yby5vbkNvbXBsZXRlID0gKGNvbXBsZXRlZEN5Y2xlcykgPT4ge1xyXG4gICAgICAgIG5vdGlmaWNhdGlvbk1hbmFnZXIucGxheU5vdGlmaWNhdGlvbign7Y+s66qo64+E66GcIOyZhOujjCEnLCBgJHtjb21wbGV0ZWRDeWNsZXN967KI7J2YIO2PrOuqqOuPhOuhnCDshLjshZjsnYQg7JmE66OM7ZaI7Iq164uI64ukLmApO1xyXG4gICAgICAgIHJlc2V0UG9tb2Rvcm9Db250cm9scygpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIO2PrOuqqOuPhOuhnCDsmYTro4wg7IucIOqyve2XmOy5mCDsoJzqs7VcclxuICAgICAgICAvLyDsmYTro4ztlZwg7IKs7J207YG0IOyImOyXkCDrlLDrnbwg6rK97ZeY7LmYIOywqOuTsSDsp4DquIlcclxuICAgICAgICBjb25zdCBleHAgPSBjb21wbGV0ZWRDeWNsZXMgKiAxNTtcclxuICAgICAgICBwbGFudFN5c3RlbS5hZGRFeHBlcmllbmNlKGV4cCk7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICAvLyDsnpHsl4Ug7IS47IWYIOyZhOujjCDsi5wg7Iuk7ZaJIO2VqOyImFxyXG4gICAgcG9tb2Rvcm8ub25Xb3JrU2Vzc2lvbkNvbXBsZXRlID0gKCkgPT4ge1xyXG4gICAgICAgIC8vIOyekeyXhSDshLjshZgg7JmE66OMIOyLnCDqsr3tl5jsuZgg7KCc6rO1XHJcbiAgICAgICAgcGxhbnRTeXN0ZW0uYWRkRXhwZXJpZW5jZSgxMCk7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICAvLyDtj6zrqqjrj4TroZwg7Luo7Yq466GkIOumrOyFiyDtlajsiJhcclxuICAgIGZ1bmN0aW9uIHJlc2V0UG9tb2Rvcm9Db250cm9scygpIHtcclxuICAgICAgICBzdGFydEJ0bi5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgIHBhdXNlQnRuLmRpc2FibGVkID0gdHJ1ZTtcclxuICAgICAgICBwYXVzZUJ0bi5pbm5lckhUTUwgPSAnPGkgY2xhc3M9XCJmYXMgZmEtcGF1c2VcIj48L2k+JztcclxuICAgICAgICBcclxuICAgICAgICB3b3JrTWludXRlc0lucHV0LmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgc2hvcnRCcmVha01pbnV0ZXNJbnB1dC5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgIGxvbmdCcmVha01pbnV0ZXNJbnB1dC5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgIHBvbW9kb3JvQ3ljbGVzSW5wdXQuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICBcclxuICAgICAgICB1cGRhdGVQb21vZG9yb1NldHRpbmdzKCk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIOy0iOq4sCDshKTsoJUg7KCB7JqpXHJcbiAgICB1cGRhdGVQb21vZG9yb1NldHRpbmdzKCk7XHJcbn1cclxuXHJcbi8vIOyEpOyglSDstIjquLDtmZQg67CPIOydtOuypO2KuCDshKTsoJUg7ZWo7IiYXHJcbmZ1bmN0aW9uIGluaXRpYWxpemVTZXR0aW5ncyhub3RpZmljYXRpb25NYW5hZ2VyLCBwbGFudFN5c3RlbSkge1xyXG4gICAgY29uc3Qgbm90aWZpY2F0aW9uU291bmRTZWxlY3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbm90aWZpY2F0aW9uLXNvdW5kJyk7XHJcbiAgICBjb25zdCBub3RpZmljYXRpb25Wb2x1bWVJbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdub3RpZmljYXRpb24tdm9sdW1lJyk7XHJcbiAgICBjb25zdCBiYWNrZ3JvdW5kTm90aWZpY2F0aW9uQ2hlY2tib3ggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYmFja2dyb3VuZC1ub3RpZmljYXRpb24nKTtcclxuICAgIGNvbnN0IHBsYW50VGhlbWVTZWxlY3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGxhbnQtdGhlbWUnKTtcclxuICAgIFxyXG4gICAgLy8g7ISk7KCVIOuzgOqyvSDsi5wg7J2067Kk7Yq4XHJcbiAgICBub3RpZmljYXRpb25Tb3VuZFNlbGVjdC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBzYXZlU2V0dGluZ3MpO1xyXG4gICAgbm90aWZpY2F0aW9uVm9sdW1lSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBzYXZlU2V0dGluZ3MpO1xyXG4gICAgYmFja2dyb3VuZE5vdGlmaWNhdGlvbkNoZWNrYm94LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHNhdmVTZXR0aW5ncyk7XHJcbiAgICBwbGFudFRoZW1lU2VsZWN0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsICgpID0+IHtcclxuICAgICAgICBzYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICBwbGFudFN5c3RlbS5jaGFuZ2VUaGVtZShwbGFudFRoZW1lU2VsZWN0LnZhbHVlKTtcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICAvLyDshKTsoJUg7KCA7J6lIO2VqOyImFxyXG4gICAgZnVuY3Rpb24gc2F2ZVNldHRpbmdzKCkge1xyXG4gICAgICAgIGNvbnN0IHNldHRpbmdzID0ge1xyXG4gICAgICAgICAgICBub3RpZmljYXRpb25Tb3VuZDogbm90aWZpY2F0aW9uU291bmRTZWxlY3QudmFsdWUsXHJcbiAgICAgICAgICAgIG5vdGlmaWNhdGlvblZvbHVtZTogbm90aWZpY2F0aW9uVm9sdW1lSW5wdXQudmFsdWUsXHJcbiAgICAgICAgICAgIGJhY2tncm91bmROb3RpZmljYXRpb246IGJhY2tncm91bmROb3RpZmljYXRpb25DaGVja2JveC5jaGVja2VkLFxyXG4gICAgICAgICAgICBwbGFudFRoZW1lOiBwbGFudFRoZW1lU2VsZWN0LnZhbHVlXHJcbiAgICAgICAgfTtcclxuICAgICAgICBcclxuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndGltZXJTZXR0aW5ncycsIEpTT04uc3RyaW5naWZ5KHNldHRpbmdzKSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8g7JWM66a8IOyEpOyglSDsl4XrjbDsnbTtirhcclxuICAgICAgICBub3RpZmljYXRpb25NYW5hZ2VyLnNldFNvdW5kKHNldHRpbmdzLm5vdGlmaWNhdGlvblNvdW5kKTtcclxuICAgICAgICBub3RpZmljYXRpb25NYW5hZ2VyLnNldFZvbHVtZShzZXR0aW5ncy5ub3RpZmljYXRpb25Wb2x1bWUgLyAxMDApO1xyXG4gICAgICAgIG5vdGlmaWNhdGlvbk1hbmFnZXIuc2V0QmFja2dyb3VuZE5vdGlmaWNhdGlvbihzZXR0aW5ncy5iYWNrZ3JvdW5kTm90aWZpY2F0aW9uKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8g7ISk7KCVIOu2iOufrOyYpOq4sCDtlajsiJhcclxuICAgIGZ1bmN0aW9uIGxvYWRTZXR0aW5ncygpIHtcclxuICAgICAgICBjb25zdCBzYXZlZFNldHRpbmdzID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3RpbWVyU2V0dGluZ3MnKTtcclxuICAgICAgICBcclxuICAgICAgICBpZiAoc2F2ZWRTZXR0aW5ncykge1xyXG4gICAgICAgICAgICBjb25zdCBzZXR0aW5ncyA9IEpTT04ucGFyc2Uoc2F2ZWRTZXR0aW5ncyk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBub3RpZmljYXRpb25Tb3VuZFNlbGVjdC52YWx1ZSA9IHNldHRpbmdzLm5vdGlmaWNhdGlvblNvdW5kIHx8ICdiZWxsJztcclxuICAgICAgICAgICAgbm90aWZpY2F0aW9uVm9sdW1lSW5wdXQudmFsdWUgPSBzZXR0aW5ncy5ub3RpZmljYXRpb25Wb2x1bWUgfHwgODA7XHJcbiAgICAgICAgICAgIGJhY2tncm91bmROb3RpZmljYXRpb25DaGVja2JveC5jaGVja2VkID0gc2V0dGluZ3MuYmFja2dyb3VuZE5vdGlmaWNhdGlvbiAhPT0gdW5kZWZpbmVkID8gc2V0dGluZ3MuYmFja2dyb3VuZE5vdGlmaWNhdGlvbiA6IHRydWU7XHJcbiAgICAgICAgICAgIHBsYW50VGhlbWVTZWxlY3QudmFsdWUgPSBzZXR0aW5ncy5wbGFudFRoZW1lIHx8ICdpbmRvb3InO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8g7JWM66a8IOyEpOyglSDsl4XrjbDsnbTtirhcclxuICAgICAgICAgICAgbm90aWZpY2F0aW9uTWFuYWdlci5zZXRTb3VuZChzZXR0aW5ncy5ub3RpZmljYXRpb25Tb3VuZCk7XHJcbiAgICAgICAgICAgIG5vdGlmaWNhdGlvbk1hbmFnZXIuc2V0Vm9sdW1lKHNldHRpbmdzLm5vdGlmaWNhdGlvblZvbHVtZSAvIDEwMCk7XHJcbiAgICAgICAgICAgIG5vdGlmaWNhdGlvbk1hbmFnZXIuc2V0QmFja2dyb3VuZE5vdGlmaWNhdGlvbihzZXR0aW5ncy5iYWNrZ3JvdW5kTm90aWZpY2F0aW9uKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIOyLneusvCDthYzrp4gg7JeF642w7J207Yq4XHJcbiAgICAgICAgICAgIHBsYW50U3lzdGVtLmNoYW5nZVRoZW1lKHNldHRpbmdzLnBsYW50VGhlbWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8g7LSI6riwIOyEpOyglSDrtojrn6zsmKTquLBcclxuICAgIGxvYWRTZXR0aW5ncygpO1xyXG59ICJdLCJuYW1lcyI6WyJUaW1lciIsIl9jbGFzc0NhbGxDaGVjayIsImhvdXJzIiwibWludXRlcyIsInNlY29uZHMiLCJ0b3RhbFNlY29uZHMiLCJ0aW1lciIsImlzUGF1c2VkIiwiaXNBY3RpdmUiLCJvblVwZGF0ZSIsIm9uQ29tcGxldGUiLCJfY3JlYXRlQ2xhc3MiLCJrZXkiLCJ2YWx1ZSIsInN0YXJ0IiwiY29uc29sZSIsImVycm9yIiwiX3VwZGF0ZVRpbWVyRGlzcGxheSIsIl9zdGFydENvdW50ZG93biIsInBhdXNlIiwiY2xlYXJJbnRlcnZhbCIsInJlc3VtZSIsInJlc2V0IiwiZ2V0UmVtYWluaW5nVGltZSIsIl90aGlzIiwic3RhcnRUaW1lIiwiRGF0ZSIsIm5vdyIsImluaXRpYWxUb3RhbFNlY29uZHMiLCJzZXRJbnRlcnZhbCIsImVsYXBzZWRTZWNvbmRzIiwiTWF0aCIsImZsb29yIiwiU3RvcHdhdGNoIiwiZWxhcHNlZFRpbWUiLCJsYXBzIiwibGFzdExhcFRpbWUiLCJfc3RhcnRUaW1lciIsImdldExhcFRpbWUiLCJjdXJyZW50VGltZSIsImxhcFRpbWUiLCJfdGhpcyRfY29udmVydFRpbWUiLCJfY29udmVydFRpbWUiLCJtaWxsaXNlY29uZHMiLCJsYXAiLCJ0aW1lIiwicHVzaCIsIl90aGlzJF9jb252ZXJ0VGltZTIiLCJ0aW1lTXMiLCJQb21vZG9ybyIsInNldHRpbmdzIiwid29ya01pbnV0ZXMiLCJzaG9ydEJyZWFrTWludXRlcyIsImxvbmdCcmVha01pbnV0ZXMiLCJ0b3RhbEN5Y2xlcyIsImN1cnJlbnRNb2RlIiwiY3VycmVudEN5Y2xlIiwib25Nb2RlQ2hhbmdlIiwib25Xb3JrU2Vzc2lvbkNvbXBsZXRlIiwic2V0U2V0dGluZ3MiLCJuZXdTZXR0aW5ncyIsIl9vYmplY3RTcHJlYWQiLCJfaGFuZGxlTW9kZUNvbXBsZXRlIiwibmV4dE1vZGUiLCJQbGFudFN5c3RlbSIsImN1cnJlbnRQbGFudCIsImlkIiwibmFtZSIsImxldmVsIiwiZXhwZXJpZW5jZSIsIm1heEV4cGVyaWVuY2UiLCJzdGFnZSIsIm1heFN0YWdlIiwicGxhbnRUaGVtZXMiLCJpbmRvb3IiLCJzdGFnZXMiLCJyZXF1aXJlZExldmVsIiwiZ2FyZGVuIiwidHJvcGljYWwiLCJzdWNjdWxlbnQiLCJjb2xsZWN0aW9uIiwiY3VycmVudFRoZW1lIiwiaW5pdGlhbGl6ZSIsIl9sb2FkRGF0YSIsIl91cGRhdGVQbGFudERpc3BsYXkiLCJfdXBkYXRlUGxhbnRJbmZvIiwiX3VwZGF0ZUNvbGxlY3Rpb24iLCJzZXRUaGVtZSIsInRoZW1lIiwiX3NhdmVEYXRhIiwiYWRkRXhwZXJpZW5jZSIsImV4cCIsIl9jaGVja1VubG9ja3MiLCJfY2FsY3VsYXRlU3RhZ2UiLCJjaGFuZ2VQbGFudCIsInBsYW50SWQiLCJ0aGVtZUtleSIsIl9maW5kUGxhbnRUaGVtZSIsInBsYW50SW5mbyIsImZpbmQiLCJwIiwibGV2ZWxQZXJTdGFnZSIsImNhbGN1bGF0ZWRTdGFnZSIsIm1pbiIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwicGxhbnQiLCJ1bmxvY2tlZCIsImZvdW5kIiwicGxhbnRJbWFnZSIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJpIiwicXVlcnlTZWxlY3RvciIsImNsYXNzTGlzdCIsInJlbW92ZSIsImNvbmNhdCIsImFkZCIsInBsYW50TmFtZSIsInBsYW50TGV2ZWwiLCJwbGFudEV4cCIsInBsYW50RXhwUHJvZ3Jlc3MiLCJ0ZXh0Q29udGVudCIsImV4cFBlcmNlbnRhZ2UiLCJzdHlsZSIsIndpZHRoIiwiX3RoaXMyIiwiY29sbGVjdGlvbkdyaWQiLCJpbm5lckhUTUwiLCJfdGhpczIkY29sbGVjdGlvbiRwbGEiLCJpc1VubG9ja2VkIiwicGxhbnRJdGVtIiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJhcHBlbmRDaGlsZCIsImRhdGEiLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwiSlNPTiIsInN0cmluZ2lmeSIsInNhdmVkRGF0YSIsImdldEl0ZW0iLCJwYXJzZSIsImluaXRpYWxQbGFudCIsIk5vdGlmaWNhdGlvbk1hbmFnZXIiLCJzb3VuZCIsInZvbHVtZSIsImJhY2tncm91bmROb3RpZmljYXRpb24iLCJfcmVxdWVzdE5vdGlmaWNhdGlvblBlcm1pc3Npb24iLCJzZXRTb3VuZCIsInNvdW5kTmFtZSIsImluY2x1ZGVzIiwic2V0Vm9sdW1lIiwic2V0QmFja2dyb3VuZE5vdGlmaWNhdGlvbiIsImVuYWJsZSIsInBsYXlOb3RpZmljYXRpb24iLCJ0aXRsZSIsIm1lc3NhZ2UiLCJfcGxheVNvdW5kIiwiX3Nob3dOb3RpZmljYXRpb24iLCJhdWRpb0VsZW1lbnQiLCJwbGF5UHJvbWlzZSIsInBsYXkiLCJ1bmRlZmluZWQiLCJ3YXJuIiwiaTE4biIsIndpbmRvdyIsIkZpbGVUb1FSIiwibm90U3VwcG9ydGVkTXNnIiwidHJhbnNsYXRlIiwiTm90aWZpY2F0aW9uIiwicGVybWlzc2lvbiIsIm5vdGlmaWNhdGlvbiIsImJvZHkiLCJpY29uIiwib25jbGljayIsImZvY3VzIiwiY2xvc2UiLCJzZXRUaW1lb3V0IiwicmVxdWVzdFBlcm1pc3Npb24iLCJ0aGVuIiwiZ3JhbnRlZE1zZyIsImxvZyIsImVycm9yTXNnIiwidGltZXJzIiwiTWFwIiwidGltZXJJZENvdW50ZXIiLCJub3RpZmljYXRpb25NYW5hZ2VyIiwic3RvcHdhdGNoIiwicG9tb2Rvcm8iLCJwbGFudFN5c3RlbSIsInNldHVwVGFicyIsInNldHVwTXVsdGlwbGVUaW1lcnMiLCJpbml0aWFsaXplU3RvcHdhdGNoIiwiaW5pdGlhbGl6ZVBvbW9kb3JvIiwiaW5pdGlhbGl6ZVNldHRpbmdzIiwiYWRkVGltZXJCdG4iLCJlIiwicHJldmVudERlZmF1bHQiLCJhZGROZXdUaW1lciIsImFkZE5ld1RpbWVyR2xvYmFsIiwidGFiQnV0dG9ucyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJ0YWJDb250ZW50cyIsImJ1dHRvbiIsInRhYk5hbWUiLCJkYXRhc2V0IiwidGFiIiwiYnRuIiwiY29udGVudCIsInBsYW50Q29udGFpbmVyIiwiZGlzcGxheSIsImluaXRpYWxUaW1lckl0ZW0iLCJ0aW1lcklkIiwidGltZXJJbnN0YW5jZSIsInNldCIsInNldHVwVGltZXJDb250cm9scyIsImxvYWRTYXZlZFRpbWVycyIsInNhdmVBY3RpdmVUaW1lcnMiLCJ0aW1lcnNMaXN0RWxlbSIsIlN0cmluZyIsIm5ld1RpbWVyRWxlbSIsImNsb3NlQnRuIiwicmVtb3ZlVGltZXIiLCJzY3JvbGxJbnRvVmlldyIsImJlaGF2aW9yIiwiYWxlcnQiLCJ0aW1lckVsZW0iLCJnZXQiLCJvcGFjaXR5IiwidHJhbnNmb3JtIiwidHJhbnNpdGlvbiIsInNhdmVkVGltZXJzIiwiaG91cnNJbnB1dCIsIm1pbnV0ZXNJbnB1dCIsInNlY29uZHNJbnB1dCIsInRpbWVyTGFiZWwiLCJzdGFydEJ0biIsInBhdXNlQnRuIiwicmVzZXRCdG4iLCJwcmVzZXRCdG5zIiwidGltZXJIb3VycyIsInRpbWVyTWludXRlcyIsInRpbWVyU2Vjb25kcyIsInRvU3RyaW5nIiwicGFkU3RhcnQiLCJ0cmltIiwicmVzZXRUaW1lckNvbnRyb2xzIiwiYXVkaW8iLCJBdWRpbyIsInBhcnNlSW50IiwiZGlzYWJsZWQiLCJhY3RpdmVUaW1lcnMiLCJyZW1haW5pbmdUaW1lIiwibGFiZWwiLCJsZW5ndGgiLCJlbnRyaWVzIiwiX3JlZiIsIl9yZWYyIiwiX3NsaWNlZFRvQXJyYXkiLCJ0aW1lckRhdGEiLCJtYXhJZCIsIm1heCIsImFwcGx5IiwiX3RvQ29uc3VtYWJsZUFycmF5IiwibWFwIiwibGFwQnRuIiwibGFwc0xpc3QiLCJzdG9wd2F0Y2hIb3VycyIsInN0b3B3YXRjaE1pbnV0ZXMiLCJzdG9wd2F0Y2hTZWNvbmRzIiwic3RvcHdhdGNoTWlsbGlzZWNvbmRzIiwicmVzZXRTdG9wd2F0Y2hDb250cm9scyIsImxhcEluZGV4IiwibGFwSXRlbSIsImZvcm1hdFRpbWUiLCJ0aW1lT2JqIiwicG9tb2Rvcm9NaW51dGVzIiwicG9tb2Rvcm9TZWNvbmRzIiwic3RhdHVzVGV4dCIsImN5Y2xlQ291bnQiLCJjdXJyZW50TW9kZVRpbWUiLCJ3b3JrVGltZSIsImJyZWFrVGltZSIsIndvcmtNaW51dGVzSW5wdXQiLCJzaG9ydEJyZWFrTWludXRlc0lucHV0IiwibG9uZ0JyZWFrTWludXRlc0lucHV0IiwicG9tb2Rvcm9DeWNsZXNJbnB1dCIsInVwZGF0ZVBvbW9kb3JvU2V0dGluZ3MiLCJ1cGRhdGVDdXJyZW50TW9kZVRpbWUiLCJ1cGRhdGVUaW1lRGlzcGxheXMiLCJ3b3JrTWluIiwic2hvcnRCcmVha01pbiIsIm1vZGUiLCJyZXNldFBvbW9kb3JvQ29udHJvbHMiLCJjb21wbGV0ZWRDeWNsZXMiLCJub3RpZmljYXRpb25Tb3VuZFNlbGVjdCIsIm5vdGlmaWNhdGlvblZvbHVtZUlucHV0IiwiYmFja2dyb3VuZE5vdGlmaWNhdGlvbkNoZWNrYm94IiwicGxhbnRUaGVtZVNlbGVjdCIsInNhdmVTZXR0aW5ncyIsImNoYW5nZVRoZW1lIiwibm90aWZpY2F0aW9uU291bmQiLCJub3RpZmljYXRpb25Wb2x1bWUiLCJjaGVja2VkIiwicGxhbnRUaGVtZSIsImxvYWRTZXR0aW5ncyIsInNhdmVkU2V0dGluZ3MiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///15\n")}},Q=>{var U;U=15,Q(Q.s=U)}]);