"use strict";(self.webpackChunkfiletoqr=self.webpackChunkfiletoqr||[]).push([[638],{15:()=>{eval("\n;// ./assets/js/core/Timer.js\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\r\n * 타이머 클래스\r\n * 카운트다운 타이머 기능을 제공합니다.\r\n */\nvar Timer = /*#__PURE__*/function () {\n  function Timer() {\n    _classCallCheck(this, Timer);\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.totalSeconds = 0;\n    this.timer = null;\n    this.isPaused = false;\n    this.isActive = false;\n\n    // 콜백 함수\n    this.onUpdate = null;\n    this.onComplete = null;\n  }\n\n  /**\r\n   * 타이머 시작\r\n   * @param {number} hours - 시간\r\n   * @param {number} minutes - 분\r\n   * @param {number} seconds - 초\r\n   */\n  return _createClass(Timer, [{\n    key: \"start\",\n    value: function start(hours, minutes, seconds) {\n      // 시간 설정\n      this.hours = hours || 0;\n      this.minutes = minutes || 0;\n      this.seconds = seconds || 0;\n\n      // 총 초 계산\n      this.totalSeconds = this.hours * 3600 + this.minutes * 60 + this.seconds;\n      if (this.totalSeconds <= 0) {\n        console.error('타이머 시간은 0보다 커야 합니다.');\n        return;\n      }\n      this.isActive = true;\n      this.isPaused = false;\n\n      // 타이머 업데이트 및 시작\n      this._updateTimerDisplay();\n      this._startCountdown();\n    }\n\n    /**\r\n     * 타이머 일시 정지\r\n     */\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      if (!this.isActive || !this.timer) return;\n      clearInterval(this.timer);\n      this.timer = null;\n      this.isPaused = true;\n    }\n\n    /**\r\n     * 일시 정지된 타이머 재개\r\n     */\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      if (!this.isActive || !this.isPaused) return;\n      this.isPaused = false;\n      this._startCountdown();\n    }\n\n    /**\r\n     * 타이머 초기화\r\n     */\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      clearInterval(this.timer);\n      this.timer = null;\n      this.hours = 0;\n      this.minutes = 0;\n      this.seconds = 0;\n      this.totalSeconds = 0;\n      this.isActive = false;\n      this.isPaused = false;\n\n      // 타이머 표시 업데이트\n      if (typeof this.onUpdate === 'function') {\n        this.onUpdate(0, 0, 0);\n      }\n    }\n\n    /**\r\n     * 현재 남은 시간 정보 가져오기\r\n     * @returns {Object} 시간, 분, 초 정보를 담은 객체\r\n     */\n  }, {\n    key: \"getRemainingTime\",\n    value: function getRemainingTime() {\n      return {\n        hours: this.hours,\n        minutes: this.minutes,\n        seconds: this.seconds\n      };\n    }\n\n    /**\r\n     * 카운트다운 시작\r\n     * @private\r\n     */\n  }, {\n    key: \"_startCountdown\",\n    value: function _startCountdown() {\n      var _this = this;\n      if (this.timer !== null) {\n        clearInterval(this.timer);\n      }\n      var startTime = Date.now();\n      var initialTotalSeconds = this.totalSeconds;\n      this.timer = setInterval(function () {\n        // 경과 시간 계산\n        var elapsedSeconds = Math.floor((Date.now() - startTime) / 1000);\n        _this.totalSeconds = initialTotalSeconds - elapsedSeconds;\n        if (_this.totalSeconds <= 0) {\n          // 타이머 완료\n          clearInterval(_this.timer);\n          _this.timer = null;\n          _this.totalSeconds = 0;\n          _this.isActive = false;\n          _this._updateTimerDisplay();\n\n          // 완료 콜백 호출\n          if (typeof _this.onComplete === 'function') {\n            _this.onComplete();\n          }\n          return;\n        }\n        _this._updateTimerDisplay();\n      }, 100); // 더 부드러운 업데이트를 위해 100ms 간격으로 설정\n    }\n\n    /**\r\n     * 타이머 표시 업데이트\r\n     * @private\r\n     */\n  }, {\n    key: \"_updateTimerDisplay\",\n    value: function _updateTimerDisplay() {\n      // 시간, 분, 초 계산\n      this.hours = Math.floor(this.totalSeconds / 3600);\n      this.minutes = Math.floor(this.totalSeconds % 3600 / 60);\n      this.seconds = this.totalSeconds % 60;\n\n      // 업데이트 콜백 호출\n      if (typeof this.onUpdate === 'function') {\n        this.onUpdate(this.hours, this.minutes, this.seconds);\n      }\n    }\n  }]);\n}();\n;// ./assets/js/core/Stopwatch.js\nfunction Stopwatch_typeof(o) { \"@babel/helpers - typeof\"; return Stopwatch_typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, Stopwatch_typeof(o); }\nfunction Stopwatch_classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction Stopwatch_defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, Stopwatch_toPropertyKey(o.key), o); } }\nfunction Stopwatch_createClass(e, r, t) { return r && Stopwatch_defineProperties(e.prototype, r), t && Stopwatch_defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction Stopwatch_toPropertyKey(t) { var i = Stopwatch_toPrimitive(t, \"string\"); return \"symbol\" == Stopwatch_typeof(i) ? i : i + \"\"; }\nfunction Stopwatch_toPrimitive(t, r) { if (\"object\" != Stopwatch_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != Stopwatch_typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\r\n * 스톱워치 클래스\r\n * 시간 측정 기능을 제공합니다.\r\n */\nvar Stopwatch = /*#__PURE__*/function () {\n  function Stopwatch() {\n    Stopwatch_classCallCheck(this, Stopwatch);\n    this.startTime = 0;\n    this.elapsedTime = 0;\n    this.timer = null;\n    this.isPaused = false;\n    this.isActive = false;\n    this.laps = [];\n    this.lastLapTime = 0;\n\n    // 콜백 함수\n    this.onUpdate = null;\n  }\n\n  /**\r\n   * 스톱워치 시작\r\n   */\n  return Stopwatch_createClass(Stopwatch, [{\n    key: \"start\",\n    value: function start() {\n      if (this.isActive && !this.isPaused) return;\n      if (!this.isActive) {\n        // 새로 시작하는 경우\n        this.startTime = Date.now();\n        this.elapsedTime = 0;\n        this.laps = [];\n        this.lastLapTime = 0;\n      } else if (this.isPaused) {\n        // 일시 정지 후 재개하는 경우\n        this.startTime = Date.now() - this.elapsedTime;\n      }\n      this.isActive = true;\n      this.isPaused = false;\n\n      // 스톱워치 업데이트 시작\n      this._startTimer();\n    }\n\n    /**\r\n     * 스톱워치 일시 정지\r\n     */\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      if (!this.isActive || this.isPaused || !this.timer) return;\n      clearInterval(this.timer);\n      this.timer = null;\n      this.isPaused = true;\n\n      // 일시 정지 시점까지의 경과 시간 저장\n      this.elapsedTime = Date.now() - this.startTime;\n    }\n\n    /**\r\n     * 일시 정지된 스톱워치 재개\r\n     */\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      if (!this.isActive || !this.isPaused) return;\n      this.start();\n    }\n\n    /**\r\n     * 스톱워치 초기화\r\n     */\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      clearInterval(this.timer);\n      this.timer = null;\n      this.startTime = 0;\n      this.elapsedTime = 0;\n      this.isActive = false;\n      this.isPaused = false;\n      this.laps = [];\n      this.lastLapTime = 0;\n\n      // 스톱워치 표시 업데이트\n      if (typeof this.onUpdate === 'function') {\n        this.onUpdate(0, 0, 0, 0);\n      }\n    }\n\n    /**\r\n     * 랩 타임 기록\r\n     * @returns {Object} 랩 타임 정보\r\n     */\n  }, {\n    key: \"getLapTime\",\n    value: function getLapTime() {\n      if (!this.isActive) return null;\n      var currentTime = this.isPaused ? this.elapsedTime : Date.now() - this.startTime;\n      var lapTime = currentTime - this.lastLapTime;\n      this.lastLapTime = currentTime;\n\n      // 랩 시간을 시, 분, 초, 밀리초로 변환\n      var _this$_convertTime = this._convertTime(lapTime),\n        hours = _this$_convertTime.hours,\n        minutes = _this$_convertTime.minutes,\n        seconds = _this$_convertTime.seconds,\n        milliseconds = _this$_convertTime.milliseconds;\n\n      // 랩 정보 저장 및 반환\n      var lap = {\n        time: lapTime,\n        hours: hours,\n        minutes: minutes,\n        seconds: seconds,\n        milliseconds: milliseconds\n      };\n      this.laps.push(lap);\n      return lap;\n    }\n\n    /**\r\n     * 스톱워치 업데이트 시작\r\n     * @private\r\n     */\n  }, {\n    key: \"_startTimer\",\n    value: function _startTimer() {\n      var _this = this;\n      if (this.timer !== null) {\n        clearInterval(this.timer);\n      }\n      this.timer = setInterval(function () {\n        // 경과 시간 계산\n        var elapsedTime = Date.now() - _this.startTime;\n\n        // 시간 변환 및 표시 업데이트\n        var _this$_convertTime2 = _this._convertTime(elapsedTime),\n          hours = _this$_convertTime2.hours,\n          minutes = _this$_convertTime2.minutes,\n          seconds = _this$_convertTime2.seconds,\n          milliseconds = _this$_convertTime2.milliseconds;\n\n        // 업데이트 콜백 호출\n        if (typeof _this.onUpdate === 'function') {\n          _this.onUpdate(hours, minutes, seconds, milliseconds);\n        }\n      }, 10); // 더 정확한 밀리초 표시를 위해 10ms 간격으로 설정\n    }\n\n    /**\r\n     * 밀리초 단위 시간을 시, 분, 초, 밀리초로 변환\r\n     * @param {number} timeMs - 밀리초 단위 시간\r\n     * @returns {Object} 변환된 시간 정보\r\n     * @private\r\n     */\n  }, {\n    key: \"_convertTime\",\n    value: function _convertTime(timeMs) {\n      // 시간 단위 변환\n      var totalSeconds = Math.floor(timeMs / 1000);\n      var hours = Math.floor(totalSeconds / 3600);\n      var minutes = Math.floor(totalSeconds % 3600 / 60);\n      var seconds = totalSeconds % 60;\n      var milliseconds = Math.floor(timeMs % 1000 / 10); // 2자리 밀리초\n\n      return {\n        hours: hours,\n        minutes: minutes,\n        seconds: seconds,\n        milliseconds: milliseconds\n      };\n    }\n  }]);\n}();\n;// ./assets/js/core/Pomodoro.js\nfunction Pomodoro_typeof(o) { \"@babel/helpers - typeof\"; return Pomodoro_typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, Pomodoro_typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = Pomodoro_toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction Pomodoro_classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction Pomodoro_defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, Pomodoro_toPropertyKey(o.key), o); } }\nfunction Pomodoro_createClass(e, r, t) { return r && Pomodoro_defineProperties(e.prototype, r), t && Pomodoro_defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction Pomodoro_toPropertyKey(t) { var i = Pomodoro_toPrimitive(t, \"string\"); return \"symbol\" == Pomodoro_typeof(i) ? i : i + \"\"; }\nfunction Pomodoro_toPrimitive(t, r) { if (\"object\" != Pomodoro_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != Pomodoro_typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\r\n * 포모도로 클래스\r\n * 포모도로 기법 타이머 기능을 제공합니다.\r\n */\nvar Pomodoro = /*#__PURE__*/function () {\n  function Pomodoro() {\n    Pomodoro_classCallCheck(this, Pomodoro);\n    // 기본 포모도로 설정\n    this.settings = {\n      workMinutes: 25,\n      shortBreakMinutes: 5,\n      longBreakMinutes: 15,\n      totalCycles: 4\n    };\n    this.totalSeconds = this.settings.workMinutes * 60;\n    this.timer = null;\n    this.isPaused = false;\n    this.isActive = false;\n    this.currentMode = 'work'; // 'work', 'shortBreak', 'longBreak'\n    this.currentCycle = 0;\n\n    // 콜백 함수\n    this.onUpdate = null;\n    this.onModeChange = null;\n    this.onComplete = null;\n    this.onWorkSessionComplete = null;\n  }\n\n  /**\r\n   * 포모도로 설정 업데이트\r\n   * @param {Object} newSettings - 새 설정\r\n   */\n  return Pomodoro_createClass(Pomodoro, [{\n    key: \"setSettings\",\n    value: function setSettings(newSettings) {\n      // 기존 설정에 새 설정 병합\n      this.settings = _objectSpread(_objectSpread({}, this.settings), newSettings);\n\n      // 활성 상태가 아닐 때 최초 타이머 시간 설정\n      if (!this.isActive) {\n        this.totalSeconds = this.settings.workMinutes * 60;\n      }\n    }\n\n    /**\r\n     * 포모도로 타이머 시작\r\n     */\n  }, {\n    key: \"start\",\n    value: function start() {\n      if (this.isActive && !this.isPaused) return;\n      if (!this.isActive) {\n        // 새로 시작하는 경우 작업 단계로 시작\n        this.currentMode = 'work';\n        this.totalSeconds = this.settings.workMinutes * 60;\n        this.currentCycle = 0;\n      }\n      this.isActive = true;\n      this.isPaused = false;\n\n      // 타이머 시작\n      this._startCountdown();\n    }\n\n    /**\r\n     * 포모도로 타이머 일시 정지\r\n     */\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      if (!this.isActive || this.isPaused || !this.timer) return;\n      clearInterval(this.timer);\n      this.timer = null;\n      this.isPaused = true;\n    }\n\n    /**\r\n     * 일시 정지된 포모도로 타이머 재개\r\n     */\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      if (!this.isActive || !this.isPaused) return;\n      this.isPaused = false;\n      this._startCountdown();\n    }\n\n    /**\r\n     * 포모도로 타이머 초기화\r\n     */\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      clearInterval(this.timer);\n      this.timer = null;\n      this.isActive = false;\n      this.isPaused = false;\n      this.currentMode = 'work';\n      this.currentCycle = 0;\n      this.totalSeconds = this.settings.workMinutes * 60;\n\n      // 포모도로 표시 업데이트\n      this._updateTimerDisplay();\n    }\n\n    /**\r\n     * 카운트다운 시작\r\n     * @private\r\n     */\n  }, {\n    key: \"_startCountdown\",\n    value: function _startCountdown() {\n      var _this = this;\n      if (this.timer !== null) {\n        clearInterval(this.timer);\n      }\n      var startTime = Date.now();\n      var initialTotalSeconds = this.totalSeconds;\n      this.timer = setInterval(function () {\n        // 경과 시간 계산\n        var elapsedSeconds = Math.floor((Date.now() - startTime) / 1000);\n        _this.totalSeconds = initialTotalSeconds - elapsedSeconds;\n        if (_this.totalSeconds <= 0) {\n          // 현재 단계 완료\n          clearInterval(_this.timer);\n          _this.timer = null;\n          _this._handleModeComplete();\n          return;\n        }\n        _this._updateTimerDisplay();\n      }, 100); // 더 부드러운 업데이트를 위해 100ms 간격으로 설정\n    }\n\n    /**\r\n     * 모드 완료 처리\r\n     * @private\r\n     */\n  }, {\n    key: \"_handleModeComplete\",\n    value: function _handleModeComplete() {\n      var nextMode;\n      if (this.currentMode === 'work') {\n        // 작업 세션 완료 콜백 호출\n        if (typeof this.onWorkSessionComplete === 'function') {\n          this.onWorkSessionComplete();\n        }\n\n        // 한 사이클은 (작업 + 휴식)을 의미\n        // 작업을 완료하면 휴식으로 전환하기 전에 사이클 카운트를 증가시키지 않음\n\n        // 다음 세션이 짧은 휴식인지 긴 휴식인지 결정\n        if ((this.currentCycle + 1) % this.settings.totalCycles === 0 && this.currentCycle > 0) {\n          // 긴 휴식 시간\n          nextMode = 'longBreak';\n          this.totalSeconds = this.settings.longBreakMinutes * 60;\n        } else {\n          // 짧은 휴식 시간\n          nextMode = 'shortBreak';\n          this.totalSeconds = this.settings.shortBreakMinutes * 60;\n        }\n      } else {\n        // 휴식 단계 완료 시\n        // 휴식 완료 후 사이클 카운트 증가 (한 사이클 완료)\n        this.currentCycle++;\n\n        // 모든 사이클 완료 확인\n        if (this.currentCycle >= this.settings.totalCycles) {\n          // 모든 사이클 완료\n          this.isActive = false;\n          this.currentMode = 'work';\n          this.totalSeconds = this.settings.workMinutes * 60;\n\n          // 완료 콜백 호출\n          if (typeof this.onComplete === 'function') {\n            this.onComplete(this.currentCycle);\n          }\n\n          // 표시 업데이트 및 종료\n          this._updateTimerDisplay();\n          return;\n        }\n\n        // 다음 작업 단계로\n        nextMode = 'work';\n        this.totalSeconds = this.settings.workMinutes * 60;\n      }\n\n      // 모드 전환 콜백 호출\n      if (typeof this.onModeChange === 'function') {\n        this.onModeChange(nextMode);\n      }\n\n      // 다음 모드로 전환\n      this.currentMode = nextMode;\n\n      // 타이머 표시 업데이트\n      this._updateTimerDisplay();\n\n      // 다음 단계 자동 시작\n      this._startCountdown();\n    }\n\n    /**\r\n     * 타이머 표시 업데이트\r\n     * @private\r\n     */\n  }, {\n    key: \"_updateTimerDisplay\",\n    value: function _updateTimerDisplay() {\n      // 분, 초 계산\n      var minutes = Math.floor(this.totalSeconds / 60);\n      var seconds = this.totalSeconds % 60;\n\n      // 업데이트 콜백 호출\n      if (typeof this.onUpdate === 'function') {\n        this.onUpdate(minutes, seconds, this.currentCycle, this.settings.totalCycles, this.currentMode);\n      }\n    }\n  }]);\n}();\n;// ./assets/js/core/PlantSystem.js\nfunction PlantSystem_typeof(o) { \"@babel/helpers - typeof\"; return PlantSystem_typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, PlantSystem_typeof(o); }\nfunction PlantSystem_classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction PlantSystem_defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, PlantSystem_toPropertyKey(o.key), o); } }\nfunction PlantSystem_createClass(e, r, t) { return r && PlantSystem_defineProperties(e.prototype, r), t && PlantSystem_defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction PlantSystem_toPropertyKey(t) { var i = PlantSystem_toPrimitive(t, \"string\"); return \"symbol\" == PlantSystem_typeof(i) ? i : i + \"\"; }\nfunction PlantSystem_toPrimitive(t, r) { if (\"object\" != PlantSystem_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != PlantSystem_typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\r\n * 가상 식물 시스템 클래스\r\n * 식물 성장 및 관리 기능을 제공합니다.\r\n */\nvar PlantSystem = /*#__PURE__*/function () {\n  function PlantSystem() {\n    PlantSystem_classCallCheck(this, PlantSystem);\n    // 현재 식물 상태\n    this.currentPlant = {\n      id: 'sprout',\n      name: '새싹',\n      level: 0,\n      experience: 0,\n      maxExperience: 100,\n      stage: 0,\n      maxStage: 5\n    };\n\n    // 테마별 식물 정보\n    this.plantThemes = {\n      indoor: [{\n        id: 'pothos',\n        name: '스킨답서스',\n        stages: 5,\n        requiredLevel: 0\n      }, {\n        id: 'cactus',\n        name: '선인장',\n        stages: 5,\n        requiredLevel: 3\n      }, {\n        id: 'ficus',\n        name: '고무나무',\n        stages: 5,\n        requiredLevel: 5\n      }, {\n        id: 'moneyPlant',\n        name: '행운목',\n        stages: 5,\n        requiredLevel: 8\n      }, {\n        id: 'orchid',\n        name: '서양란',\n        stages: 5,\n        requiredLevel: 12\n      }],\n      garden: [{\n        id: 'tulip',\n        name: '튤립',\n        stages: 5,\n        requiredLevel: 0\n      }, {\n        id: 'rose',\n        name: '장미',\n        stages: 5,\n        requiredLevel: 3\n      }, {\n        id: 'sunflower',\n        name: '해바라기',\n        stages: 5,\n        requiredLevel: 5\n      }, {\n        id: 'lavender',\n        name: '라벤더',\n        stages: 5,\n        requiredLevel: 8\n      }, {\n        id: 'daisy',\n        name: '데이지',\n        stages: 5,\n        requiredLevel: 12\n      }],\n      tropical: [{\n        id: 'monstera',\n        name: '몬스테라',\n        stages: 5,\n        requiredLevel: 0\n      }, {\n        id: 'palmTree',\n        name: '야자수',\n        stages: 5,\n        requiredLevel: 3\n      }, {\n        id: 'birdOfParadise',\n        name: '극락조',\n        stages: 5,\n        requiredLevel: 5\n      }, {\n        id: 'anthurium',\n        name: '안스리움',\n        stages: 5,\n        requiredLevel: 8\n      }, {\n        id: 'hybiscus',\n        name: '히비스커스',\n        stages: 5,\n        requiredLevel: 12\n      }],\n      succulent: [{\n        id: 'echeveria',\n        name: '에케베리아',\n        stages: 5,\n        requiredLevel: 0\n      }, {\n        id: 'aloe',\n        name: '알로에',\n        stages: 5,\n        requiredLevel: 3\n      }, {\n        id: 'haworthia',\n        name: '하월시아',\n        stages: 5,\n        requiredLevel: 5\n      }, {\n        id: 'jadePlant',\n        name: '금전수',\n        stages: 5,\n        requiredLevel: 8\n      }, {\n        id: 'burrosTail',\n        name: '달꼬리',\n        stages: 5,\n        requiredLevel: 12\n      }]\n    };\n\n    // 사용자 컬렉션\n    this.collection = {};\n\n    // 현재 테마\n    this.currentTheme = 'indoor';\n  }\n\n  /**\r\n   * 식물 시스템 초기화\r\n   */\n  return PlantSystem_createClass(PlantSystem, [{\n    key: \"initialize\",\n    value: function initialize() {\n      // 로컬 스토리지에서 저장된 데이터 로드\n      this._loadData();\n\n      // UI 업데이트\n      this._updatePlantDisplay();\n      this._updatePlantInfo();\n      this._updateCollection();\n    }\n\n    /**\r\n     * 식물 테마 설정\r\n     * @param {string} theme - 테마 (indoor, garden, tropical, succulent)\r\n     */\n  }, {\n    key: \"setTheme\",\n    value: function setTheme(theme) {\n      if (!this.plantThemes[theme]) return;\n      this.currentTheme = theme;\n\n      // 테마 변경 시 UI 업데이트\n      this._updateCollection();\n      this._saveData();\n    }\n\n    /**\r\n     * 경험치 추가\r\n     * @param {number} exp - 추가할 경험치\r\n     */\n  }, {\n    key: \"addExperience\",\n    value: function addExperience(exp) {\n      if (exp <= 0) return;\n      this.currentPlant.experience += exp;\n\n      // 레벨업 체크\n      while (this.currentPlant.experience >= this.currentPlant.maxExperience) {\n        this.currentPlant.experience -= this.currentPlant.maxExperience;\n        this.currentPlant.level++;\n\n        // 새 식물 잠금 해제 확인\n        this._checkUnlocks();\n\n        // 최대 경험치 증가 (레벨에 따라)\n        this.currentPlant.maxExperience = 100 + this.currentPlant.level * 20;\n      }\n\n      // 성장 단계 계산\n      this._calculateStage();\n\n      // UI 업데이트\n      this._updatePlantDisplay();\n      this._updatePlantInfo();\n      this._updateCollection();\n\n      // 데이터 저장\n      this._saveData();\n    }\n\n    /**\r\n     * 식물 변경\r\n     * @param {string} plantId - 식물 ID\r\n     */\n  }, {\n    key: \"changePlant\",\n    value: function changePlant(plantId) {\n      // 컬렉션에 있는 식물인지 확인\n      if (!this.collection[plantId]) return;\n      var themeKey = this._findPlantTheme(plantId);\n      if (!themeKey) return;\n      var plantInfo = this.plantThemes[themeKey].find(function (p) {\n        return p.id === plantId;\n      });\n      if (!plantInfo) return;\n\n      // 현재 식물 업데이트\n      this.currentPlant.id = plantId;\n      this.currentPlant.name = plantInfo.name;\n      this.currentPlant.maxStage = plantInfo.stages;\n\n      // 성장 단계 재계산\n      this._calculateStage();\n\n      // UI 업데이트\n      this._updatePlantDisplay();\n      this._updatePlantInfo();\n\n      // 데이터 저장\n      this._saveData();\n    }\n\n    /**\r\n     * 성장 단계 계산\r\n     * @private\r\n     */\n  }, {\n    key: \"_calculateStage\",\n    value: function _calculateStage() {\n      // 레벨에 따른 성장 단계 계산 (0부터 maxStage까지)\n      var levelPerStage = 3; // 3레벨마다 성장\n      var calculatedStage = Math.min(Math.floor(this.currentPlant.level / levelPerStage), this.currentPlant.maxStage);\n      this.currentPlant.stage = calculatedStage;\n    }\n\n    /**\r\n     * 새 식물 잠금 해제 확인\r\n     * @private\r\n     */\n  }, {\n    key: \"_checkUnlocks\",\n    value: function _checkUnlocks() {\n      var _this = this;\n      Object.keys(this.plantThemes).forEach(function (theme) {\n        _this.plantThemes[theme].forEach(function (plant) {\n          if (_this.currentPlant.level >= plant.requiredLevel) {\n            // 컬렉션에 추가\n            _this.collection[plant.id] = {\n              id: plant.id,\n              name: plant.name,\n              theme: theme,\n              unlocked: true\n            };\n          }\n        });\n      });\n    }\n\n    /**\r\n     * 식물이 속한 테마 찾기\r\n     * @param {string} plantId - 식물 ID\r\n     * @returns {string|null} - 테마 키\r\n     * @private\r\n     */\n  }, {\n    key: \"_findPlantTheme\",\n    value: function _findPlantTheme(plantId) {\n      for (var theme in this.plantThemes) {\n        var found = this.plantThemes[theme].find(function (p) {\n          return p.id === plantId;\n        });\n        if (found) return theme;\n      }\n      return null;\n    }\n\n    /**\r\n     * 식물 표시 업데이트\r\n     * @private\r\n     */\n  }, {\n    key: \"_updatePlantDisplay\",\n    value: function _updatePlantDisplay() {\n      var plantImage = document.getElementById('plant-image');\n\n      // 모든 성장 단계 클래스 제거\n      for (var i = 0; i <= this.currentPlant.maxStage; i++) {\n        plantImage.querySelector('.plant-growth').classList.remove(\"plant-stage-\".concat(i));\n      }\n\n      // 현재 성장 단계 클래스 추가\n      plantImage.querySelector('.plant-growth').classList.add(\"plant-stage-\".concat(this.currentPlant.stage));\n    }\n\n    /**\r\n     * 식물 정보 업데이트\r\n     * @private\r\n     */\n  }, {\n    key: \"_updatePlantInfo\",\n    value: function _updatePlantInfo() {\n      var plantName = document.getElementById('plant-name');\n      var plantLevel = document.getElementById('plant-level');\n      var plantExp = document.getElementById('plant-exp');\n      var plantExpProgress = document.getElementById('plant-exp-progress');\n      plantName.textContent = this.currentPlant.name;\n      plantLevel.textContent = \"\\uB808\\uBCA8: \".concat(this.currentPlant.level);\n      plantExp.textContent = \"\\uACBD\\uD5D8\\uCE58: \".concat(this.currentPlant.experience, \" / \").concat(this.currentPlant.maxExperience);\n\n      // 경험치 바 업데이트\n      var expPercentage = this.currentPlant.experience / this.currentPlant.maxExperience * 100;\n      plantExpProgress.style.width = \"\".concat(expPercentage, \"%\");\n    }\n\n    /**\r\n     * 컬렉션 업데이트\r\n     * @private\r\n     */\n  }, {\n    key: \"_updateCollection\",\n    value: function _updateCollection() {\n      var _this2 = this;\n      var collectionGrid = document.getElementById('plant-collection-grid');\n      collectionGrid.innerHTML = '';\n\n      // 현재 테마의 식물만 표시\n      this.plantThemes[this.currentTheme].forEach(function (plant) {\n        var _this2$collection$pla;\n        var isUnlocked = ((_this2$collection$pla = _this2.collection[plant.id]) === null || _this2$collection$pla === void 0 ? void 0 : _this2$collection$pla.unlocked) || false;\n        var plantItem = document.createElement('div');\n        plantItem.className = \"plant-item \".concat(isUnlocked ? '' : 'locked');\n\n        // 잠금 해제된 식물만 클릭 가능\n        if (isUnlocked) {\n          plantItem.addEventListener('click', function () {\n            return _this2.changePlant(plant.id);\n          });\n        }\n\n        // 현재 선택된 식물 표시\n        if (_this2.currentPlant.id === plant.id) {\n          plantItem.classList.add('selected');\n        }\n        plantItem.innerHTML = \"\\n                <div class=\\\"plant-item-image\\\">\\n                    \".concat(isUnlocked ? \"<div class=\\\"plant-icon \".concat(plant.id, \"\\\"></div>\") : '<div class=\"plant-icon locked\"><i class=\"fas fa-lock\"></i></div>', \"\\n                </div>\\n                <p>\").concat(isUnlocked ? plant.name : '???', \"</p>\\n                \").concat(!isUnlocked ? \"<small>\\uB808\\uBCA8 \".concat(plant.requiredLevel, \" \\uD544\\uC694</small>\") : '', \"\\n            \");\n        collectionGrid.appendChild(plantItem);\n      });\n    }\n\n    /**\r\n     * 데이터 저장\r\n     * @private\r\n     */\n  }, {\n    key: \"_saveData\",\n    value: function _saveData() {\n      var data = {\n        currentPlant: this.currentPlant,\n        collection: this.collection,\n        currentTheme: this.currentTheme\n      };\n      localStorage.setItem('plantSystem', JSON.stringify(data));\n    }\n\n    /**\r\n     * 데이터 로드\r\n     * @private\r\n     */\n  }, {\n    key: \"_loadData\",\n    value: function _loadData() {\n      var savedData = localStorage.getItem('plantSystem');\n      if (savedData) {\n        var data = JSON.parse(savedData);\n        this.currentPlant = data.currentPlant;\n        this.collection = data.collection;\n        this.currentTheme = data.currentTheme || 'indoor';\n      } else {\n        // 초기 식물 잠금 해제\n        var initialPlant = this.plantThemes[this.currentTheme][0];\n        this.collection[initialPlant.id] = {\n          id: initialPlant.id,\n          name: initialPlant.name,\n          theme: this.currentTheme,\n          unlocked: true\n        };\n        this.currentPlant.id = initialPlant.id;\n        this.currentPlant.name = initialPlant.name;\n      }\n    }\n  }]);\n}();\n;// ./assets/js/utils/NotificationManager.js\nfunction NotificationManager_typeof(o) { \"@babel/helpers - typeof\"; return NotificationManager_typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, NotificationManager_typeof(o); }\nfunction NotificationManager_classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction NotificationManager_defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, NotificationManager_toPropertyKey(o.key), o); } }\nfunction NotificationManager_createClass(e, r, t) { return r && NotificationManager_defineProperties(e.prototype, r), t && NotificationManager_defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction NotificationManager_toPropertyKey(t) { var i = NotificationManager_toPrimitive(t, \"string\"); return \"symbol\" == NotificationManager_typeof(i) ? i : i + \"\"; }\nfunction NotificationManager_toPrimitive(t, r) { if (\"object\" != NotificationManager_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != NotificationManager_typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * 알림 관리 클래스\n * 타이머 알림 및 소리 재생 기능을 제공합니다.\n */\nvar NotificationManager = /*#__PURE__*/function () {\n  function NotificationManager() {\n    NotificationManager_classCallCheck(this, NotificationManager);\n    this.sound = 'bell'; // 기본 소리\n    this.volume = 0.8; // 기본 볼륨 (0.0 ~ 1.0)\n    this.backgroundNotification = true; // 백그라운드 알림 활성화 여부\n\n    // 웹 알림 권한 요청\n    this._requestNotificationPermission();\n  }\n\n  /**\n   * 알림 소리 설정\n   * @param {string} soundName - 소리 이름 ('bell', 'digital', 'nature', 'none')\n   */\n  return NotificationManager_createClass(NotificationManager, [{\n    key: \"setSound\",\n    value: function setSound(soundName) {\n      if (['bell', 'digital', 'nature', 'none'].includes(soundName)) {\n        this.sound = soundName;\n      }\n    }\n\n    /**\n     * 알림 볼륨 설정\n     * @param {number} volume - 볼륨 (0.0 ~ 1.0)\n     */\n  }, {\n    key: \"setVolume\",\n    value: function setVolume(volume) {\n      if (volume >= 0 && volume <= 1) {\n        this.volume = volume;\n      }\n    }\n\n    /**\n     * 백그라운드 알림 설정\n     * @param {boolean} enable - 활성화 여부\n     */\n  }, {\n    key: \"setBackgroundNotification\",\n    value: function setBackgroundNotification(enable) {\n      this.backgroundNotification = enable;\n    }\n\n    /**\n     * 알림 재생\n     * @param {string} title - 알림 제목\n     * @param {string} message - 알림 메시지\n     */\n  }, {\n    key: \"playNotification\",\n    value: function playNotification(title, message) {\n      // 소리 재생\n      this._playSound();\n\n      // 웹 알림 표시 (백그라운드 알림이 활성화되어 있고 권한이 있는 경우)\n      if (this.backgroundNotification) {\n        this._showNotification(title, message);\n      }\n    }\n\n    /**\n     * 소리 재생\n     * @private\n     */\n  }, {\n    key: \"_playSound\",\n    value: function _playSound() {\n      if (this.sound === 'none') return;\n      var audioElement = document.getElementById(\"\".concat(this.sound, \"-sound\"));\n      if (audioElement) {\n        audioElement.volume = this.volume;\n\n        // 재생 중인 경우 다시 시작\n        audioElement.pause();\n        audioElement.currentTime = 0;\n\n        // 소리 재생 (자동 재생 정책으로 인한 오류 처리)\n        var playPromise = audioElement.play();\n        if (playPromise !== undefined) {\n          playPromise[\"catch\"](function (error) {\n            console.warn('자동 재생이 차단되었습니다:', error);\n          });\n        }\n      }\n    }\n\n    /**\n     * 웹 알림 표시\n     * @param {string} title - 알림 제목\n     * @param {string} message - 알림 메시지\n     * @private\n     */\n  }, {\n    key: \"_showNotification\",\n    value: function _showNotification(title, message) {\n      if (!('Notification' in window)) {\n        console.warn('이 브라우저는 알림을 지원하지 않습니다.');\n        return;\n      }\n      if (Notification.permission === 'granted') {\n        var notification = new Notification(title, {\n          body: message,\n          icon: '/assets/images/timer-icon.png'\n        });\n\n        // 알림 클릭 시 포커스\n        notification.onclick = function () {\n          window.focus();\n          notification.close();\n        };\n\n        // 5초 후 자동으로 닫힘\n        setTimeout(function () {\n          return notification.close();\n        }, 5000);\n      } else if (Notification.permission !== 'denied') {\n        this._requestNotificationPermission();\n      }\n    }\n\n    /**\n     * 웹 알림 권한 요청\n     * @private\n     */\n  }, {\n    key: \"_requestNotificationPermission\",\n    value: function _requestNotificationPermission() {\n      if (!('Notification' in window)) return;\n      if (Notification.permission !== 'granted' && Notification.permission !== 'denied') {\n        Notification.requestPermission().then(function (permission) {\n          if (permission === 'granted') {\n            console.log('알림 권한이 허용되었습니다.');\n          }\n        })[\"catch\"](function (error) {\n          console.error('알림 권한 요청 중 오류 발생:', error);\n        });\n      }\n    }\n  }]);\n}();\n;// ./assets/js/pages/timer.js\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n// 타이머 관련 모듈 불러오기\n\n\n\n\n\n\n// 전역 변수\nvar timers = new Map();\nvar timerIdCounter = 1;\nvar notificationManager;\n\n// DOM 요소\ndocument.addEventListener('DOMContentLoaded', function () {\n  console.log('타이머 페이지 초기화');\n  try {\n    // 모듈 인스턴스 생성\n    notificationManager = new NotificationManager();\n    var stopwatch = new Stopwatch();\n    var pomodoro = new Pomodoro();\n    var plantSystem = new PlantSystem();\n\n    // 탭 전환 설정\n    setupTabs();\n\n    // 각 기능 초기화\n    setupMultipleTimers();\n    initializeStopwatch(stopwatch);\n    initializePomodoro(pomodoro, notificationManager, plantSystem);\n    initializeSettings(notificationManager, plantSystem);\n\n    // 식물 시스템 초기화\n    plantSystem.initialize();\n\n    // 타이머 추가 버튼 이벤트를 여러 방식으로 설정\n    // 1. 버튼에 직접 이벤트 리스너\n    var addTimerBtn = document.getElementById('add-timer');\n    if (addTimerBtn) {\n      addTimerBtn.addEventListener('click', function (e) {\n        console.log('타이머 추가 버튼 클릭 이벤트 발생');\n        e.preventDefault();\n        addNewTimer();\n      });\n    }\n\n    // 2. 커스텀 이벤트 리스너\n    document.addEventListener('add-new-timer', function () {\n      console.log('커스텀 이벤트로 타이머 추가');\n      addNewTimer();\n    });\n\n    // 3. 글로벌 함수 설정\n    window.addNewTimerGlobal = function () {\n      console.log('글로벌 함수로 타이머 추가');\n      addNewTimer();\n    };\n    console.log('타이머 페이지 초기화 완료');\n  } catch (error) {\n    console.error('타이머 페이지 초기화 오류:', error);\n  }\n});\n\n// 탭 전환 설정 함수\nfunction setupTabs() {\n  var tabButtons = document.querySelectorAll('.tab-btn');\n  var tabContents = document.querySelectorAll('.tab-content');\n  tabButtons.forEach(function (button) {\n    button.addEventListener('click', function () {\n      var tabName = button.dataset.tab;\n      console.log(\"\\uD0ED \\uC804\\uD658: \".concat(tabName));\n\n      // 버튼 활성화 상태 변경\n      tabButtons.forEach(function (btn) {\n        return btn.classList.remove('active');\n      });\n      button.classList.add('active');\n\n      // 탭 콘텐츠 전환\n      tabContents.forEach(function (content) {\n        return content.classList.remove('active');\n      });\n      document.getElementById(\"\".concat(tabName, \"-tab\")).classList.add('active');\n\n      // 포모도로 탭일 때만 식물 컨테이너 표시\n      var plantContainer = document.querySelector('.plant-container');\n      if (plantContainer) {\n        plantContainer.style.display = tabName === 'pomodoro' ? 'block' : 'none';\n      }\n    });\n  });\n}\n\n// 다중 타이머 설정 함수\nfunction setupMultipleTimers() {\n  console.log('다중 타이머 설정');\n\n  // 초기 타이머 설정\n  var initialTimerItem = document.querySelector('.timer-item');\n  if (initialTimerItem) {\n    console.log('초기 타이머 설정');\n    var timerId = initialTimerItem.dataset.timerId;\n    var timerInstance = new Timer();\n    timers.set(timerId, timerInstance);\n    setupTimerControls(initialTimerItem, timerInstance);\n  }\n\n  // 저장된 타이머 불러오기\n  loadSavedTimers();\n\n  // 타이머 상태 주기적 저장\n  setInterval(saveActiveTimers, 10000);\n}\n\n// 새 타이머 추가 함수\nfunction addNewTimer() {\n  console.log('새 타이머 추가 함수 호출됨');\n  try {\n    var timersListElem = document.getElementById('timers-list');\n    if (!timersListElem) {\n      console.error('타이머 목록 요소를 찾을 수 없음');\n      return;\n    }\n    var timerId = String(timerIdCounter++);\n    console.log(\"\\uC0C8 \\uD0C0\\uC774\\uBA38 ID: \".concat(timerId, \" \\uC0DD\\uC131 \\uC911\"));\n\n    // 타이머 인스턴스 생성\n    var timerInstance = new Timer();\n    timers.set(timerId, timerInstance);\n\n    // 타이머 요소 생성\n    var newTimerElem = document.createElement('div');\n    newTimerElem.className = 'timer-item';\n    newTimerElem.dataset.timerId = timerId;\n    newTimerElem.innerHTML = \"\\n            <div class=\\\"timer-header\\\">\\n                <input type=\\\"text\\\" class=\\\"timer-label\\\" placeholder=\\\"\\uD0C0\\uC774\\uBA38 \\uC774\\uB984\\\">\\n                <button class=\\\"close-timer\\\"><i class=\\\"fas fa-times\\\"></i></button>\\n            </div>\\n            <div class=\\\"timer-display\\\">\\n                <span class=\\\"timer-hours\\\">00</span>:<span class=\\\"timer-minutes\\\">00</span>:<span class=\\\"timer-seconds\\\">00</span>\\n            </div>\\n            <div class=\\\"timer-controls\\\">\\n                <button class=\\\"timer-start control-btn\\\"><i class=\\\"fas fa-play\\\"></i></button>\\n                <button class=\\\"timer-pause control-btn\\\" disabled><i class=\\\"fas fa-pause\\\"></i></button>\\n                <button class=\\\"timer-reset control-btn\\\"><i class=\\\"fas fa-redo\\\"></i></button>\\n            </div>\\n            <div class=\\\"timer-settings\\\">\\n                <div class=\\\"time-input\\\">\\n                    <label>\\uC2DC\\uAC04:</label>\\n                    <input type=\\\"number\\\" class=\\\"hours-input\\\" min=\\\"0\\\" max=\\\"23\\\" value=\\\"0\\\">\\n                </div>\\n                <div class=\\\"time-input\\\">\\n                    <label>\\uBD84:</label>\\n                    <input type=\\\"number\\\" class=\\\"minutes-input\\\" min=\\\"0\\\" max=\\\"59\\\" value=\\\"0\\\">\\n                </div>\\n                <div class=\\\"time-input\\\">\\n                    <label>\\uCD08:</label>\\n                    <input type=\\\"number\\\" class=\\\"seconds-input\\\" min=\\\"0\\\" max=\\\"59\\\" value=\\\"0\\\">\\n                </div>\\n            </div>\\n            <div class=\\\"preset-buttons\\\">\\n                <button class=\\\"preset-btn\\\" data-minutes=\\\"5\\\">5\\uBD84</button>\\n                <button class=\\\"preset-btn\\\" data-minutes=\\\"10\\\">10\\uBD84</button>\\n                <button class=\\\"preset-btn\\\" data-minutes=\\\"15\\\">15\\uBD84</button>\\n                <button class=\\\"preset-btn\\\" data-minutes=\\\"30\\\">30\\uBD84</button>\\n            </div>\\n        \";\n\n    // 타이머 요소 추가\n    timersListElem.appendChild(newTimerElem);\n    console.log('타이머 요소 DOM에 추가됨');\n\n    // 타이머 컨트롤 설정\n    setupTimerControls(newTimerElem, timerInstance);\n\n    // 닫기 버튼 이벤트\n    var closeBtn = newTimerElem.querySelector('.close-timer');\n    closeBtn.addEventListener('click', function () {\n      console.log('닫기 버튼 클릭');\n      removeTimer(newTimerElem, timerId);\n    });\n\n    // 포커스 설정 및 스크롤\n    newTimerElem.querySelector('.timer-label').focus();\n    newTimerElem.scrollIntoView({\n      behavior: 'smooth'\n    });\n    console.log('새 타이머 추가 완료');\n  } catch (error) {\n    console.error('타이머 추가 오류:', error);\n    alert('타이머 추가 중 오류가 발생했습니다.');\n  }\n}\n\n// 타이머 제거 함수\nfunction removeTimer(timerElem, timerId) {\n  console.log(\"\\uD0C0\\uC774\\uBA38 \\uC81C\\uAC70: \".concat(timerId));\n\n  // 타이머 인스턴스 정리\n  var timerInstance = timers.get(timerId);\n  if (timerInstance) {\n    timerInstance.reset();\n    timers[\"delete\"](timerId);\n  }\n\n  // 애니메이션 후 요소 제거\n  timerElem.style.opacity = '0';\n  timerElem.style.transform = 'scale(0.8)';\n  timerElem.style.transition = 'all 0.3s ease-out';\n  setTimeout(function () {\n    timerElem.remove();\n    console.log('타이머 요소 제거됨');\n  }, 300);\n\n  // 저장된 데이터에서도 제거\n  var savedTimers = JSON.parse(localStorage.getItem('activeTimers') || '{}');\n  delete savedTimers[timerId];\n  localStorage.setItem('activeTimers', JSON.stringify(savedTimers));\n}\n\n// 타이머 컨트롤 설정 함수\nfunction setupTimerControls(timerElem, timerInstance) {\n  // DOM 요소\n  var hoursInput = timerElem.querySelector('.hours-input');\n  var minutesInput = timerElem.querySelector('.minutes-input');\n  var secondsInput = timerElem.querySelector('.seconds-input');\n  var timerLabel = timerElem.querySelector('.timer-label');\n  var startBtn = timerElem.querySelector('.timer-start');\n  var pauseBtn = timerElem.querySelector('.timer-pause');\n  var resetBtn = timerElem.querySelector('.timer-reset');\n  var presetBtns = timerElem.querySelectorAll('.preset-btn');\n  var timerHours = timerElem.querySelector('.timer-hours');\n  var timerMinutes = timerElem.querySelector('.timer-minutes');\n  var timerSeconds = timerElem.querySelector('.timer-seconds');\n\n  // 타이머 업데이트 콜백\n  timerInstance.onUpdate = function (hours, minutes, seconds) {\n    timerHours.textContent = hours.toString().padStart(2, '0');\n    timerMinutes.textContent = minutes.toString().padStart(2, '0');\n    timerSeconds.textContent = seconds.toString().padStart(2, '0');\n  };\n\n  // 타이머 완료 콜백\n  timerInstance.onComplete = function () {\n    var name = timerLabel.value.trim() || '타이머';\n    notificationManager.playNotification(\"\".concat(name, \" \\uC644\\uB8CC!\"), '설정한 시간이 완료되었습니다.');\n    timerElem.classList.add('timer-complete');\n    resetTimerControls();\n\n    // 알림음 재생\n    try {\n      var audio = new Audio('assets/sounds/bell.mp3');\n      audio.volume = 0.5;\n      audio.play();\n    } catch (e) {\n      console.warn('알림음 재생 실패:', e);\n    }\n  };\n\n  // 시작 버튼 이벤트\n  startBtn.addEventListener('click', function () {\n    var hours = parseInt(hoursInput.value) || 0;\n    var minutes = parseInt(minutesInput.value) || 0;\n    var seconds = parseInt(secondsInput.value) || 0;\n    if (hours === 0 && minutes === 0 && seconds === 0) {\n      alert('타이머 시간을 설정해주세요.');\n      return;\n    }\n    timerElem.classList.remove('timer-complete');\n    timerInstance.start(hours, minutes, seconds);\n    startBtn.disabled = true;\n    pauseBtn.disabled = false;\n    hoursInput.disabled = true;\n    minutesInput.disabled = true;\n    secondsInput.disabled = true;\n    presetBtns.forEach(function (btn) {\n      return btn.disabled = true;\n    });\n  });\n\n  // 일시정지 버튼 이벤트\n  pauseBtn.addEventListener('click', function () {\n    if (timerInstance.isPaused) {\n      timerInstance.resume();\n      pauseBtn.innerHTML = '<i class=\"fas fa-pause\"></i>';\n    } else {\n      timerInstance.pause();\n      pauseBtn.innerHTML = '<i class=\"fas fa-play\"></i>';\n    }\n  });\n\n  // 리셋 버튼 이벤트\n  resetBtn.addEventListener('click', function () {\n    timerInstance.reset();\n    resetTimerControls();\n    timerElem.classList.remove('timer-complete');\n  });\n\n  // 프리셋 버튼 이벤트\n  presetBtns.forEach(function (btn) {\n    btn.addEventListener('click', function () {\n      var minutes = parseInt(btn.dataset.minutes);\n      hoursInput.value = 0;\n      minutesInput.value = minutes;\n      secondsInput.value = 0;\n      timerHours.textContent = '00';\n      timerMinutes.textContent = minutes.toString().padStart(2, '0');\n      timerSeconds.textContent = '00';\n    });\n  });\n\n  // 컨트롤 리셋 함수\n  function resetTimerControls() {\n    startBtn.disabled = false;\n    pauseBtn.disabled = true;\n    pauseBtn.innerHTML = '<i class=\"fas fa-pause\"></i>';\n    hoursInput.disabled = false;\n    minutesInput.disabled = false;\n    secondsInput.disabled = false;\n    presetBtns.forEach(function (btn) {\n      return btn.disabled = false;\n    });\n  }\n}\n\n// 활성 타이머 저장 함수\nfunction saveActiveTimers() {\n  var activeTimers = {};\n  timers.forEach(function (timerInstance, timerId) {\n    if (timerInstance.isActive) {\n      var timerElem = document.querySelector(\".timer-item[data-timer-id=\\\"\".concat(timerId, \"\\\"]\"));\n      if (timerElem) {\n        var timerLabel = timerElem.querySelector('.timer-label').value;\n        var remainingTime = timerInstance.getRemainingTime();\n        activeTimers[timerId] = {\n          label: timerLabel,\n          hours: remainingTime.hours,\n          minutes: remainingTime.minutes,\n          seconds: remainingTime.seconds,\n          isPaused: timerInstance.isPaused\n        };\n      }\n    }\n  });\n  localStorage.setItem('activeTimers', JSON.stringify(activeTimers));\n}\n\n// 저장된 타이머 불러오기 함수\nfunction loadSavedTimers() {\n  var savedTimers = JSON.parse(localStorage.getItem('activeTimers') || '{}');\n  var timersListElem = document.getElementById('timers-list');\n  if (Object.keys(savedTimers).length === 0) return;\n  Object.entries(savedTimers).forEach(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n      timerId = _ref2[0],\n      timerData = _ref2[1];\n    var timerInstance = new Timer();\n    timers.set(timerId, timerInstance);\n    var timerElem = document.createElement('div');\n    timerElem.className = 'timer-item';\n    timerElem.dataset.timerId = timerId;\n    timerElem.innerHTML = \"\\n            <div class=\\\"timer-header\\\">\\n                <input type=\\\"text\\\" class=\\\"timer-label\\\" placeholder=\\\"\\uD0C0\\uC774\\uBA38 \\uC774\\uB984\\\" value=\\\"\".concat(timerData.label || '', \"\\\">\\n                <button class=\\\"close-timer\\\"><i class=\\\"fas fa-times\\\"></i></button>\\n            </div>\\n            <div class=\\\"timer-display\\\">\\n                <span class=\\\"timer-hours\\\">\").concat(timerData.hours.toString().padStart(2, '0'), \"</span>:\\n                <span class=\\\"timer-minutes\\\">\").concat(timerData.minutes.toString().padStart(2, '0'), \"</span>:\\n                <span class=\\\"timer-seconds\\\">\").concat(timerData.seconds.toString().padStart(2, '0'), \"</span>\\n            </div>\\n            <div class=\\\"timer-controls\\\">\\n                <button class=\\\"timer-start control-btn\\\" \").concat(timerData.isPaused ? '' : 'disabled', \"><i class=\\\"fas fa-play\\\"></i></button>\\n                <button class=\\\"timer-pause control-btn\\\" \").concat(timerData.isPaused ? 'disabled' : '', \"><i class=\\\"fas fa-pause\\\"></i></button>\\n                <button class=\\\"timer-reset control-btn\\\"><i class=\\\"fas fa-redo\\\"></i></button>\\n            </div>\\n            <div class=\\\"timer-settings\\\">\\n                <div class=\\\"time-input\\\">\\n                    <label>\\uC2DC\\uAC04:</label>\\n                    <input type=\\\"number\\\" class=\\\"hours-input\\\" min=\\\"0\\\" max=\\\"23\\\" value=\\\"\").concat(timerData.hours, \"\\\" \").concat(timerData.isPaused ? '' : 'disabled', \">\\n                </div>\\n                <div class=\\\"time-input\\\">\\n                    <label>\\uBD84:</label>\\n                    <input type=\\\"number\\\" class=\\\"minutes-input\\\" min=\\\"0\\\" max=\\\"59\\\" value=\\\"\").concat(timerData.minutes, \"\\\" \").concat(timerData.isPaused ? '' : 'disabled', \">\\n                </div>\\n                <div class=\\\"time-input\\\">\\n                    <label>\\uCD08:</label>\\n                    <input type=\\\"number\\\" class=\\\"seconds-input\\\" min=\\\"0\\\" max=\\\"59\\\" value=\\\"\").concat(timerData.seconds, \"\\\" \").concat(timerData.isPaused ? '' : 'disabled', \">\\n                </div>\\n            </div>\\n            <div class=\\\"preset-buttons\\\">\\n                <button class=\\\"preset-btn\\\" data-minutes=\\\"5\\\" \").concat(timerData.isPaused ? '' : 'disabled', \">5\\uBD84</button>\\n                <button class=\\\"preset-btn\\\" data-minutes=\\\"10\\\" \").concat(timerData.isPaused ? '' : 'disabled', \">10\\uBD84</button>\\n                <button class=\\\"preset-btn\\\" data-minutes=\\\"15\\\" \").concat(timerData.isPaused ? '' : 'disabled', \">15\\uBD84</button>\\n                <button class=\\\"preset-btn\\\" data-minutes=\\\"30\\\" \").concat(timerData.isPaused ? '' : 'disabled', \">30\\uBD84</button>\\n            </div>\\n        \");\n    timersListElem.appendChild(timerElem);\n    setupTimerControls(timerElem, timerInstance);\n    var closeBtn = timerElem.querySelector('.close-timer');\n    closeBtn.addEventListener('click', function () {\n      return removeTimer(timerElem, timerId);\n    });\n    if (!timerData.isPaused) {\n      timerInstance.start(timerData.hours, timerData.minutes, timerData.seconds);\n    }\n  });\n  var maxId = Math.max.apply(Math, [0].concat(_toConsumableArray(Object.keys(savedTimers).map(function (id) {\n    return parseInt(id);\n  }))));\n  timerIdCounter = maxId + 1;\n}\n\n// 스톱워치 초기화 및 이벤트 설정 함수\nfunction initializeStopwatch(stopwatch) {\n  var startBtn = document.getElementById('stopwatch-start');\n  var pauseBtn = document.getElementById('stopwatch-pause');\n  var resetBtn = document.getElementById('stopwatch-reset');\n  var lapBtn = document.getElementById('stopwatch-lap');\n  var lapsList = document.getElementById('laps-list');\n  var stopwatchHours = document.getElementById('stopwatch-hours');\n  var stopwatchMinutes = document.getElementById('stopwatch-minutes');\n  var stopwatchSeconds = document.getElementById('stopwatch-seconds');\n  var stopwatchMilliseconds = document.getElementById('stopwatch-milliseconds');\n\n  // 스톱워치 업데이트 함수\n  stopwatch.onUpdate = function (hours, minutes, seconds, milliseconds) {\n    stopwatchHours.textContent = hours.toString().padStart(2, '0');\n    stopwatchMinutes.textContent = minutes.toString().padStart(2, '0');\n    stopwatchSeconds.textContent = seconds.toString().padStart(2, '0');\n    stopwatchMilliseconds.textContent = milliseconds.toString().padStart(2, '0');\n  };\n\n  // 시작 버튼 클릭 이벤트\n  startBtn.addEventListener('click', function () {\n    stopwatch.start();\n\n    // 버튼 상태 업데이트\n    startBtn.disabled = true;\n    pauseBtn.disabled = false;\n    lapBtn.disabled = false;\n  });\n\n  // 일시 정지 버튼 클릭 이벤트\n  pauseBtn.addEventListener('click', function () {\n    if (stopwatch.isPaused) {\n      stopwatch.resume();\n      pauseBtn.innerHTML = '<i class=\"fas fa-pause\"></i>';\n    } else {\n      stopwatch.pause();\n      pauseBtn.innerHTML = '<i class=\"fas fa-play\"></i>';\n    }\n  });\n\n  // 리셋 버튼 클릭 이벤트\n  resetBtn.addEventListener('click', function () {\n    stopwatch.reset();\n    resetStopwatchControls();\n    lapsList.innerHTML = '';\n  });\n\n  // 랩 버튼 클릭 이벤트\n  lapBtn.addEventListener('click', function () {\n    var lapTime = stopwatch.getLapTime();\n    var lapIndex = stopwatch.laps.length;\n\n    // 랩 시간 표시\n    var lapItem = document.createElement('li');\n    lapItem.innerHTML = \"\\n            <span>\\uB7A9 \".concat(lapIndex, \"</span>\\n            <span>\").concat(formatTime(lapTime), \"</span>\\n        \");\n    lapsList.appendChild(lapItem);\n  });\n\n  // 스톱워치 컨트롤 리셋 함수\n  function resetStopwatchControls() {\n    startBtn.disabled = false;\n    pauseBtn.disabled = true;\n    lapBtn.disabled = true;\n    pauseBtn.innerHTML = '<i class=\"fas fa-pause\"></i>';\n  }\n\n  // 시간 포맷팅 함수\n  function formatTime(timeObj) {\n    var hours = timeObj.hours,\n      minutes = timeObj.minutes,\n      seconds = timeObj.seconds,\n      milliseconds = timeObj.milliseconds;\n    return \"\".concat(hours.toString().padStart(2, '0'), \":\").concat(minutes.toString().padStart(2, '0'), \":\").concat(seconds.toString().padStart(2, '0'), \".\").concat(milliseconds.toString().padStart(2, '0'));\n  }\n}\n\n// 포모도로 초기화 및 이벤트 설정 함수\nfunction initializePomodoro(pomodoro, notificationManager, plantSystem) {\n  var startBtn = document.getElementById('pomodoro-start');\n  var pauseBtn = document.getElementById('pomodoro-pause');\n  var resetBtn = document.getElementById('pomodoro-reset');\n  var pomodoroMinutes = document.getElementById('pomodoro-minutes');\n  var pomodoroSeconds = document.getElementById('pomodoro-seconds');\n  var statusText = document.getElementById('status-text');\n  var cycleCount = document.getElementById('cycle-count');\n  var currentModeTime = document.getElementById('current-mode-time');\n  var workTime = document.getElementById('work-time');\n  var breakTime = document.getElementById('break-time');\n  var workMinutesInput = document.getElementById('work-minutes');\n  var shortBreakMinutesInput = document.getElementById('short-break-minutes');\n  var longBreakMinutesInput = document.getElementById('long-break-minutes');\n  var pomodoroCyclesInput = document.getElementById('pomodoro-cycles');\n\n  // 포모도로 설정 변경 시 이벤트\n  workMinutesInput.addEventListener('change', updatePomodoroSettings);\n  shortBreakMinutesInput.addEventListener('change', updatePomodoroSettings);\n  longBreakMinutesInput.addEventListener('change', updatePomodoroSettings);\n  pomodoroCyclesInput.addEventListener('change', updatePomodoroSettings);\n\n  // 설정 업데이트 함수\n  function updatePomodoroSettings() {\n    var workMinutes = parseInt(workMinutesInput.value) || 25;\n    var shortBreakMinutes = parseInt(shortBreakMinutesInput.value) || 5;\n    var longBreakMinutes = parseInt(longBreakMinutesInput.value) || 15;\n    var totalCycles = parseInt(pomodoroCyclesInput.value) || 4;\n\n    // 유효성 검사 및 범위 조정\n    workMinutesInput.value = Math.max(1, Math.min(60, workMinutes));\n    shortBreakMinutesInput.value = Math.max(1, Math.min(30, shortBreakMinutes));\n    longBreakMinutesInput.value = Math.max(1, Math.min(60, longBreakMinutes));\n    pomodoroCyclesInput.value = Math.max(1, Math.min(10, totalCycles));\n\n    // 포모도로 설정 업데이트\n    pomodoro.setSettings({\n      workMinutes: workMinutesInput.value,\n      shortBreakMinutes: shortBreakMinutesInput.value,\n      longBreakMinutes: longBreakMinutesInput.value,\n      totalCycles: pomodoroCyclesInput.value\n    });\n\n    // 초기 상태 업데이트 (작업 시간 표시)\n    pomodoroMinutes.textContent = workMinutesInput.value.toString().padStart(2, '0');\n    pomodoroSeconds.textContent = '00';\n\n    // 현재 모드 시간 표시 업데이트\n    updateCurrentModeTime('work');\n\n    // 작업/휴식 시간 표시 업데이트\n    updateTimeDisplays();\n\n    // 사이클 카운트 업데이트\n    cycleCount.textContent = \"0/\".concat(pomodoroCyclesInput.value);\n  }\n\n  // 시간 표시 업데이트 함수\n  function updateTimeDisplays() {\n    var workMin = parseInt(workMinutesInput.value) || 25;\n    var shortBreakMin = parseInt(shortBreakMinutesInput.value) || 5;\n    workTime.textContent = \"\".concat(workMin.toString().padStart(2, '0'), \":00\");\n    breakTime.textContent = \"\".concat(shortBreakMin.toString().padStart(2, '0'), \":00\");\n  }\n\n  // 현재 모드 시간 표시 업데이트 함수\n  function updateCurrentModeTime(mode) {\n    var minutes = 0;\n    switch (mode) {\n      case 'work':\n        minutes = parseInt(workMinutesInput.value) || 25;\n        break;\n      case 'shortBreak':\n        minutes = parseInt(shortBreakMinutesInput.value) || 5;\n        break;\n      case 'longBreak':\n        minutes = parseInt(longBreakMinutesInput.value) || 15;\n        break;\n    }\n    currentModeTime.textContent = \"\".concat(minutes.toString().padStart(2, '0'), \":00\");\n  }\n\n  // 시작 버튼 클릭 이벤트\n  startBtn.addEventListener('click', function () {\n    // 포모도로 시작\n    pomodoro.start();\n\n    // 버튼 상태 업데이트\n    startBtn.disabled = true;\n    pauseBtn.disabled = false;\n\n    // 입력 필드 비활성화\n    workMinutesInput.disabled = true;\n    shortBreakMinutesInput.disabled = true;\n    longBreakMinutesInput.disabled = true;\n    pomodoroCyclesInput.disabled = true;\n  });\n\n  // 일시 정지 버튼 클릭 이벤트\n  pauseBtn.addEventListener('click', function () {\n    if (pomodoro.isPaused) {\n      pomodoro.resume();\n      pauseBtn.innerHTML = '<i class=\"fas fa-pause\"></i>';\n    } else {\n      pomodoro.pause();\n      pauseBtn.innerHTML = '<i class=\"fas fa-play\"></i>';\n    }\n  });\n\n  // 리셋 버튼 클릭 이벤트\n  resetBtn.addEventListener('click', function () {\n    pomodoro.reset();\n    resetPomodoroControls();\n  });\n\n  // 포모도로 업데이트 함수\n  pomodoro.onUpdate = function (minutes, seconds, currentCycle, totalCycles, mode) {\n    pomodoroMinutes.textContent = minutes.toString().padStart(2, '0');\n    pomodoroSeconds.textContent = seconds.toString().padStart(2, '0');\n\n    // 사이클 정보 업데이트\n    cycleCount.textContent = \"\".concat(currentCycle, \"/\").concat(totalCycles);\n\n    // 모드에 따른 상태 텍스트 업데이트\n    if (mode === 'work') {\n      statusText.textContent = '작업 시간';\n    } else if (mode === 'shortBreak') {\n      statusText.textContent = '짧은 휴식';\n    } else if (mode === 'longBreak') {\n      statusText.textContent = '긴 휴식';\n    }\n  };\n\n  // 포모도로 모드 변경 시 실행 함수\n  pomodoro.onModeChange = function (mode) {\n    // 모드에 따른 알림\n    var title = '';\n    var message = '';\n    if (mode === 'work') {\n      title = '작업 시간!';\n      message = '지금부터 집중해서 작업하세요.';\n      updateCurrentModeTime('work');\n    } else if (mode === 'shortBreak') {\n      title = '짧은 휴식 시간!';\n      message = '잠시 휴식을 취하세요.';\n      updateCurrentModeTime('shortBreak');\n    } else if (mode === 'longBreak') {\n      title = '긴 휴식 시간!';\n      message = '충분히 휴식을 취하세요.';\n      updateCurrentModeTime('longBreak');\n    }\n    notificationManager.playNotification(title, message);\n  };\n\n  // 포모도로 완료 시 실행 함수\n  pomodoro.onComplete = function (completedCycles) {\n    notificationManager.playNotification('포모도로 완료!', \"\".concat(completedCycles, \"\\uBC88\\uC758 \\uD3EC\\uBAA8\\uB3C4\\uB85C \\uC138\\uC158\\uC744 \\uC644\\uB8CC\\uD588\\uC2B5\\uB2C8\\uB2E4.\"));\n    resetPomodoroControls();\n\n    // 포모도로 완료 시 경험치 제공\n    // 완료한 사이클 수에 따라 경험치 차등 지급\n    var exp = completedCycles * 15;\n    plantSystem.addExperience(exp);\n  };\n\n  // 작업 세션 완료 시 실행 함수\n  pomodoro.onWorkSessionComplete = function () {\n    // 작업 세션 완료 시 경험치 제공\n    plantSystem.addExperience(10);\n  };\n\n  // 포모도로 컨트롤 리셋 함수\n  function resetPomodoroControls() {\n    startBtn.disabled = false;\n    pauseBtn.disabled = true;\n    pauseBtn.innerHTML = '<i class=\"fas fa-pause\"></i>';\n    workMinutesInput.disabled = false;\n    shortBreakMinutesInput.disabled = false;\n    longBreakMinutesInput.disabled = false;\n    pomodoroCyclesInput.disabled = false;\n    updatePomodoroSettings();\n  }\n\n  // 초기 설정 적용\n  updatePomodoroSettings();\n}\n\n// 설정 초기화 및 이벤트 설정 함수\nfunction initializeSettings(notificationManager, plantSystem) {\n  var notificationSoundSelect = document.getElementById('notification-sound');\n  var notificationVolumeInput = document.getElementById('notification-volume');\n  var backgroundNotificationCheckbox = document.getElementById('background-notification');\n  var plantThemeSelect = document.getElementById('plant-theme');\n\n  // 설정 변경 시 이벤트\n  notificationSoundSelect.addEventListener('change', saveSettings);\n  notificationVolumeInput.addEventListener('input', saveSettings);\n  backgroundNotificationCheckbox.addEventListener('change', saveSettings);\n  plantThemeSelect.addEventListener('change', function () {\n    saveSettings();\n    plantSystem.changeTheme(plantThemeSelect.value);\n  });\n\n  // 설정 저장 함수\n  function saveSettings() {\n    var settings = {\n      notificationSound: notificationSoundSelect.value,\n      notificationVolume: notificationVolumeInput.value,\n      backgroundNotification: backgroundNotificationCheckbox.checked,\n      plantTheme: plantThemeSelect.value\n    };\n    localStorage.setItem('timerSettings', JSON.stringify(settings));\n\n    // 알림 설정 업데이트\n    notificationManager.setSound(settings.notificationSound);\n    notificationManager.setVolume(settings.notificationVolume / 100);\n    notificationManager.setBackgroundNotification(settings.backgroundNotification);\n  }\n\n  // 설정 불러오기 함수\n  function loadSettings() {\n    var savedSettings = localStorage.getItem('timerSettings');\n    if (savedSettings) {\n      var settings = JSON.parse(savedSettings);\n      notificationSoundSelect.value = settings.notificationSound || 'bell';\n      notificationVolumeInput.value = settings.notificationVolume || 80;\n      backgroundNotificationCheckbox.checked = settings.backgroundNotification !== undefined ? settings.backgroundNotification : true;\n      plantThemeSelect.value = settings.plantTheme || 'indoor';\n\n      // 알림 설정 업데이트\n      notificationManager.setSound(settings.notificationSound);\n      notificationManager.setVolume(settings.notificationVolume / 100);\n      notificationManager.setBackgroundNotification(settings.backgroundNotification);\n\n      // 식물 테마 업데이트\n      plantSystem.changeTheme(settings.plantTheme);\n    }\n  }\n\n  // 초기 설정 불러오기\n  loadSettings();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///15\n")}},Q=>{var U;U=15,Q(Q.s=U)}]);