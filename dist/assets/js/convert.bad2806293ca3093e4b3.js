"use strict";(self.webpackChunkfiletoqr=self.webpackChunkfiletoqr||[]).push([[72],{985:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('/* harmony import */ var _core_converter_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(635);\n/* harmony import */ var _utils_common_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(498);\nfunction _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return r; }; var t, r = {}, e = Object.prototype, n = e.hasOwnProperty, o = "function" == typeof Symbol ? Symbol : {}, i = o.iterator || "@@iterator", a = o.asyncIterator || "@@asyncIterator", u = o.toStringTag || "@@toStringTag"; function c(t, r, e, n) { return Object.defineProperty(t, r, { value: e, enumerable: !n, configurable: !n, writable: !n }); } try { c({}, ""); } catch (t) { c = function c(t, r, e) { return t[r] = e; }; } function h(r, e, n, o) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype); return c(a, "_invoke", function (r, e, n) { var o = 1; return function (i, a) { if (3 === o) throw Error("Generator is already running"); if (4 === o) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var u = n.delegate; if (u) { var c = d(u, n); if (c) { if (c === f) continue; return c; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (1 === o) throw o = 4, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = 3; var h = s(r, e, n); if ("normal" === h.type) { if (o = n.done ? 4 : 2, h.arg === f) continue; return { value: h.arg, done: n.done }; } "throw" === h.type && (o = 4, n.method = "throw", n.arg = h.arg); } }; }(r, n, new Context(o || [])), !0), a; } function s(t, r, e) { try { return { type: "normal", arg: t.call(r, e) }; } catch (t) { return { type: "throw", arg: t }; } } r.wrap = h; var f = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var l = {}; c(l, i, function () { return this; }); var p = Object.getPrototypeOf, y = p && p(p(x([]))); y && y !== e && n.call(y, i) && (l = y); var v = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(l); function g(t) { ["next", "throw", "return"].forEach(function (r) { c(t, r, function (t) { return this._invoke(r, t); }); }); } function AsyncIterator(t, r) { function e(o, i, a, u) { var c = s(t[o], t, i); if ("throw" !== c.type) { var h = c.arg, f = h.value; return f && "object" == _typeof(f) && n.call(f, "__await") ? r.resolve(f.__await).then(function (t) { e("next", t, a, u); }, function (t) { e("throw", t, a, u); }) : r.resolve(f).then(function (t) { h.value = t, a(h); }, function (t) { return e("throw", t, a, u); }); } u(c.arg); } var o; c(this, "_invoke", function (t, n) { function i() { return new r(function (r, o) { e(t, n, r, o); }); } return o = o ? o.then(i, i) : i(); }, !0); } function d(r, e) { var n = e.method, o = r.i[n]; if (o === t) return e.delegate = null, "throw" === n && r.i["return"] && (e.method = "return", e.arg = t, d(r, e), "throw" === e.method) || "return" !== n && (e.method = "throw", e.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), f; var i = s(o, r.i, e.arg); if ("throw" === i.type) return e.method = "throw", e.arg = i.arg, e.delegate = null, f; var a = i.arg; return a ? a.done ? (e[r.r] = a.value, e.next = r.n, "return" !== e.method && (e.method = "next", e.arg = t), e.delegate = null, f) : a : (e.method = "throw", e.arg = new TypeError("iterator result is not an object"), e.delegate = null, f); } function w(t) { this.tryEntries.push(t); } function m(r) { var e = r[4] || {}; e.type = "normal", e.arg = t, r[4] = e; } function Context(t) { this.tryEntries = [[-1]], t.forEach(w, this), this.reset(!0); } function x(r) { if (null != r) { var e = r[i]; if (e) return e.call(r); if ("function" == typeof r.next) return r; if (!isNaN(r.length)) { var o = -1, a = function e() { for (; ++o < r.length;) if (n.call(r, o)) return e.value = r[o], e.done = !1, e; return e.value = t, e.done = !0, e; }; return a.next = a; } } throw new TypeError(_typeof(r) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, c(v, "constructor", GeneratorFunctionPrototype), c(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = c(GeneratorFunctionPrototype, u, "GeneratorFunction"), r.isGeneratorFunction = function (t) { var r = "function" == typeof t && t.constructor; return !!r && (r === GeneratorFunction || "GeneratorFunction" === (r.displayName || r.name)); }, r.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, c(t, u, "GeneratorFunction")), t.prototype = Object.create(v), t; }, r.awrap = function (t) { return { __await: t }; }, g(AsyncIterator.prototype), c(AsyncIterator.prototype, a, function () { return this; }), r.AsyncIterator = AsyncIterator, r.async = function (t, e, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(h(t, e, n, o), i); return r.isGeneratorFunction(e) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, g(v), c(v, u, "Generator"), c(v, i, function () { return this; }), c(v, "toString", function () { return "[object Generator]"; }), r.keys = function (t) { var r = Object(t), e = []; for (var n in r) e.unshift(n); return function t() { for (; e.length;) if ((n = e.pop()) in r) return t.value = n, t.done = !1, t; return t.done = !0, t; }; }, r.values = x, Context.prototype = { constructor: Context, reset: function reset(r) { if (this.prev = this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(m), !r) for (var e in this) "t" === e.charAt(0) && n.call(this, e) && !isNaN(+e.slice(1)) && (this[e] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0][4]; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(r) { if (this.done) throw r; var e = this; function n(t) { a.type = "throw", a.arg = r, e.next = t; } for (var o = e.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i[4], u = this.prev, c = i[1], h = i[2]; if (-1 === i[0]) return n("end"), !1; if (!c && !h) throw Error("try statement without catch or finally"); if (null != i[0] && i[0] <= u) { if (u < c) return this.method = "next", this.arg = t, n(c), !0; if (u < h) return n(h), !1; } } }, abrupt: function abrupt(t, r) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var n = this.tryEntries[e]; if (n[0] > -1 && n[0] <= this.prev && this.prev < n[2]) { var o = n; break; } } o && ("break" === t || "continue" === t) && o[0] <= r && r <= o[2] && (o = null); var i = o ? o[4] : {}; return i.type = t, i.arg = r, o ? (this.method = "next", this.next = o[2], f) : this.complete(i); }, complete: function complete(t, r) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && r && (this.next = r), f; }, finish: function finish(t) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var e = this.tryEntries[r]; if (e[2] === t) return this.complete(e[4], e[3]), m(e), f; } }, "catch": function _catch(t) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var e = this.tryEntries[r]; if (e[0] === t) { var n = e[4]; if ("throw" === n.type) { var o = n.arg; m(e); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(r, e, n) { return this.delegate = { i: x(r), r: e, n: n }, "next" === this.method && (this.arg = t), f; } }, r; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\n/**\r\n * convert.js - FileToQR 파일 변환 페이지 컨트롤러\r\n * 버전: 1.1.0\r\n * 최종 업데이트: 2025-08-01\r\n * \r\n * 이 모듈은 파일 변환 페이지의 UI 및 사용자 상호작용을 관리합니다:\r\n * - 변환 유형 선택 UI\r\n * - 파일 업로드 처리\r\n * - 변환 옵션 표시\r\n * - 변환 진행 상태 표시\r\n */\n\n// 디버깅 로그\nconsole.log(\'convert.js 스크립트 로딩 시작 - 스크립트 태그가 실행됨\');\n\n// 문서가 완전히 로드되었는지 확인\nconsole.log(\'현재 문서 상태:\', document.readyState);\n\n// HTML 요소 존재 여부 확인\nsetTimeout(function () {\n  console.log(\'주요 HTML 요소 확인:\');\n  console.log(\'- 변환 유형 버튼:\', document.querySelectorAll(\'.converter-type-btn\').length);\n  console.log(\'- 파일 업로드 입력:\', document.getElementById(\'file-upload\') ? \'존재\' : \'없음\');\n  console.log(\'- 결과 컨테이너:\', document.getElementById(\'conversion-output\') ? \'존재\' : \'없음\');\n}, 1000);\n\n// 필요한 모듈 임포트\n\n\n\n// 전역 객체에 컨트롤러 등록\nwindow.FileToQR = window.FileToQR || {};\n\n// 페이지 컨트롤러 모듈\nvar ConvertPageController = {\n  // 상태 관리\n  state: {\n    initialized: false,\n    selectedConversionType: null,\n    uploadedFile: null,\n    conversionOptions: null,\n    conversionInProgress: false\n  },\n  /**\r\n   * 초기화 함수\r\n   */\n  init: function init() {\n    var _this = this;\n    return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            if (!_this.state.initialized) {\n              _context.next = 2;\n              break;\n            }\n            return _context.abrupt("return");\n          case 2:\n            try {\n              console.log(\'파일 변환 페이지 초기화 중...\');\n\n              // UI 요소 초기화\n              _this._initUI();\n\n              // 이벤트 리스너 등록\n              _this._registerEventListeners();\n              _this.state.initialized = true;\n              console.log(\'파일 변환 페이지 초기화 완료\');\n            } catch (error) {\n              console.error(\'파일 변환 페이지 초기화 실패:\', error);\n            }\n          case 3:\n          case "end":\n            return _context.stop();\n        }\n      }, _callee);\n    }))();\n  },\n  /**\r\n   * UI 요소 초기화\r\n   * @private\r\n   */\n  _initUI: function _initUI() {\n    // 변환 유형 버튼 활성화\n    var conversionTypeBtns = document.querySelectorAll(\'.converter-type-btn\');\n    conversionTypeBtns.forEach(function (btn) {\n      btn.classList.remove(\'opacity-50\', \'cursor-not-allowed\');\n    });\n\n    // 변환 결과 영역 초기 숨김\n    var conversionOutput = document.getElementById(\'conversion-output\');\n    if (conversionOutput) {\n      conversionOutput.classList.add(\'hidden\');\n    }\n  },\n  /**\r\n   * 이벤트 리스너 등록\r\n   * @private\r\n   */\n  _registerEventListeners: function _registerEventListeners() {\n    var _this2 = this;\n    // 변환 유형 버튼 클릭 이벤트\n    var conversionTypeBtns = document.querySelectorAll(\'.converter-type-btn\');\n    conversionTypeBtns.forEach(function (btn) {\n      btn.addEventListener(\'click\', function (e) {\n        _this2._handleConversionTypeSelect(e.currentTarget.dataset.type);\n      });\n    });\n\n    // 파일 업로드 이벤트\n    var fileUpload = document.getElementById(\'file-upload\');\n    if (fileUpload) {\n      fileUpload.addEventListener(\'change\', function (e) {\n        _this2._handleFileUpload(e.target.files[0]);\n      });\n    }\n\n    // 파일 드래그 앤 드롭 영역\n    var dropArea = document.querySelector(\'label[for="file-upload"]\');\n    if (dropArea) {\n      dropArea.addEventListener(\'dragover\', function (e) {\n        e.preventDefault();\n        dropArea.classList.add(\'bg-blue-100\');\n      });\n      dropArea.addEventListener(\'dragleave\', function () {\n        dropArea.classList.remove(\'bg-blue-100\');\n      });\n      dropArea.addEventListener(\'drop\', function (e) {\n        e.preventDefault();\n        dropArea.classList.remove(\'bg-blue-100\');\n        if (e.dataTransfer.files.length) {\n          var fileInput = document.getElementById(\'file-upload\');\n          fileInput.files = e.dataTransfer.files;\n          _this2._handleFileUpload(e.dataTransfer.files[0]);\n        }\n      });\n    }\n\n    // 다운로드 버튼 클릭 이벤트\n    var downloadBtn = document.getElementById(\'download-btn\');\n    if (downloadBtn) {\n      downloadBtn.addEventListener(\'click\', function () {\n        // 이미 버튼이 활성화된 상태라면 다운로드 처리는 버튼의 href에 의해 처리됨\n        console.log(\'다운로드 버튼 클릭됨\');\n      });\n    }\n  },\n  /**\r\n   * 변환 유형 선택 처리\r\n   * @param {string} type - 선택된 변환 유형 (image, document, audio, data)\r\n   * @private\r\n   */\n  _handleConversionTypeSelect: function _handleConversionTypeSelect(type) {\n    console.log("\\uBCC0\\uD658 \\uC720\\uD615 \\uC120\\uD0DD: ".concat(type));\n\n    // 이전 선택 초기화\n    var conversionTypeBtns = document.querySelectorAll(\'.converter-type-btn\');\n    conversionTypeBtns.forEach(function (btn) {\n      btn.classList.remove(\'ring-2\', \'ring-blue-500\');\n    });\n\n    // 현재 선택 표시\n    var selectedBtn = document.querySelector(".converter-type-btn[data-type=\\"".concat(type, "\\"]"));\n    if (selectedBtn) {\n      selectedBtn.classList.add(\'ring-2\', \'ring-blue-500\');\n    }\n\n    // 상태 업데이트\n    this.state.selectedConversionType = type;\n\n    // 변환 옵션 영역 표시\n    this._showConversionOptions(type);\n  },\n  /**\r\n   * 변환 유형에 따른 옵션 표시\r\n   * @param {string} type - 변환 유형\r\n   * @private\r\n   */\n  _showConversionOptions: function _showConversionOptions(type) {\n    var _this3 = this;\n    var optionsContainer = document.getElementById(\'converter-options\');\n    if (!optionsContainer) return;\n    var optionsHTML = \'\';\n    switch (type) {\n      case \'image\':\n        optionsHTML = "\\n          <h2 class=\\"text-xl font-semibold mb-4\\">\\uC774\\uBBF8\\uC9C0 \\uBCC0\\uD658 \\uC635\\uC158</h2>\\n          <div class=\\"grid grid-cols-2 gap-4 mb-4\\">\\n            <div>\\n              <label class=\\"block text-sm font-medium text-gray-700 mb-1\\">\\uCD9C\\uB825 \\uD615\\uC2DD</label>\\n              <select id=\\"output-format\\" class=\\"w-full p-2 border border-gray-300 rounded-md\\">\\n                <option value=\\"\\">\\uCD9C\\uB825 \\uD615\\uC2DD \\uC120\\uD0DD</option>\\n                <option value=\\"png\\">PNG</option>\\n                <option value=\\"jpg\\">JPG</option>\\n                <option value=\\"webp\\">WebP</option>\\n                <option value=\\"gif\\">GIF</option>\\n              </select>\\n            </div>\\n            <div>\\n              <label class=\\"block text-sm font-medium text-gray-700 mb-1\\">\\uD488\\uC9C8</label>\\n              <select id=\\"image-quality\\" class=\\"w-full p-2 border border-gray-300 rounded-md\\">\\n                <option value=\\"high\\">\\uACE0\\uD488\\uC9C8</option>\\n                <option value=\\"medium\\" selected>\\uC911\\uAC04</option>\\n                <option value=\\"low\\">\\uC800\\uD488\\uC9C8</option>\\n              </select>\\n            </div>\\n          </div>\\n        ";\n        break;\n      case \'document\':\n        optionsHTML = "\\n          <h2 class=\\"text-xl font-semibold mb-4\\">\\uBB38\\uC11C \\uBCC0\\uD658 \\uC635\\uC158</h2>\\n          <div class=\\"grid grid-cols-2 gap-4 mb-4\\">\\n            <div>\\n              <label class=\\"block text-sm font-medium text-gray-700 mb-1\\">\\uCD9C\\uB825 \\uD615\\uC2DD</label>\\n              <select id=\\"output-format\\" class=\\"w-full p-2 border border-gray-300 rounded-md\\">\\n                <option value=\\"\\">\\uCD9C\\uB825 \\uD615\\uC2DD \\uC120\\uD0DD</option>\\n                <option value=\\"pdf\\">PDF</option>\\n                <option value=\\"txt\\">TXT</option>\\n                <option value=\\"html\\">HTML</option>\\n              </select>\\n            </div>\\n          </div>\\n        ";\n        break;\n      case \'audio\':\n        optionsHTML = "\\n          <h2 class=\\"text-xl font-semibold mb-4\\">\\uC624\\uB514\\uC624 \\uBCC0\\uD658 \\uC635\\uC158</h2>\\n          <div class=\\"grid grid-cols-2 gap-4 mb-4\\">\\n            <div>\\n              <label class=\\"block text-sm font-medium text-gray-700 mb-1\\">\\uCD9C\\uB825 \\uD615\\uC2DD</label>\\n              <select id=\\"output-format\\" class=\\"w-full p-2 border border-gray-300 rounded-md\\">\\n                <option value=\\"\\">\\uCD9C\\uB825 \\uD615\\uC2DD \\uC120\\uD0DD</option>\\n                <option value=\\"mp3\\">MP3</option>\\n                <option value=\\"wav\\">WAV</option>\\n                <option value=\\"ogg\\">OGG</option>\\n              </select>\\n            </div>\\n            <div>\\n              <label class=\\"block text-sm font-medium text-gray-700 mb-1\\">\\uBE44\\uD2B8\\uB808\\uC774\\uD2B8</label>\\n              <select id=\\"audio-bitrate\\" class=\\"w-full p-2 border border-gray-300 rounded-md\\">\\n                <option value=\\"320\\">320 kbps</option>\\n                <option value=\\"256\\">256 kbps</option>\\n                <option value=\\"192\\" selected>192 kbps</option>\\n                <option value=\\"128\\">128 kbps</option>\\n                <option value=\\"96\\">96 kbps</option>\\n              </select>\\n            </div>\\n          </div>\\n        ";\n        break;\n      case \'data\':\n        optionsHTML = "\\n          <h2 class=\\"text-xl font-semibold mb-4\\">\\uB370\\uC774\\uD130 \\uBCC0\\uD658 \\uC635\\uC158</h2>\\n          <div class=\\"grid grid-cols-2 gap-4 mb-4\\">\\n            <div>\\n              <label class=\\"block text-sm font-medium text-gray-700 mb-1\\">\\uCD9C\\uB825 \\uD615\\uC2DD</label>\\n              <select id=\\"output-format\\" class=\\"w-full p-2 border border-gray-300 rounded-md\\">\\n                <option value=\\"\\">\\uCD9C\\uB825 \\uD615\\uC2DD \\uC120\\uD0DD</option>\\n                <option value=\\"json\\">JSON</option>\\n                <option value=\\"csv\\">CSV</option>\\n                <option value=\\"xml\\">XML</option>\\n              </select>\\n            </div>\\n          </div>\\n        ";\n        break;\n    }\n\n    // 공통 변환 버튼\n    optionsHTML += "\\n      <div class=\\"mt-4\\">\\n        <button id=\\"start-conversion-btn\\" class=\\"bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-md disabled:opacity-50 disabled:cursor-not-allowed\\" disabled>\\n          \\uBCC0\\uD658 \\uC2DC\\uC791\\n        </button>\\n      </div>\\n    ";\n    optionsContainer.innerHTML = optionsHTML;\n\n    // 변환 시작 버튼 활성화 조건 설정\n    var startConversionBtn = document.getElementById(\'start-conversion-btn\');\n    var outputFormatSelect = document.getElementById(\'output-format\');\n    if (startConversionBtn && outputFormatSelect) {\n      outputFormatSelect.addEventListener(\'change\', function () {\n        startConversionBtn.disabled = !outputFormatSelect.value || !_this3.state.uploadedFile;\n      });\n\n      // 파일이 이미 업로드되어 있으면 버튼 활성화 여부 체크\n      if (this.state.uploadedFile && outputFormatSelect.value) {\n        startConversionBtn.disabled = false;\n      }\n\n      // 변환 시작 버튼 클릭 이벤트\n      startConversionBtn.addEventListener(\'click\', function () {\n        _this3._startConversion();\n      });\n    }\n  },\n  /**\r\n   * 파일 업로드 처리\r\n   * @param {File} file - 업로드된 파일\r\n   * @private\r\n   */\n  _handleFileUpload: function _handleFileUpload(file) {\n    if (!file) return;\n    console.log("\\uD30C\\uC77C \\uC5C5\\uB85C\\uB4DC\\uB428: ".concat(file.name, " (").concat(this._formatFileSize(file.size), ", ").concat(file.type, ")"));\n\n    // 상태 업데이트\n    this.state.uploadedFile = file;\n\n    // 파일 정보 표시\n    var fileInfoEl = document.getElementById(\'file-info\');\n    if (fileInfoEl) {\n      fileInfoEl.innerHTML = "\\n        <div class=\\"flex items-center\\">\\n          <svg class=\\"w-8 h-8 text-blue-500 mr-2\\" fill=\\"none\\" stroke=\\"currentColor\\" viewBox=\\"0 0 24 24\\" xmlns=\\"http://www.w3.org/2000/svg\\">\\n            <path stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" stroke-width=\\"2\\" d=\\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\\"></path>\\n          </svg>\\n          <div>\\n            <p class=\\"font-medium\\">".concat(file.name, "</p>\\n            <p class=\\"text-sm text-gray-500\\">").concat(this._formatFileSize(file.size), " - ").concat(file.type || \'알 수 없는 유형\', "</p>\\n          </div>\\n        </div>\\n      ");\n      fileInfoEl.classList.remove(\'hidden\');\n    }\n\n    // 파일 유형에 따른 변환 유형 자동 선택\n    if (!this.state.selectedConversionType) {\n      var autoType = this._autoSelectConversionType(file);\n      if (autoType) {\n        this._handleConversionTypeSelect(autoType);\n      }\n    }\n\n    // 변환 시작 버튼 활성화 여부 업데이트\n    var startConversionBtn = document.getElementById(\'start-conversion-btn\');\n    var outputFormatSelect = document.getElementById(\'output-format\');\n    if (startConversionBtn && outputFormatSelect && outputFormatSelect.value) {\n      startConversionBtn.disabled = false;\n    }\n  },\n  /**\r\n   * 파일 MIME 타입에 따른 변환 유형 자동 선택\r\n   * @param {File} file - 업로드된 파일\r\n   * @returns {string|null} - 선택된 변환 유형 또는 null\r\n   * @private\r\n   */\n  _autoSelectConversionType: function _autoSelectConversionType(file) {\n    if (!file || !file.type) return null;\n    var mimeType = file.type.toLowerCase();\n    if (mimeType.startsWith(\'image/\')) {\n      return \'image\';\n    } else if (mimeType.startsWith(\'video/\')) {\n      return \'video\';\n    } else if (mimeType.startsWith(\'audio/\')) {\n      return \'audio\';\n    } else if (mimeType.includes(\'pdf\') || mimeType.includes(\'text/\') || mimeType.includes(\'document\') || mimeType.includes(\'spreadsheet\') || mimeType.includes(\'presentation\')) {\n      return \'document\';\n    } else if (mimeType.includes(\'json\') || mimeType.includes(\'xml\') || mimeType.includes(\'csv\')) {\n      return \'data\';\n    }\n\n    // 파일 확장자로 판단 시도\n    var extension = file.name.split(\'.\').pop().toLowerCase();\n    var imageExtensions = [\'jpg\', \'jpeg\', \'png\', \'gif\', \'bmp\', \'webp\', \'svg\'];\n    var docExtensions = [\'pdf\', \'doc\', \'docx\', \'xls\', \'xlsx\', \'ppt\', \'pptx\', \'txt\', \'rtf\', \'odt\'];\n    var audioExtensions = [\'mp3\', \'wav\', \'ogg\', \'flac\', \'aac\', \'m4a\'];\n    var dataExtensions = [\'json\', \'xml\', \'csv\', \'yaml\', \'yml\', \'toml\'];\n    if (imageExtensions.includes(extension)) {\n      return \'image\';\n    } else if (docExtensions.includes(extension)) {\n      return \'document\';\n    } else if (audioExtensions.includes(extension)) {\n      return \'audio\';\n    } else if (dataExtensions.includes(extension)) {\n      return \'data\';\n    }\n    return null;\n  },\n  /**\r\n   * 파일 크기 포맷팅\r\n   * @param {number} bytes - 바이트 단위 파일 크기\r\n   * @returns {string} - 포맷팅된 파일 크기\r\n   * @private\r\n   */\n  _formatFileSize: function _formatFileSize(bytes) {\n    return _utils_common_utils_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A.formatters.formatFileSize(bytes);\n  },\n  /**\r\n   * 변환 시작\r\n   * @private\r\n   */\n  _startConversion: function _startConversion() {\n    var _this4 = this;\n    if (this.state.conversionInProgress || !this.state.uploadedFile) {\n      return;\n    }\n\n    // 변환 옵션 수집\n    var options = this._collectConversionOptions();\n    if (!options || !options.outputFormat) {\n      alert(\'변환 형식을 선택해주세요.\');\n      return;\n    }\n    console.log(\'변환 시작:\', options);\n\n    // 변환 상태 업데이트\n    this.state.conversionInProgress = true;\n    this._updateConversionUI(\'progress\', {\n      progress: 0\n    });\n\n    // 변환 시작 버튼 비활성화\n    var startConversionBtn = document.getElementById(\'start-conversion-btn\');\n    if (startConversionBtn) {\n      startConversionBtn.disabled = true;\n      startConversionBtn.textContent = \'변환 중...\';\n    }\n\n    // 파일 변환 처리\n    this._processConversion(this.state.uploadedFile, options.outputFormat, options).then(function (result) {\n      console.log(\'변환 완료:\', result);\n      _this4._updateConversionUI(\'success\', result);\n    })["catch"](function (error) {\n      console.error(\'변환 실패:\', error);\n      _this4._updateConversionUI(\'error\', {\n        error: error.message || \'변환 중 오류가 발생했습니다.\'\n      });\n    })["finally"](function () {\n      _this4.state.conversionInProgress = false;\n\n      // 변환 시작 버튼 복원\n      if (startConversionBtn) {\n        startConversionBtn.disabled = false;\n        startConversionBtn.textContent = \'변환 시작\';\n      }\n    });\n  },\n  /**\r\n   * 변환 옵션 수집\r\n   * @returns {Object} - 수집된 변환 옵션\r\n   * @private\r\n   */\n  _collectConversionOptions: function _collectConversionOptions() {\n    var _document$getElementB, _document$getElementB2, _document$getElementB3;\n    var options = {\n      conversionType: this.state.selectedConversionType,\n      outputFormat: (_document$getElementB = document.getElementById(\'output-format\')) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.value\n    };\n\n    // 변환 유형별 추가 옵션\n    switch (this.state.selectedConversionType) {\n      case \'image\':\n        options.quality = ((_document$getElementB2 = document.getElementById(\'image-quality\')) === null || _document$getElementB2 === void 0 ? void 0 : _document$getElementB2.value) || \'medium\';\n        break;\n      case \'audio\':\n        options.bitrate = ((_document$getElementB3 = document.getElementById(\'audio-bitrate\')) === null || _document$getElementB3 === void 0 ? void 0 : _document$getElementB3.value) || \'192\';\n        break;\n    }\n    return options;\n  },\n  /**\r\n   * 파일 변환 처리\r\n   * @param {File} file - 변환할 파일\r\n   * @param {string} outputFormat - 출력 형식\r\n   * @param {Object} options - 추가 옵션\r\n   * @returns {Promise<Object>} - 변환 결과\r\n   * @private\r\n   */\n  _processConversion: function _processConversion(file, outputFormat, options) {\n    var _this5 = this;\n    return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            return _context2.abrupt("return", new Promise(function (resolve, reject) {\n              // 진행 상태 콜백\n              var progressCallback = function progressCallback(progressData) {\n                _this5._updateConversionUI(\'progress\', {\n                  progress: progressData.progress\n                });\n              };\n              try {\n                // ConverterCore 사용 (리팩토링된 코어 컨버터 사용)\n                _core_converter_core_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.convert(file, outputFormat, options, progressCallback).then(function (result) {\n                  resolve({\n                    url: result.url,\n                    filename: result.filename,\n                    size: result.size,\n                    mimeType: result.mimeType\n                  });\n                })["catch"](function (error) {\n                  reject(error);\n                });\n              } catch (error) {\n                // 변환 중 발생한 모든 예외 처리\n                reject(error);\n              }\n            }));\n          case 1:\n          case "end":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }))();\n  },\n  /**\r\n   * 변환 UI 업데이트\r\n   * @param {string} status - 상태 (progress, success, error)\r\n   * @param {Object} data - 상태에 따른 추가 데이터\r\n   * @private\r\n   */\n  _updateConversionUI: function _updateConversionUI(status) {\n    var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var conversionOutput = document.getElementById(\'conversion-output\');\n    var progressBar = document.getElementById(\'conversion-progress-bar\');\n    var progressText = document.getElementById(\'conversion-progress-text\');\n    var resultContainer = document.getElementById(\'conversion-result\');\n    if (!conversionOutput) return;\n    conversionOutput.classList.remove(\'hidden\');\n    switch (status) {\n      case \'progress\':\n        // 진행 상태 업데이트\n        if (progressBar) {\n          progressBar.style.width = "".concat(data.progress, "%");\n          progressBar.setAttribute(\'aria-valuenow\', data.progress);\n        }\n        if (progressText) {\n          progressText.textContent = "".concat(Math.round(data.progress), "% \\uC644\\uB8CC");\n        }\n\n        // 결과 영역 숨김\n        if (resultContainer) {\n          resultContainer.classList.add(\'hidden\');\n        }\n        break;\n      case \'success\':\n        // 진행 상태 100%\n        if (progressBar) {\n          progressBar.style.width = \'100%\';\n          progressBar.setAttribute(\'aria-valuenow\', 100);\n        }\n        if (progressText) {\n          progressText.textContent = \'변환 완료\';\n        }\n\n        // 결과 영역 표시\n        if (resultContainer) {\n          resultContainer.classList.remove(\'hidden\');\n          resultContainer.innerHTML = "\\n            <div class=\\"bg-green-50 border border-green-200 rounded-md p-4 mb-4\\">\\n              <div class=\\"flex\\">\\n                <div class=\\"flex-shrink-0\\">\\n                  <svg class=\\"h-5 w-5 text-green-400\\" fill=\\"currentColor\\" viewBox=\\"0 0 20 20\\" xmlns=\\"http://www.w3.org/2000/svg\\">\\n                    <path fill-rule=\\"evenodd\\" d=\\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\\" clip-rule=\\"evenodd\\"></path>\\n                  </svg>\\n                </div>\\n                <div class=\\"ml-3\\">\\n                  <h3 class=\\"text-sm font-medium text-green-800\\">\\uBCC0\\uD658 \\uC131\\uACF5</h3>\\n                  <div class=\\"mt-2 text-sm text-green-700\\">\\n                    <p>\\uD30C\\uC77C\\uC774 \\uC131\\uACF5\\uC801\\uC73C\\uB85C \\uBCC0\\uD658\\uB418\\uC5C8\\uC2B5\\uB2C8\\uB2E4.</p>\\n                  </div>\\n                </div>\\n              </div>\\n            </div>\\n            \\n            <div class=\\"border border-gray-200 rounded-md p-4\\">\\n              <h3 class=\\"font-medium mb-2\\">\\uB2E4\\uC6B4\\uB85C\\uB4DC</h3>\\n              <p class=\\"text-sm text-gray-600 mb-4\\">".concat(data.filename, " (").concat(this._formatFileSize(data.size), ")</p>\\n              <a \\n                id=\\"download-btn\\" \\n                href=\\"").concat(data.url, "\\" \\n                download=\\"").concat(data.filename, "\\" \\n                class=\\"inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\\"\\n              >\\n                <svg class=\\"mr-2 h-5 w-5\\" fill=\\"none\\" stroke=\\"currentColor\\" viewBox=\\"0 0 24 24\\" xmlns=\\"http://www.w3.org/2000/svg\\">\\n                  <path stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" stroke-width=\\"2\\" d=\\"M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4\\"></path>\\n                </svg>\\n                \\uB2E4\\uC6B4\\uB85C\\uB4DC\\n              </a>\\n            </div>\\n          ");\n        }\n        break;\n      case \'error\':\n        // 진행 상태 초기화\n        if (progressBar) {\n          progressBar.style.width = \'0%\';\n          progressBar.setAttribute(\'aria-valuenow\', 0);\n        }\n        if (progressText) {\n          progressText.textContent = \'변환 실패\';\n        }\n\n        // 오류 메시지 표시\n        if (resultContainer) {\n          resultContainer.classList.remove(\'hidden\');\n          resultContainer.innerHTML = "\\n            <div class=\\"bg-red-50 border border-red-200 rounded-md p-4\\">\\n              <div class=\\"flex\\">\\n                <div class=\\"flex-shrink-0\\">\\n                  <svg class=\\"h-5 w-5 text-red-400\\" fill=\\"currentColor\\" viewBox=\\"0 0 20 20\\" xmlns=\\"http://www.w3.org/2000/svg\\">\\n                    <path fill-rule=\\"evenodd\\" d=\\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\\" clip-rule=\\"evenodd\\"></path>\\n                  </svg>\\n                </div>\\n                <div class=\\"ml-3\\">\\n                  <h3 class=\\"text-sm font-medium text-red-800\\">\\uBCC0\\uD658 \\uC2E4\\uD328</h3>\\n                  <div class=\\"mt-2 text-sm text-red-700\\">\\n                    <p>".concat(data.error || \'알 수 없는 오류가 발생했습니다.\', "</p>\\n                  </div>\\n                </div>\\n              </div>\\n            </div>\\n          ");\n        }\n        break;\n    }\n  }\n};\n\n// DOM 로드 완료 후 컨트롤러 초기화\ndocument.addEventListener(\'DOMContentLoaded\', function () {\n  console.log(\'DOM 로드 완료, 변환 페이지 컨트롤러 초기화 시작\');\n  ConvertPageController.init();\n});\n\n// 전역 객체에 컨트롤러 추가\nwindow.FileToQR.ConvertPageController = ConvertPageController;\n/* unused harmony default export */ var __WEBPACK_DEFAULT_EXPORT__ = ((/* unused pure expression or super */ null && (ConvertPageController)));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///985\n')}},Q=>{Q.O(0,[420],(()=>{return B=985,Q(Q.s=B);var B}));Q.O()}]);