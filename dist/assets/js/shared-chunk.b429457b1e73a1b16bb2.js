"use strict";(self.webpackChunkfiletoqr=self.webpackChunkfiletoqr||[]).push([[80],{389:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _common_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(498);\n/**\r\n * file-utils.js - FileToQR 파일 유틸리티 모듈\r\n * 버전: 1.2.0\r\n * 최종 업데이트: 2025-08-01\r\n *\r\n * 이 모듈은 파일 관련 공통 유틸리티 함수들을 제공합니다:\r\n * - 파일 확장자 추출\r\n * - 파일 크기 포맷팅\r\n * - 파일 MIME 타입 관리\r\n * - 데이터 URI 변환\r\n */\n\n\n\n// 파일 유틸리티 모듈 API 정의\nvar FileUtils = {\n  /**\r\n   * 파일명에서 확장자 추출\r\n   * @param {string} filename - 파일명\r\n   * @returns {string} 소문자 확장자 (점 제외)\r\n   */\n  getFileExtension: function getFileExtension(filename) {\n    if (!_common_utils_js__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .A.validation.isValidFileName(filename)) return '';\n    return filename.split('.').pop().toLowerCase();\n  },\n  /**\r\n   * 바이트 단위 파일 크기를 사람이 읽기 쉬운 형식으로 변환\r\n   * @param {number} bytes - 바이트 단위 크기\r\n   * @param {number} decimals - 소수점 자릿수 (기본값: 2)\r\n   * @returns {string} 포맷팅된 파일 크기 (예: \"1.5 MB\")\r\n   */\n  formatFileSize: function formatFileSize(bytes) {\n    var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n    console.log('FileUtils.formatFileSize 호출:', bytes, decimals);\n    if (bytes === 0) return '0 Bytes';\n    var k = 1024;\n    var dm = decimals < 0 ? 0 : decimals;\n    var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n    var i = Math.floor(Math.log(bytes) / Math.log(k));\n    var result = parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n    console.log('파일 크기 변환 결과:', result);\n    return result;\n  },\n  /**\r\n   * 확장자에 따른 MIME 타입 반환\r\n   * @param {string} format - 파일 확장자 (점 제외)\r\n   * @returns {string} MIME 타입\r\n   */\n  getMimeType: function getMimeType(format) {\n    console.log('FileUtils.getMimeType 호출:', format);\n    var mimeTypes = {\n      // 이미지\n      'png': 'image/png',\n      'jpg': 'image/jpeg',\n      'jpeg': 'image/jpeg',\n      'gif': 'image/gif',\n      'webp': 'image/webp',\n      'svg': 'image/svg+xml',\n      'bmp': 'image/bmp',\n      'ico': 'image/x-icon',\n      // 문서\n      'pdf': 'application/pdf',\n      'doc': 'application/msword',\n      'docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n      'xls': 'application/vnd.ms-excel',\n      'xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n      'ppt': 'application/vnd.ms-powerpoint',\n      'pptx': 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n      'txt': 'text/plain',\n      'rtf': 'application/rtf',\n      // 오디오\n      'mp3': 'audio/mpeg',\n      'wav': 'audio/wav',\n      'ogg': 'audio/ogg',\n      'flac': 'audio/flac',\n      'm4a': 'audio/m4a',\n      // 비디오\n      'mp4': 'video/mp4',\n      'webm': 'video/webm',\n      'avi': 'video/x-msvideo',\n      'mov': 'video/quicktime',\n      'wmv': 'video/x-ms-wmv',\n      // 데이터\n      'json': 'application/json',\n      'xml': 'application/xml',\n      'csv': 'text/csv',\n      'yaml': 'application/x-yaml',\n      'yml': 'application/x-yaml',\n      // 압축\n      'zip': 'application/zip',\n      'rar': 'application/x-rar-compressed',\n      '7z': 'application/x-7z-compressed',\n      'tar': 'application/x-tar',\n      'gz': 'application/gzip'\n    };\n    var mimeType = mimeTypes[format === null || format === void 0 ? void 0 : format.toLowerCase()] || 'application/octet-stream';\n    console.log('MIME 타입 추론 결과:', format, mimeType);\n    return mimeType;\n  },\n  /**\r\n   * 출력 파일명 생성\r\n   * @param {string} inputFileName - 입력 파일명\r\n   * @param {string} outputFormat - 출력 형식 (확장자)\r\n   * @returns {string} 새 파일명\r\n   */\n  getOutputFileName: function getOutputFileName(inputFileName, outputFormat) {\n    var baseName = inputFileName.substring(0, inputFileName.lastIndexOf('.')) || inputFileName;\n    return \"\".concat(baseName, \".\").concat(outputFormat);\n  },\n  /**\r\n   * 파일을 데이터 URI로 변환\r\n   * @param {File} file - 파일 객체\r\n   * @returns {Promise<string>} 데이터 URI 문자열\r\n   */\n  fileToDataUri: function fileToDataUri(file) {\n    return new Promise(function (resolve, reject) {\n      var reader = new FileReader();\n      reader.onload = function (event) {\n        resolve(event.target.result);\n      };\n      reader.onerror = function (error) {\n        reject(error);\n      };\n      reader.readAsDataURL(file);\n    });\n  },\n  /**\r\n   * 데이터 URI에서 MIME 타입 추출\r\n   * @param {string} dataUri - 데이터 URI\r\n   * @returns {string} MIME 타입\r\n   */\n  getMimeTypeFromDataUri: function getMimeTypeFromDataUri(dataUri) {\n    var match = dataUri.match(/^data:([^;]+);/);\n    return match ? match[1] : 'application/octet-stream';\n  },\n  /**\r\n   * 파일 크기 검증\r\n   * @param {File} file - 파일 객체\r\n   * @param {number} maxSize - 최대 허용 크기 (바이트)\r\n   * @returns {boolean} 유효성 여부\r\n   */\n  validateFileSize: function validateFileSize(file, maxSize) {\n    return _common_utils_js__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .A.validation.isValidFileSize(file.size, maxSize);\n  },\n  /**\r\n   * 파일 형식 검증\r\n   * @param {File} file - 파일 객체\r\n   * @param {Array<string>} allowedFormats - 허용된 파일 형식 배열 (확장자)\r\n   * @returns {boolean} 유효성 여부\r\n   */\n  validateFileType: function validateFileType(file, allowedFormats) {\n    if (!file || !allowedFormats || !Array.isArray(allowedFormats)) {\n      return false;\n    }\n    var extension = this.getFileExtension(file.name);\n    return allowedFormats.includes(extension);\n  }\n};\n\n// 하위 호환성을 위한 전역 참조\nif (typeof window !== 'undefined') {\n  window.FileToQR = window.FileToQR || {};\n  window.FileToQR.utils = window.FileToQR.utils || {};\n  window.FileToQR.utils.file = FileUtils;\n  // 직접 접근을 위한 전역 참조 추가\n  window.FileUtils = FileUtils;\n}\n\n// 모듈 내보내기\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (FileUtils);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///389\n")},498:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nfunction _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n/**\r\n * common-utils.js - FileToQR 공통 유틸리티 모듈\r\n * 버전: 1.0.0\r\n * 최종 업데이트: 2025-08-01\r\n * \r\n * 이 모듈은 여러 파일에서 중복되는 공통 유틸리티 함수들을 통합합니다:\r\n * - 버전 비교 유틸리티\r\n * - 형식 검증 함수\r\n * - 기타 공통 헬퍼 함수\r\n */\n\n// 공통 유틸리티 모듈 정의\nvar CommonUtils = {\n  /**\r\n   * 버전 비교\r\n   * @param {string} version1 - 첫 번째 버전\r\n   * @param {string} version2 - 두 번째 버전\r\n   * @returns {number} version1이 version2보다 크면 1, 같으면 0, 작으면 -1\r\n   */\n  compareVersions: function compareVersions(version1, version2) {\n    var v1parts = version1.split(\'.\').map(Number);\n    var v2parts = version2.split(\'.\').map(Number);\n    for (var i = 0; i < v1parts.length; ++i) {\n      if (v2parts.length === i) {\n        return 1; // version1이 더 긴 경우\n      }\n      if (v1parts[i] > v2parts[i]) {\n        return 1;\n      }\n      if (v1parts[i] < v2parts[i]) {\n        return -1;\n      }\n    }\n    if (v1parts.length !== v2parts.length) {\n      return -1; // version2가 더 긴 경우\n    }\n    return 0; // 버전이 같음\n  },\n  /**\r\n   * 형식 검증 함수 - 파일/값 검증용 공통 유틸리티\r\n   */\n  validation: {\n    /**\r\n     * 이메일 형식 검증\r\n     * @param {string} email - 검증할 이메일\r\n     * @returns {boolean} 유효성 여부\r\n     */\n    isValidEmail: function isValidEmail(email) {\n      var regex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n      return regex.test(email);\n    },\n    /**\r\n     * URL 형식 검증\r\n     * @param {string} url - 검증할 URL\r\n     * @returns {boolean} 유효성 여부\r\n     */\n    isValidUrl: function isValidUrl(url) {\n      try {\n        new URL(url);\n        return true;\n      } catch (e) {\n        return false;\n      }\n    },\n    /**\r\n     * 파일명 형식 검증\r\n     * @param {string} filename - 검증할 파일명\r\n     * @returns {boolean} 유효성 여부\r\n     */\n    isValidFileName: function isValidFileName(filename) {\n      return typeof filename === \'string\' && filename.length > 0;\n    },\n    /**\r\n     * 파일 크기 검증\r\n     * @param {number} size - 파일 크기 (바이트)\r\n     * @param {number} maxSize - 최대 허용 크기 (바이트)\r\n     * @returns {boolean} 유효성 여부\r\n     */\n    isValidFileSize: function isValidFileSize(size, maxSize) {\n      return typeof size === \'number\' && typeof maxSize === \'number\' && size > 0 && size <= maxSize;\n    }\n  },\n  /**\r\n   * 일반 유틸리티 함수\r\n   */\n  general: {\n    /**\r\n     * DOM 요소 생성 헬퍼\r\n     * @param {string} tag - 태그 이름\r\n     * @param {Object} attributes - 속성 객체\r\n     * @param {string|Element|Array} [children] - 자식 요소\r\n     * @returns {Element} 생성된 요소\r\n     */\n    createElement: function createElement(tag) {\n      var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var children = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var element = document.createElement(tag);\n\n      // 속성 추가\n      Object.entries(attributes).forEach(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          value = _ref2[1];\n        if (key === \'className\') {\n          element.className = value;\n        } else if (key === \'style\' && _typeof(value) === \'object\') {\n          Object.assign(element.style, value);\n        } else {\n          element.setAttribute(key, value);\n        }\n      });\n\n      // 자식 요소 추가\n      if (children) {\n        if (typeof children === \'string\') {\n          element.textContent = children;\n        } else if (children instanceof Element) {\n          element.appendChild(children);\n        } else if (Array.isArray(children)) {\n          children.forEach(function (child) {\n            if (child instanceof Element) {\n              element.appendChild(child);\n            } else if (typeof child === \'string\') {\n              element.appendChild(document.createTextNode(child));\n            }\n          });\n        }\n      }\n      return element;\n    },\n    /**\r\n     * 디바운스 함수\r\n     * @param {Function} func - 실행할 함수\r\n     * @param {number} wait - 대기 시간 (ms)\r\n     * @returns {Function} 디바운스된 함수\r\n     */\n    debounce: function debounce(func, wait) {\n      var timeout;\n      return function executedFunction() {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        var later = function later() {\n          clearTimeout(timeout);\n          func.apply(void 0, args);\n        };\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n      };\n    },\n    /**\r\n     * 쓰로틀 함수\r\n     * @param {Function} func - 실행할 함수\r\n     * @param {number} limit - 제한 시간 (ms)\r\n     * @returns {Function} 쓰로틀된 함수\r\n     */\n    throttle: function throttle(func, limit) {\n      var inThrottle;\n      return function executedFunction() {\n        if (!inThrottle) {\n          func.apply(void 0, arguments);\n          inThrottle = true;\n          setTimeout(function () {\n            inThrottle = false;\n          }, limit);\n        }\n      };\n    }\n  }\n};\n\n// 하위 호환성을 위한 전역 참조\nif (typeof window !== \'undefined\') {\n  window.FileToQR = window.FileToQR || {};\n  window.FileToQR.utils = window.FileToQR.utils || {};\n  window.FileToQR.utils.common = CommonUtils;\n}\n\n// 모듈 내보내기\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CommonUtils);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///498\n')},557:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _utils_file_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(389);\n/* harmony import */ var _utils_common_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(498);\nfunction _createForOfIteratorHelper(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t[\"return\"] || t[\"return\"](); } finally { if (u) throw o; } } }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return r; }; var t, r = {}, e = Object.prototype, n = e.hasOwnProperty, o = \"function\" == typeof Symbol ? Symbol : {}, i = o.iterator || \"@@iterator\", a = o.asyncIterator || \"@@asyncIterator\", u = o.toStringTag || \"@@toStringTag\"; function c(t, r, e, n) { return Object.defineProperty(t, r, { value: e, enumerable: !n, configurable: !n, writable: !n }); } try { c({}, \"\"); } catch (t) { c = function c(t, r, e) { return t[r] = e; }; } function h(r, e, n, o) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype); return c(a, \"_invoke\", function (r, e, n) { var o = 1; return function (i, a) { if (3 === o) throw Error(\"Generator is already running\"); if (4 === o) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var u = n.delegate; if (u) { var c = d(u, n); if (c) { if (c === f) continue; return c; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (1 === o) throw o = 4, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = 3; var h = s(r, e, n); if (\"normal\" === h.type) { if (o = n.done ? 4 : 2, h.arg === f) continue; return { value: h.arg, done: n.done }; } \"throw\" === h.type && (o = 4, n.method = \"throw\", n.arg = h.arg); } }; }(r, n, new Context(o || [])), !0), a; } function s(t, r, e) { try { return { type: \"normal\", arg: t.call(r, e) }; } catch (t) { return { type: \"throw\", arg: t }; } } r.wrap = h; var f = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var l = {}; c(l, i, function () { return this; }); var p = Object.getPrototypeOf, y = p && p(p(x([]))); y && y !== e && n.call(y, i) && (l = y); var v = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(l); function g(t) { [\"next\", \"throw\", \"return\"].forEach(function (r) { c(t, r, function (t) { return this._invoke(r, t); }); }); } function AsyncIterator(t, r) { function e(o, i, a, u) { var c = s(t[o], t, i); if (\"throw\" !== c.type) { var h = c.arg, f = h.value; return f && \"object\" == _typeof(f) && n.call(f, \"__await\") ? r.resolve(f.__await).then(function (t) { e(\"next\", t, a, u); }, function (t) { e(\"throw\", t, a, u); }) : r.resolve(f).then(function (t) { h.value = t, a(h); }, function (t) { return e(\"throw\", t, a, u); }); } u(c.arg); } var o; c(this, \"_invoke\", function (t, n) { function i() { return new r(function (r, o) { e(t, n, r, o); }); } return o = o ? o.then(i, i) : i(); }, !0); } function d(r, e) { var n = e.method, o = r.i[n]; if (o === t) return e.delegate = null, \"throw\" === n && r.i[\"return\"] && (e.method = \"return\", e.arg = t, d(r, e), \"throw\" === e.method) || \"return\" !== n && (e.method = \"throw\", e.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), f; var i = s(o, r.i, e.arg); if (\"throw\" === i.type) return e.method = \"throw\", e.arg = i.arg, e.delegate = null, f; var a = i.arg; return a ? a.done ? (e[r.r] = a.value, e.next = r.n, \"return\" !== e.method && (e.method = \"next\", e.arg = t), e.delegate = null, f) : a : (e.method = \"throw\", e.arg = new TypeError(\"iterator result is not an object\"), e.delegate = null, f); } function w(t) { this.tryEntries.push(t); } function m(r) { var e = r[4] || {}; e.type = \"normal\", e.arg = t, r[4] = e; } function Context(t) { this.tryEntries = [[-1]], t.forEach(w, this), this.reset(!0); } function x(r) { if (null != r) { var e = r[i]; if (e) return e.call(r); if (\"function\" == typeof r.next) return r; if (!isNaN(r.length)) { var o = -1, a = function e() { for (; ++o < r.length;) if (n.call(r, o)) return e.value = r[o], e.done = !1, e; return e.value = t, e.done = !0, e; }; return a.next = a; } } throw new TypeError(_typeof(r) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, c(v, \"constructor\", GeneratorFunctionPrototype), c(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = c(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), r.isGeneratorFunction = function (t) { var r = \"function\" == typeof t && t.constructor; return !!r && (r === GeneratorFunction || \"GeneratorFunction\" === (r.displayName || r.name)); }, r.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, c(t, u, \"GeneratorFunction\")), t.prototype = Object.create(v), t; }, r.awrap = function (t) { return { __await: t }; }, g(AsyncIterator.prototype), c(AsyncIterator.prototype, a, function () { return this; }), r.AsyncIterator = AsyncIterator, r.async = function (t, e, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(h(t, e, n, o), i); return r.isGeneratorFunction(e) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, g(v), c(v, u, \"Generator\"), c(v, i, function () { return this; }), c(v, \"toString\", function () { return \"[object Generator]\"; }), r.keys = function (t) { var r = Object(t), e = []; for (var n in r) e.unshift(n); return function t() { for (; e.length;) if ((n = e.pop()) in r) return t.value = n, t.done = !1, t; return t.done = !0, t; }; }, r.values = x, Context.prototype = { constructor: Context, reset: function reset(r) { if (this.prev = this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(m), !r) for (var e in this) \"t\" === e.charAt(0) && n.call(this, e) && !isNaN(+e.slice(1)) && (this[e] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0][4]; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(r) { if (this.done) throw r; var e = this; function n(t) { a.type = \"throw\", a.arg = r, e.next = t; } for (var o = e.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i[4], u = this.prev, c = i[1], h = i[2]; if (-1 === i[0]) return n(\"end\"), !1; if (!c && !h) throw Error(\"try statement without catch or finally\"); if (null != i[0] && i[0] <= u) { if (u < c) return this.method = \"next\", this.arg = t, n(c), !0; if (u < h) return n(h), !1; } } }, abrupt: function abrupt(t, r) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var n = this.tryEntries[e]; if (n[0] > -1 && n[0] <= this.prev && this.prev < n[2]) { var o = n; break; } } o && (\"break\" === t || \"continue\" === t) && o[0] <= r && r <= o[2] && (o = null); var i = o ? o[4] : {}; return i.type = t, i.arg = r, o ? (this.method = \"next\", this.next = o[2], f) : this.complete(i); }, complete: function complete(t, r) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && r && (this.next = r), f; }, finish: function finish(t) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var e = this.tryEntries[r]; if (e[2] === t) return this.complete(e[4], e[3]), m(e), f; } }, \"catch\": function _catch(t) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var e = this.tryEntries[r]; if (e[0] === t) { var n = e[4]; if (\"throw\" === n.type) { var o = n.arg; m(e); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(r, e, n) { return this.delegate = { i: x(r), r: e, n: n }, \"next\" === this.method && (this.arg = t), f; } }, r; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\n/**\r\n * converter-core.js - FileToQR 파일 변환 핵심 모듈\r\n * 버전: 1.2.0\r\n * 최종 업데이트: 2025-08-01\r\n * 참조: ../../docs/architecture/converter-system.md\r\n * \r\n * 이 모듈은 파일 변환 기능의 핵심 로직을 제공합니다:\r\n * - 다양한 파일 형식 간 변환 구현\r\n * - 변환 프로세스 관리\r\n * - 파일 형식 지원 및 호환성 정보\r\n */\n\n\n\n\n// 컨버터 코어 모듈 정의\nvar ConverterCore = {\n  // 지원하는 파일 형식 및 변환 경로 정의\n  supportedFormats: {\n    // 이미지 형식\n    'image': {\n      'inputs': ['png', 'jpg', 'jpeg', 'gif', 'webp', 'bmp', 'svg'],\n      'outputs': ['png', 'jpg', 'jpeg', 'gif', 'webp', 'bmp', 'svg'],\n      'convertibleTo': {\n        'png': ['jpg', 'jpeg', 'gif', 'webp', 'bmp'],\n        'jpg': ['png', 'gif', 'webp', 'bmp'],\n        'jpeg': ['png', 'gif', 'webp', 'bmp'],\n        'gif': ['png', 'jpg', 'jpeg', 'webp', 'bmp'],\n        'webp': ['png', 'jpg', 'jpeg', 'gif', 'bmp'],\n        'bmp': ['png', 'jpg', 'jpeg', 'gif', 'webp'],\n        'svg': ['png', 'jpg', 'jpeg', 'gif', 'webp', 'bmp']\n      }\n    },\n    // 문서 형식 - 제한된 변환 기능 (브라우저 기반)\n    'document': {\n      'inputs': ['txt', 'md', 'csv', 'json', 'xml', 'html'],\n      'outputs': ['txt', 'md', 'csv', 'json', 'xml', 'html'],\n      'convertibleTo': {\n        'txt': ['md', 'html'],\n        'md': ['txt', 'html'],\n        'csv': ['json', 'txt', 'html'],\n        'json': ['csv', 'txt', 'xml', 'html'],\n        'xml': ['json', 'txt', 'html'],\n        'html': ['txt', 'md']\n      }\n    },\n    // 오디오 형식 - 제한된 변환 기능 (웹 오디오 API 기반)\n    'audio': {\n      'inputs': ['mp3', 'wav', 'ogg'],\n      'outputs': ['mp3', 'wav', 'ogg'],\n      'convertibleTo': {\n        'mp3': ['wav', 'ogg'],\n        'wav': ['mp3', 'ogg'],\n        'ogg': ['mp3', 'wav']\n      }\n    }\n  },\n  /**\r\n   * 새로운 통합 변환 인터페이스 - 프론트엔드 UI에서 사용\r\n   * @param {File} file - 원본 파일 객체\r\n   * @param {string} outputFormat - 변환할 형식 (확장자)\r\n   * @param {Object} options - 변환 옵션\r\n   * @param {Function} progressCallback - 진행 상황 콜백 함수\r\n   * @returns {Promise<Object>} 변환 결과 객체 (url, filename, size, mimeType)\r\n   */\n  convert: function convert(file, outputFormat) {\n    var _arguments = arguments,\n      _this = this;\n    return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var options, progressCallback, result, url;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            options = _arguments.length > 2 && _arguments[2] !== undefined ? _arguments[2] : {};\n            progressCallback = _arguments.length > 3 && _arguments[3] !== undefined ? _arguments[3] : function () {};\n            _context.prev = 2;\n            // 진행상황 업데이트 시작\n            progressCallback({\n              progress: 0\n            });\n\n            // 기존 convertFile 함수 호출\n            _context.next = 6;\n            return _this.convertFile(file, outputFormat, options, function (data) {\n              // 기존 콜백 포맷에서 새 포맷으로 변환\n              if (data.stage === 'start') {\n                progressCallback({\n                  progress: 0\n                });\n              } else if (data.stage === 'processing') {\n                progressCallback({\n                  progress: data.progress\n                });\n              } else if (data.stage === 'complete') {\n                progressCallback({\n                  progress: 100\n                });\n              }\n            });\n          case 6:\n            result = _context.sent;\n            // Blob URL 생성\n            url = URL.createObjectURL(result.blob); // 결과 리턴 포맷 변경\n            return _context.abrupt(\"return\", {\n              url: url,\n              filename: result.metadata.outputFileName,\n              size: result.blob.size,\n              mimeType: result.blob.type\n            });\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](2);\n            console.error('변환 실패:', _context.t0);\n            throw _context.t0;\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[2, 11]]);\n    }))();\n  },\n  /**\r\n   * 파일 변환 시작\r\n   * @param {File} file - 원본 파일 객체\r\n   * @param {string} outputFormat - 변환할 형식 (확장자)\r\n   * @param {Object} options - 변환 옵션\r\n   * @param {Function} progressCallback - 진행 상황 콜백 함수\r\n   * @returns {Promise<Object>} 변환 결과 객체 (Blob, 메타데이터 등)\r\n   */\n  convertFile: function convertFile(file, outputFormat) {\n    var _arguments2 = arguments,\n      _this2 = this;\n    return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n      var options, progressCallback, inputFormat, metadata, dataUri, result, outputFileName;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            options = _arguments2.length > 2 && _arguments2[2] !== undefined ? _arguments2[2] : {};\n            progressCallback = _arguments2.length > 3 && _arguments2[3] !== undefined ? _arguments2[3] : function () {};\n            // 변환 시작 알림\n            if (progressCallback) {\n              progressCallback({\n                stage: 'start',\n                progress: 0,\n                message: '변환 준비 중...'\n              });\n            }\n            _context2.prev = 3;\n            // 파일 유형 검증\n            inputFormat = _utils_file_utils_js__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .A.getFileExtension(file.name);\n            if (_this2.canConvert(inputFormat, outputFormat)) {\n              _context2.next = 7;\n              break;\n            }\n            throw new Error(\"\\uC9C0\\uC6D0\\uD558\\uC9C0 \\uC54A\\uB294 \\uBCC0\\uD658 \\uACBD\\uB85C: \".concat(inputFormat, \" \\u2192 \").concat(outputFormat));\n          case 7:\n            // 파일 메타데이터 추출\n            metadata = {\n              name: file.name,\n              type: file.type,\n              size: file.size,\n              lastModified: file.lastModified,\n              inputFormat: inputFormat,\n              outputFormat: outputFormat\n            }; // 변환 처리\n            progressCallback({\n              stage: 'processing',\n              progress: 30,\n              message: '파일 처리 중...'\n            });\n\n            // 파일 데이터 읽기\n            _context2.next = 11;\n            return _utils_file_utils_js__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .A.fileToDataUri(file);\n          case 11:\n            dataUri = _context2.sent;\n            if (!_this2.isImageConversion(inputFormat, outputFormat)) {\n              _context2.next = 18;\n              break;\n            }\n            _context2.next = 15;\n            return _this2.convertImage(dataUri, outputFormat, options, progressCallback);\n          case 15:\n            result = _context2.sent;\n            _context2.next = 31;\n            break;\n          case 18:\n            if (!_this2.isDocumentConversion(inputFormat, outputFormat)) {\n              _context2.next = 24;\n              break;\n            }\n            _context2.next = 21;\n            return _this2.convertDocument(dataUri, inputFormat, outputFormat, options, progressCallback);\n          case 21:\n            result = _context2.sent;\n            _context2.next = 31;\n            break;\n          case 24:\n            if (!_this2.isAudioConversion(inputFormat, outputFormat)) {\n              _context2.next = 30;\n              break;\n            }\n            _context2.next = 27;\n            return _this2.convertAudio(dataUri, outputFormat, options, progressCallback);\n          case 27:\n            result = _context2.sent;\n            _context2.next = 31;\n            break;\n          case 30:\n            throw new Error('지원하지 않는 변환 유형');\n          case 31:\n            // 결과 정보 반환\n            outputFileName = _utils_file_utils_js__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .A.getOutputFileName(file.name, outputFormat);\n            progressCallback({\n              stage: 'complete',\n              progress: 100,\n              message: '변환 완료!'\n            });\n            return _context2.abrupt(\"return\", {\n              blob: result,\n              metadata: _objectSpread(_objectSpread({}, metadata), {}, {\n                outputFileName: outputFileName\n              })\n            });\n          case 36:\n            _context2.prev = 36;\n            _context2.t0 = _context2[\"catch\"](3);\n            console.error('파일 변환 실패:', _context2.t0);\n            progressCallback({\n              stage: 'error',\n              progress: 0,\n              message: \"\\uBCC0\\uD658 \\uC2E4\\uD328: \".concat(_context2.t0.message)\n            });\n            throw _context2.t0;\n          case 41:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2, null, [[3, 36]]);\n    }))();\n  },\n  /**\r\n   * 변환 가능 여부 확인\r\n   * @param {string} inputFormat - 입력 파일 형식\r\n   * @param {string} outputFormat - 출력 파일 형식\r\n   * @returns {boolean} 변환 가능 여부\r\n   */\n  canConvert: function canConvert(inputFormat, outputFormat) {\n    // 동일 형식은 항상 가능\n    if (inputFormat === outputFormat) return true;\n\n    // 지원하는 형식 확인\n    var categories = Object.keys(this.supportedFormats);\n    for (var _i = 0, _categories = categories; _i < _categories.length; _i++) {\n      var category = _categories[_i];\n      var formatInfo = this.supportedFormats[category];\n\n      // 입력 형식이 지원되는지 확인\n      if (formatInfo.inputs.includes(inputFormat)) {\n        // 이 입력 형식에서 출력 형식으로 변환 가능한지 확인\n        if (formatInfo.convertibleTo[inputFormat] && formatInfo.convertibleTo[inputFormat].includes(outputFormat)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  },\n  /**\r\n   * 주어진 형식이 이미지 변환인지 확인\r\n   */\n  isImageConversion: function isImageConversion(inputFormat, outputFormat) {\n    var image = this.supportedFormats.image;\n    return image.inputs.includes(inputFormat) && image.outputs.includes(outputFormat);\n  },\n  /**\r\n   * 주어진 형식이 문서 변환인지 확인\r\n   */\n  isDocumentConversion: function isDocumentConversion(inputFormat, outputFormat) {\n    var document = this.supportedFormats.document;\n    return document.inputs.includes(inputFormat) && document.outputs.includes(outputFormat);\n  },\n  /**\r\n   * 주어진 형식이 오디오 변환인지 확인\r\n   */\n  isAudioConversion: function isAudioConversion(inputFormat, outputFormat) {\n    var audio = this.supportedFormats.audio;\n    return audio.inputs.includes(inputFormat) && audio.outputs.includes(outputFormat);\n  },\n  /**\r\n   * 이미지 변환 구현\r\n   * @param {string} dataUri - 원본 이미지 데이터 URI\r\n   * @param {string} outputFormat - 출력 이미지 형식\r\n   * @param {Object} options - 변환 옵션 (품질, 크기 등)\r\n   * @param {Function} progressCallback - 진행 상황 콜백\r\n   * @returns {Promise<Blob>} 변환된 이미지 Blob\r\n   */\n  convertImage: function convertImage(dataUri, outputFormat) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var progressCallback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function () {};\n    return new Promise(function (resolve, reject) {\n      try {\n        var img = new Image();\n        img.onload = function () {\n          progressCallback({\n            stage: 'processing',\n            progress: 50,\n            message: '이미지 변환 중...'\n          });\n          var canvas = document.createElement('canvas');\n          var ctx = canvas.getContext('2d');\n\n          // 이미지 크기 조정 (옵션에 따라)\n          var width = img.width;\n          var height = img.height;\n          if (options.width && options.height) {\n            width = options.width;\n            height = options.height;\n          } else if (options.width) {\n            var ratio = options.width / img.width;\n            width = options.width;\n            height = img.height * ratio;\n          } else if (options.height) {\n            var _ratio = options.height / img.height;\n            height = options.height;\n            width = img.width * _ratio;\n          } else if (options.maxWidth && img.width > options.maxWidth) {\n            var _ratio2 = options.maxWidth / img.width;\n            width = options.maxWidth;\n            height = img.height * _ratio2;\n          } else if (options.maxHeight && img.height > options.maxHeight) {\n            var _ratio3 = options.maxHeight / img.height;\n            height = options.maxHeight;\n            width = img.width * _ratio3;\n          }\n          canvas.width = width;\n          canvas.height = height;\n\n          // 배경색 설정 (필요한 경우)\n          if (options.backgroundColor) {\n            ctx.fillStyle = options.backgroundColor;\n            ctx.fillRect(0, 0, width, height);\n          }\n\n          // 이미지 그리기\n          ctx.drawImage(img, 0, 0, width, height);\n          progressCallback({\n            stage: 'processing',\n            progress: 80,\n            message: '이미지 인코딩 중...'\n          });\n\n          // 출력 형식에 따라 적절한 MIME 타입 설정\n          var mimeType = _utils_file_utils_js__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .A.getMimeType(outputFormat);\n\n          // 품질 설정 (JPEG, WEBP 등에 적용)\n          var quality = options.quality ? options.quality / 100 : 0.92;\n\n          // 캔버스를 Blob으로 변환\n          canvas.toBlob(function (blob) {\n            if (blob) {\n              progressCallback({\n                stage: 'finalizing',\n                progress: 90,\n                message: '변환 완료 중...'\n              });\n              resolve(blob);\n            } else {\n              reject(new Error('이미지 변환 실패'));\n            }\n          }, mimeType, quality);\n        };\n        img.onerror = function () {\n          reject(new Error('이미지 로드 실패'));\n        };\n        img.src = dataUri;\n      } catch (error) {\n        reject(error);\n      }\n    });\n  },\n  /**\r\n   * 문서 변환 구현\r\n   * @param {string} dataUri - 원본 문서 데이터 URI\r\n   * @param {string} inputFormat - 입력 문서 형식\r\n   * @param {string} outputFormat - 출력 문서 형식\r\n   * @param {Object} options - 변환 옵션\r\n   * @param {Function} progressCallback - 진행 상황 콜백\r\n   * @returns {Promise<Blob>} 변환된 문서 Blob\r\n   */\n  convertDocument: function convertDocument(dataUri, inputFormat, outputFormat) {\n    var _this3 = this;\n    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    var progressCallback = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : function () {};\n    return new Promise(function (resolve, reject) {\n      try {\n        progressCallback({\n          stage: 'processing',\n          progress: 40,\n          message: '문서 변환 중...'\n        });\n\n        // 데이터 URI에서 실제 콘텐츠 추출\n        var base64Content = dataUri.split(',')[1];\n        var textContent = atob(base64Content);\n        var result = '';\n\n        // 형식별 변환 로직\n        if (inputFormat === 'csv' && outputFormat === 'json') {\n          // CSV → JSON 변환\n          result = _this3.csvToJson(textContent, options);\n        } else if (inputFormat === 'json' && outputFormat === 'csv') {\n          // JSON → CSV 변환\n          result = _this3.jsonToCsv(textContent, options);\n        } else if (inputFormat === 'md' && outputFormat === 'html') {\n          // Markdown → HTML 변환 (간단한 규칙만 적용)\n          result = _this3.markdownToHtml(textContent);\n        } else if (inputFormat === 'json' && outputFormat === 'xml') {\n          // JSON → XML 변환\n          result = _this3.jsonToXml(textContent);\n        } else if (inputFormat === 'xml' && outputFormat === 'json') {\n          // XML → JSON 변환 (간단한 구현)\n          result = _this3.xmlToJson(textContent);\n        } else {\n          // 기타 텍스트 변환 (단순 포맷 변경)\n          result = textContent;\n        }\n        progressCallback({\n          stage: 'finalizing',\n          progress: 90,\n          message: '문서 변환 완료 중...'\n        });\n\n        // 결과 Blob 생성\n        var outputMimeType = _utils_file_utils_js__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .A.getMimeType(outputFormat);\n        var resultBlob = new Blob([result], {\n          type: outputMimeType\n        });\n        resolve(resultBlob);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  },\n  /**\r\n   * 오디오 변환 구현 (간단한 예시)\r\n   * 참고: 완전한 오디오 변환은 웹 오디오 API의 제한으로 인해 제약이 있습니다.\r\n   */\n  convertAudio: function convertAudio(dataUri, outputFormat) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var progressCallback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function () {};\n    // 실제 환경에서는 웹 오디오 API를 사용하여 구현해야 합니다.\n    return new Promise(function (resolve, reject) {\n      progressCallback({\n        stage: 'processing',\n        progress: 50,\n        message: '오디오 변환 중... (데모)'\n      });\n\n      // 데모 목적으로 간단히 구현\n      // 실제 구현은 Audio API와 AudioContext를 사용해야 함\n      setTimeout(function () {\n        progressCallback({\n          stage: 'finalizing',\n          progress: 90,\n          message: '오디오 인코딩 중...'\n        });\n\n        // 원본 데이터를 그대로 반환 (실제로는 변환 로직 필요)\n        fetch(dataUri).then(function (response) {\n          return response.blob();\n        }).then(function (blob) {\n          var outputMimeType = _utils_file_utils_js__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .A.getMimeType(outputFormat);\n          var resultBlob = new Blob([blob], {\n            type: outputMimeType\n          });\n          resolve(resultBlob);\n        })[\"catch\"](reject);\n      }, 1000);\n    });\n  },\n  // 문서 변환 유틸리티 함수들\n  /**\r\n   * CSV를 JSON으로 변환\r\n   */\n  csvToJson: function csvToJson(csvText) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var lines = csvText.split(/\\r?\\n/);\n    if (lines.length === 0) return '[]';\n    var headers = lines[0].split(',').map(function (header) {\n      return header.trim();\n    });\n    var result = [];\n    var _loop = function _loop() {\n      if (!lines[i].trim()) return 1; // continue\n      var values = lines[i].split(',');\n      var obj = {};\n      headers.forEach(function (header, index) {\n        obj[header] = values[index] ? values[index].trim() : '';\n      });\n      result.push(obj);\n    };\n    for (var i = 1; i < lines.length; i++) {\n      if (_loop()) continue;\n    }\n    return JSON.stringify(result, null, 2);\n  },\n  /**\r\n   * JSON을 CSV로 변환\r\n   */\n  jsonToCsv: function jsonToCsv(jsonText) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    try {\n      var data = JSON.parse(jsonText);\n      if (!Array.isArray(data) || data.length === 0) {\n        return '';\n      }\n      var headers = Object.keys(data[0]);\n      var headerRow = headers.join(',');\n      var rows = data.map(function (obj) {\n        return headers.map(function (header) {\n          var value = obj[header];\n\n          // 쉼표, 따옴표 등이 포함된 경우 따옴표로 감싸기\n          if (typeof value === 'string' && (value.includes(',') || value.includes('\"'))) {\n            return \"\\\"\".concat(value.replace(/\"/g, '\"\"'), \"\\\"\");\n          }\n          return value !== undefined ? value : '';\n        }).join(',');\n      });\n      return [headerRow].concat(_toConsumableArray(rows)).join('\\n');\n    } catch (e) {\n      throw new Error('유효하지 않은 JSON 형식');\n    }\n  },\n  /**\r\n   * 마크다운을 HTML로 변환 (간단한 규칙만 적용)\r\n   */\n  markdownToHtml: function markdownToHtml(markdown) {\n    var html = markdown\n    // 헤더 변환\n    .replace(/^# (.*?)$/gm, '<h1>$1</h1>').replace(/^## (.*?)$/gm, '<h2>$1</h2>').replace(/^### (.*?)$/gm, '<h3>$1</h3>')\n    // 굵은 텍스트\n    .replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>')\n    // 이탤릭체\n    .replace(/\\*(.*?)\\*/g, '<em>$1</em>')\n    // 링크\n    .replace(/\\[(.*?)\\]\\((.*?)\\)/g, '<a href=\"$2\">$1</a>')\n    // 순서 없는 목록\n    .replace(/^\\- (.*?)$/gm, '<li>$1</li>')\n    // 코드 블록\n    .replace(/`(.*?)`/g, '<code>$1</code>')\n    // 문단\n    .replace(/(.+?)(\\n\\n|$)/g, '<p>$1</p>');\n\n    // 순서 없는 목록 항목을 ul로 감싸기\n    html = html.replace(/<li>.*?<\\/li>(\\n<li>.*?<\\/li>)*/g, function (match) {\n      return '<ul>' + match + '</ul>';\n    });\n    return html;\n  },\n  /**\r\n   * JSON을 XML로 변환 (간단한 구현)\r\n   */\n  jsonToXml: function jsonToXml(jsonText) {\n    try {\n      var data = JSON.parse(jsonText);\n      var _toXml = function toXml(obj) {\n        var rootName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'root';\n        var xml = \"<\".concat(rootName, \">\");\n        for (var key in obj) {\n          if (obj.hasOwnProperty(key)) {\n            var value = obj[key];\n            if (Array.isArray(value)) {\n              xml += \"<\".concat(key, \">\");\n              value.forEach(function (item) {\n                if (_typeof(item) === 'object' && item !== null) {\n                  xml += _toXml(item, 'item');\n                } else {\n                  xml += \"<item>\".concat(item, \"</item>\");\n                }\n              });\n              xml += \"</\".concat(key, \">\");\n            } else if (_typeof(value) === 'object' && value !== null) {\n              xml += _toXml(value, key);\n            } else {\n              xml += \"<\".concat(key, \">\").concat(value, \"</\").concat(key, \">\");\n            }\n          }\n        }\n        xml += \"</\".concat(rootName, \">\");\n        return xml;\n      };\n      return '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n' + _toXml(data);\n    } catch (e) {\n      throw new Error('유효하지 않은 JSON 형식');\n    }\n  },\n  /**\r\n   * XML을 JSON으로 변환 (간단한 구현)\r\n   * 참고: 완전한 XML 파싱은 DOMParser를 사용하는 것이 좋습니다.\r\n   */\n  xmlToJson: function xmlToJson(xmlText) {\n    try {\n      var parser = new DOMParser();\n      var xmlDoc = parser.parseFromString(xmlText, 'text/xml');\n      var _parseNode = function parseNode(node) {\n        if (node.nodeType === Node.TEXT_NODE) {\n          var text = node.nodeValue.trim();\n          return text.length > 0 ? text : null;\n        }\n        if (node.nodeType === Node.ELEMENT_NODE) {\n          var _result = {};\n          var childElements = Array.from(node.children);\n          if (childElements.length === 0) {\n            return node.textContent.trim();\n          }\n\n          // 동일한 이름의 자식 요소가 여러 개인지 확인\n          var childNames = childElements.map(function (child) {\n            return child.nodeName;\n          });\n          var uniqueNames = _toConsumableArray(new Set(childNames));\n          var _iterator = _createForOfIteratorHelper(uniqueNames),\n            _step;\n          try {\n            var _loop2 = function _loop2() {\n              var name = _step.value;\n              var elements = childElements.filter(function (child) {\n                return child.nodeName === name;\n              });\n              if (elements.length === 1) {\n                // 단일 요소\n                _result[name] = _parseNode(elements[0]);\n              } else {\n                // 배열로 처리\n                _result[name] = elements.map(function (element) {\n                  return _parseNode(element);\n                });\n              }\n            };\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              _loop2();\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n          return _result;\n        }\n        return null;\n      };\n      var rootElement = xmlDoc.documentElement;\n      var result = {};\n      result[rootElement.nodeName] = _parseNode(rootElement);\n      return JSON.stringify(result, null, 2);\n    } catch (e) {\n      throw new Error('유효하지 않은 XML 형식');\n    }\n  }\n};\n\n// 하위 호환성을 위한 전역 참조\nif (typeof window !== 'undefined') {\n  window.FileToQR = window.FileToQR || {};\n  window.FileToQR.core = window.FileToQR.core || {};\n  window.FileToQR.core.converter = ConverterCore;\n  // 직접 접근을 위한 전역 참조 추가\n  window.ConverterCore = ConverterCore;\n}\n\n// 모듈 내보내기\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ConverterCore);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUcsQ0FBQyxDQUFDO01BQ2pCQSxNQUFNLENBQUNvSixXQUFXLENBQUNYLFFBQVEsQ0FBQyxHQUFHYixVQUFTLENBQUN3QixXQUFXLENBQUM7TUFFckQsT0FBT2hELElBQUksQ0FBQ0MsU0FBUyxDQUFDckcsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFFeEMsQ0FBQyxDQUFDLE9BQU94RyxDQUFDLEVBQUU7TUFDVixNQUFNLElBQUlzQixLQUFLLENBQUMsZ0JBQWdCLENBQUM7SUFDbkM7RUFDRjtBQUNGLENBQUM7O0FBRUQ7QUFDQSxJQUFJLE9BQU93TyxNQUFNLEtBQUssV0FBVyxFQUFFO0VBQ2pDQSxNQUFNLENBQUNDLFFBQVEsR0FBR0QsTUFBTSxDQUFDQyxRQUFRLElBQUksQ0FBQyxDQUFDO0VBQ3ZDRCxNQUFNLENBQUNDLFFBQVEsQ0FBQ0MsSUFBSSxHQUFHRixNQUFNLENBQUNDLFFBQVEsQ0FBQ0MsSUFBSSxJQUFJLENBQUMsQ0FBQztFQUNqREYsTUFBTSxDQUFDQyxRQUFRLENBQUNDLElBQUksQ0FBQ0MsU0FBUyxHQUFHbkssYUFBYTtFQUM5QztFQUNBZ0ssTUFBTSxDQUFDaEssYUFBYSxHQUFHQSxhQUFhO0FBQ3RDOztBQUVBO0FBQ0EsaUVBQWVBLGFBQWEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9maWxldG9xci8uL2Fzc2V0cy9qcy9jb3JlL2NvbnZlcnRlci1jb3JlLmpzPzM2MDciXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIGNvbnZlcnRlci1jb3JlLmpzIC0gRmlsZVRvUVIg7YyM7J28IOuzgO2ZmCDtlbXsi6wg66qo65OIXHJcbiAqIOuyhOyghDogMS4yLjBcclxuICog7LWc7KKFIOyXheuNsOydtO2KuDogMjAyNS0wOC0wMVxyXG4gKiDssLjsobA6IC4uLy4uL2RvY3MvYXJjaGl0ZWN0dXJlL2NvbnZlcnRlci1zeXN0ZW0ubWRcclxuICogXHJcbiAqIOydtCDrqqjrk4jsnYAg7YyM7J28IOuzgO2ZmCDquLDriqXsnZgg7ZW17IusIOuhnOyngeydhCDsoJzqs7Xtlanri4jri6Q6XHJcbiAqIC0g64uk7JaR7ZWcIO2MjOydvCDtmJXsi50g6rCEIOuzgO2ZmCDqtaztmIRcclxuICogLSDrs4DtmZgg7ZSE66Gc7IS47IqkIOq0gOumrFxyXG4gKiAtIO2MjOydvCDtmJXsi50g7KeA7JuQIOuwjyDtmLjtmZjshLEg7KCV67O0XHJcbiAqL1xyXG5cclxuaW1wb3J0IEZpbGVVdGlscyBmcm9tICcuLi91dGlscy9maWxlLXV0aWxzLmpzJztcclxuaW1wb3J0IENvbW1vblV0aWxzIGZyb20gJy4uL3V0aWxzL2NvbW1vbi11dGlscy5qcyc7XHJcblxyXG4vLyDsu6jrsoTthLAg7L2U7Ja0IOuqqOuTiCDsoJXsnZhcclxuY29uc3QgQ29udmVydGVyQ29yZSA9IHtcclxuICAvLyDsp4Dsm5DtlZjripQg7YyM7J28IO2YleyLnSDrsI8g67OA7ZmYIOqyveuhnCDsoJXsnZhcclxuICBzdXBwb3J0ZWRGb3JtYXRzOiB7XHJcbiAgICAvLyDsnbTrr7jsp4Ag7ZiV7IudXHJcbiAgICAnaW1hZ2UnOiB7XHJcbiAgICAgICdpbnB1dHMnOiBbJ3BuZycsICdqcGcnLCAnanBlZycsICdnaWYnLCAnd2VicCcsICdibXAnLCAnc3ZnJ10sXHJcbiAgICAgICdvdXRwdXRzJzogWydwbmcnLCAnanBnJywgJ2pwZWcnLCAnZ2lmJywgJ3dlYnAnLCAnYm1wJywgJ3N2ZyddLFxyXG4gICAgICAnY29udmVydGlibGVUbyc6IHtcclxuICAgICAgICAncG5nJzogWydqcGcnLCAnanBlZycsICdnaWYnLCAnd2VicCcsICdibXAnXSxcclxuICAgICAgICAnanBnJzogWydwbmcnLCAnZ2lmJywgJ3dlYnAnLCAnYm1wJ10sXHJcbiAgICAgICAgJ2pwZWcnOiBbJ3BuZycsICdnaWYnLCAnd2VicCcsICdibXAnXSxcclxuICAgICAgICAnZ2lmJzogWydwbmcnLCAnanBnJywgJ2pwZWcnLCAnd2VicCcsICdibXAnXSxcclxuICAgICAgICAnd2VicCc6IFsncG5nJywgJ2pwZycsICdqcGVnJywgJ2dpZicsICdibXAnXSxcclxuICAgICAgICAnYm1wJzogWydwbmcnLCAnanBnJywgJ2pwZWcnLCAnZ2lmJywgJ3dlYnAnXSxcclxuICAgICAgICAnc3ZnJzogWydwbmcnLCAnanBnJywgJ2pwZWcnLCAnZ2lmJywgJ3dlYnAnLCAnYm1wJ11cclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIFxyXG4gICAgLy8g66y47IScIO2YleyLnSAtIOygnO2VnOuQnCDrs4DtmZgg6riw64qlICjruIzrnbzsmrDsoIAg6riw67CYKVxyXG4gICAgJ2RvY3VtZW50Jzoge1xyXG4gICAgICAnaW5wdXRzJzogWyd0eHQnLCAnbWQnLCAnY3N2JywgJ2pzb24nLCAneG1sJywgJ2h0bWwnXSxcclxuICAgICAgJ291dHB1dHMnOiBbJ3R4dCcsICdtZCcsICdjc3YnLCAnanNvbicsICd4bWwnLCAnaHRtbCddLFxyXG4gICAgICAnY29udmVydGlibGVUbyc6IHtcclxuICAgICAgICAndHh0JzogWydtZCcsICdodG1sJ10sXHJcbiAgICAgICAgJ21kJzogWyd0eHQnLCAnaHRtbCddLFxyXG4gICAgICAgICdjc3YnOiBbJ2pzb24nLCAndHh0JywgJ2h0bWwnXSxcclxuICAgICAgICAnanNvbic6IFsnY3N2JywgJ3R4dCcsICd4bWwnLCAnaHRtbCddLFxyXG4gICAgICAgICd4bWwnOiBbJ2pzb24nLCAndHh0JywgJ2h0bWwnXSxcclxuICAgICAgICAnaHRtbCc6IFsndHh0JywgJ21kJ11cclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIFxyXG4gICAgLy8g7Jik65SU7JikIO2YleyLnSAtIOygnO2VnOuQnCDrs4DtmZgg6riw64qlICjsm7kg7Jik65SU7JikIEFQSSDquLDrsJgpXHJcbiAgICAnYXVkaW8nOiB7XHJcbiAgICAgICdpbnB1dHMnOiBbJ21wMycsICd3YXYnLCAnb2dnJ10sXHJcbiAgICAgICdvdXRwdXRzJzogWydtcDMnLCAnd2F2JywgJ29nZyddLFxyXG4gICAgICAnY29udmVydGlibGVUbyc6IHtcclxuICAgICAgICAnbXAzJzogWyd3YXYnLCAnb2dnJ10sXHJcbiAgICAgICAgJ3dhdic6IFsnbXAzJywgJ29nZyddLFxyXG4gICAgICAgICdvZ2cnOiBbJ21wMycsICd3YXYnXVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICog7IOI66Gc7Jq0IO2Gte2VqSDrs4DtmZgg7J247YSw7Y6Y7J207IqkIC0g7ZSE66Gg7Yq47JeU65OcIFVJ7JeQ7IScIOyCrOyaqVxyXG4gICAqIEBwYXJhbSB7RmlsZX0gZmlsZSAtIOybkOuzuCDtjIzsnbwg6rCd7LK0XHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IG91dHB1dEZvcm1hdCAtIOuzgO2ZmO2VoCDtmJXsi50gKO2ZleyepeyekClcclxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIOuzgO2ZmCDsmLXshZhcclxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcm9ncmVzc0NhbGxiYWNrIC0g7KeE7ZaJIOyDge2ZqSDsvZzrsLEg7ZWo7IiYXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0Pn0g67OA7ZmYIOqysOqzvCDqsJ3ssrQgKHVybCwgZmlsZW5hbWUsIHNpemUsIG1pbWVUeXBlKVxyXG4gICAqL1xyXG4gIGFzeW5jIGNvbnZlcnQoZmlsZSwgb3V0cHV0Rm9ybWF0LCBvcHRpb25zID0ge30sIHByb2dyZXNzQ2FsbGJhY2sgPSAoKSA9PiB7fSkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgLy8g7KeE7ZaJ7IOB7ZmpIOyXheuNsOydtO2KuCDsi5zsnpFcclxuICAgICAgcHJvZ3Jlc3NDYWxsYmFjayh7IHByb2dyZXNzOiAwIH0pO1xyXG4gICAgICBcclxuICAgICAgLy8g6riw7KG0IGNvbnZlcnRGaWxlIO2VqOyImCDtmLjstpxcclxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5jb252ZXJ0RmlsZShmaWxlLCBvdXRwdXRGb3JtYXQsIG9wdGlvbnMsIChkYXRhKSA9PiB7XHJcbiAgICAgICAgLy8g6riw7KG0IOy9nOuwsSDtj6zrp7fsl5DshJwg7IOIIO2PrOunt+ycvOuhnCDrs4DtmZhcclxuICAgICAgICBpZiAoZGF0YS5zdGFnZSA9PT0gJ3N0YXJ0Jykge1xyXG4gICAgICAgICAgcHJvZ3Jlc3NDYWxsYmFjayh7IHByb2dyZXNzOiAwIH0pO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoZGF0YS5zdGFnZSA9PT0gJ3Byb2Nlc3NpbmcnKSB7XHJcbiAgICAgICAgICBwcm9ncmVzc0NhbGxiYWNrKHsgcHJvZ3Jlc3M6IGRhdGEucHJvZ3Jlc3MgfSk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChkYXRhLnN0YWdlID09PSAnY29tcGxldGUnKSB7XHJcbiAgICAgICAgICBwcm9ncmVzc0NhbGxiYWNrKHsgcHJvZ3Jlc3M6IDEwMCB9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICBcclxuICAgICAgLy8gQmxvYiBVUkwg7IOd7ISxXHJcbiAgICAgIGNvbnN0IHVybCA9IFVSTC5jcmVhdGVPYmplY3RVUkwocmVzdWx0LmJsb2IpO1xyXG4gICAgICBcclxuICAgICAgLy8g6rKw6rO8IOumrO2EtCDtj6zrp7cg67OA6rK9XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgdXJsOiB1cmwsXHJcbiAgICAgICAgZmlsZW5hbWU6IHJlc3VsdC5tZXRhZGF0YS5vdXRwdXRGaWxlTmFtZSxcclxuICAgICAgICBzaXplOiByZXN1bHQuYmxvYi5zaXplLFxyXG4gICAgICAgIG1pbWVUeXBlOiByZXN1bHQuYmxvYi50eXBlXHJcbiAgICAgIH07XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCfrs4DtmZgg7Iuk7YyoOicsIGVycm9yKTtcclxuICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICB9XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICog7YyM7J28IOuzgO2ZmCDsi5zsnpFcclxuICAgKiBAcGFyYW0ge0ZpbGV9IGZpbGUgLSDsm5Drs7gg7YyM7J28IOqwneyytFxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvdXRwdXRGb3JtYXQgLSDrs4DtmZjtlaAg7ZiV7IudICjtmZXsnqXsnpApXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSDrs4DtmZgg7Ji17IWYXHJcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJvZ3Jlc3NDYWxsYmFjayAtIOynhO2WiSDsg4Htmakg7L2c67CxIO2VqOyImFxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD59IOuzgO2ZmCDqsrDqs7wg6rCd7LK0IChCbG9iLCDrqZTtg4DrjbDsnbTthLAg65OxKVxyXG4gICAqL1xyXG4gIGFzeW5jIGNvbnZlcnRGaWxlKGZpbGUsIG91dHB1dEZvcm1hdCwgb3B0aW9ucyA9IHt9LCBwcm9ncmVzc0NhbGxiYWNrID0gKCkgPT4ge30pIHtcclxuICAgIC8vIOuzgO2ZmCDsi5zsnpEg7JWM66a8XHJcbiAgICBpZiAocHJvZ3Jlc3NDYWxsYmFjaykge1xyXG4gICAgICBwcm9ncmVzc0NhbGxiYWNrKHtcclxuICAgICAgICBzdGFnZTogJ3N0YXJ0JyxcclxuICAgICAgICBwcm9ncmVzczogMCxcclxuICAgICAgICBtZXNzYWdlOiAn67OA7ZmYIOykgOu5hCDspJEuLi4nXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICB0cnkge1xyXG4gICAgICAvLyDtjIzsnbwg7Jyg7ZiVIOqygOymnVxyXG4gICAgICBjb25zdCBpbnB1dEZvcm1hdCA9IEZpbGVVdGlscy5nZXRGaWxlRXh0ZW5zaW9uKGZpbGUubmFtZSk7XHJcbiAgICAgIFxyXG4gICAgICBpZiAoIXRoaXMuY2FuQ29udmVydChpbnB1dEZvcm1hdCwgb3V0cHV0Rm9ybWF0KSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihg7KeA7JuQ7ZWY7KeAIOyViuuKlCDrs4DtmZgg6rK966GcOiAke2lucHV0Rm9ybWF0fSDihpIgJHtvdXRwdXRGb3JtYXR9YCk7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIC8vIO2MjOydvCDrqZTtg4DrjbDsnbTthLAg7LaU7LacXHJcbiAgICAgIGNvbnN0IG1ldGFkYXRhID0ge1xyXG4gICAgICAgIG5hbWU6IGZpbGUubmFtZSxcclxuICAgICAgICB0eXBlOiBmaWxlLnR5cGUsXHJcbiAgICAgICAgc2l6ZTogZmlsZS5zaXplLFxyXG4gICAgICAgIGxhc3RNb2RpZmllZDogZmlsZS5sYXN0TW9kaWZpZWQsXHJcbiAgICAgICAgaW5wdXRGb3JtYXQsXHJcbiAgICAgICAgb3V0cHV0Rm9ybWF0XHJcbiAgICAgIH07XHJcbiAgICAgIFxyXG4gICAgICAvLyDrs4DtmZgg7LKY66asXHJcbiAgICAgIHByb2dyZXNzQ2FsbGJhY2soe1xyXG4gICAgICAgIHN0YWdlOiAncHJvY2Vzc2luZycsXHJcbiAgICAgICAgcHJvZ3Jlc3M6IDMwLFxyXG4gICAgICAgIG1lc3NhZ2U6ICftjIzsnbwg7LKY66asIOykkS4uLidcclxuICAgICAgfSk7XHJcbiAgICAgIFxyXG4gICAgICAvLyDtjIzsnbwg642w7J207YSwIOydveq4sFxyXG4gICAgICBjb25zdCBkYXRhVXJpID0gYXdhaXQgRmlsZVV0aWxzLmZpbGVUb0RhdGFVcmkoZmlsZSk7XHJcbiAgICAgIFxyXG4gICAgICAvLyDrs4DtmZgg7Jyg7ZiV7JeQIOuUsOuluCDsoIHsoIjtlZwg67OA7ZmYIOuwqeuylSDtmLjstpxcclxuICAgICAgbGV0IHJlc3VsdDtcclxuICAgICAgXHJcbiAgICAgIGlmICh0aGlzLmlzSW1hZ2VDb252ZXJzaW9uKGlucHV0Rm9ybWF0LCBvdXRwdXRGb3JtYXQpKSB7XHJcbiAgICAgICAgcmVzdWx0ID0gYXdhaXQgdGhpcy5jb252ZXJ0SW1hZ2UoZGF0YVVyaSwgb3V0cHV0Rm9ybWF0LCBvcHRpb25zLCBwcm9ncmVzc0NhbGxiYWNrKTtcclxuICAgICAgfSBlbHNlIGlmICh0aGlzLmlzRG9jdW1lbnRDb252ZXJzaW9uKGlucHV0Rm9ybWF0LCBvdXRwdXRGb3JtYXQpKSB7XHJcbiAgICAgICAgcmVzdWx0ID0gYXdhaXQgdGhpcy5jb252ZXJ0RG9jdW1lbnQoZGF0YVVyaSwgaW5wdXRGb3JtYXQsIG91dHB1dEZvcm1hdCwgb3B0aW9ucywgcHJvZ3Jlc3NDYWxsYmFjayk7XHJcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5pc0F1ZGlvQ29udmVyc2lvbihpbnB1dEZvcm1hdCwgb3V0cHV0Rm9ybWF0KSkge1xyXG4gICAgICAgIHJlc3VsdCA9IGF3YWl0IHRoaXMuY29udmVydEF1ZGlvKGRhdGFVcmksIG91dHB1dEZvcm1hdCwgb3B0aW9ucywgcHJvZ3Jlc3NDYWxsYmFjayk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCfsp4Dsm5DtlZjsp4Ag7JWK64qUIOuzgO2ZmCDsnKDtmJUnKTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgLy8g6rKw6rO8IOygleuztCDrsJjtmZhcclxuICAgICAgY29uc3Qgb3V0cHV0RmlsZU5hbWUgPSBGaWxlVXRpbHMuZ2V0T3V0cHV0RmlsZU5hbWUoZmlsZS5uYW1lLCBvdXRwdXRGb3JtYXQpO1xyXG4gICAgICBcclxuICAgICAgcHJvZ3Jlc3NDYWxsYmFjayh7XHJcbiAgICAgICAgc3RhZ2U6ICdjb21wbGV0ZScsXHJcbiAgICAgICAgcHJvZ3Jlc3M6IDEwMCxcclxuICAgICAgICBtZXNzYWdlOiAn67OA7ZmYIOyZhOujjCEnXHJcbiAgICAgIH0pO1xyXG4gICAgICBcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBibG9iOiByZXN1bHQsXHJcbiAgICAgICAgbWV0YWRhdGE6IHtcclxuICAgICAgICAgIC4uLm1ldGFkYXRhLFxyXG4gICAgICAgICAgb3V0cHV0RmlsZU5hbWVcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcbiAgICAgIFxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcign7YyM7J28IOuzgO2ZmCDsi6TtjKg6JywgZXJyb3IpO1xyXG4gICAgICBcclxuICAgICAgcHJvZ3Jlc3NDYWxsYmFjayh7XHJcbiAgICAgICAgc3RhZ2U6ICdlcnJvcicsXHJcbiAgICAgICAgcHJvZ3Jlc3M6IDAsXHJcbiAgICAgICAgbWVzc2FnZTogYOuzgO2ZmCDsi6TtjKg6ICR7ZXJyb3IubWVzc2FnZX1gXHJcbiAgICAgIH0pO1xyXG4gICAgICBcclxuICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICB9XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICog67OA7ZmYIOqwgOuKpSDsl6zrtoAg7ZmV7J24XHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlucHV0Rm9ybWF0IC0g7J6F66ClIO2MjOydvCDtmJXsi51cclxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3V0cHV0Rm9ybWF0IC0g7Lac66ClIO2MjOydvCDtmJXsi51cclxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0g67OA7ZmYIOqwgOuKpSDsl6zrtoBcclxuICAgKi9cclxuICBjYW5Db252ZXJ0KGlucHV0Rm9ybWF0LCBvdXRwdXRGb3JtYXQpIHtcclxuICAgIC8vIOuPmeydvCDtmJXsi53snYAg7ZWt7IOBIOqwgOuKpVxyXG4gICAgaWYgKGlucHV0Rm9ybWF0ID09PSBvdXRwdXRGb3JtYXQpIHJldHVybiB0cnVlO1xyXG4gICAgXHJcbiAgICAvLyDsp4Dsm5DtlZjripQg7ZiV7IudIO2ZleyduFxyXG4gICAgY29uc3QgY2F0ZWdvcmllcyA9IE9iamVjdC5rZXlzKHRoaXMuc3VwcG9ydGVkRm9ybWF0cyk7XHJcbiAgICBcclxuICAgIGZvciAoY29uc3QgY2F0ZWdvcnkgb2YgY2F0ZWdvcmllcykge1xyXG4gICAgICBjb25zdCBmb3JtYXRJbmZvID0gdGhpcy5zdXBwb3J0ZWRGb3JtYXRzW2NhdGVnb3J5XTtcclxuICAgICAgXHJcbiAgICAgIC8vIOyeheugpSDtmJXsi53snbQg7KeA7JuQ65CY64qU7KeAIO2ZleyduFxyXG4gICAgICBpZiAoZm9ybWF0SW5mby5pbnB1dHMuaW5jbHVkZXMoaW5wdXRGb3JtYXQpKSB7XHJcbiAgICAgICAgLy8g7J20IOyeheugpSDtmJXsi53sl5DshJwg7Lac66ClIO2YleyLneycvOuhnCDrs4DtmZgg6rCA64ql7ZWc7KeAIO2ZleyduFxyXG4gICAgICAgIGlmIChmb3JtYXRJbmZvLmNvbnZlcnRpYmxlVG9baW5wdXRGb3JtYXRdICYmIFxyXG4gICAgICAgICAgICBmb3JtYXRJbmZvLmNvbnZlcnRpYmxlVG9baW5wdXRGb3JtYXRdLmluY2x1ZGVzKG91dHB1dEZvcm1hdCkpIHtcclxuICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICog7KO87Ja07KeEIO2YleyLneydtCDsnbTrr7jsp4Ag67OA7ZmY7J247KeAIO2ZleyduFxyXG4gICAqL1xyXG4gIGlzSW1hZ2VDb252ZXJzaW9uKGlucHV0Rm9ybWF0LCBvdXRwdXRGb3JtYXQpIHtcclxuICAgIGNvbnN0IHsgaW1hZ2UgfSA9IHRoaXMuc3VwcG9ydGVkRm9ybWF0cztcclxuICAgIHJldHVybiBpbWFnZS5pbnB1dHMuaW5jbHVkZXMoaW5wdXRGb3JtYXQpICYmIGltYWdlLm91dHB1dHMuaW5jbHVkZXMob3V0cHV0Rm9ybWF0KTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiDso7zslrTsp4Qg7ZiV7Iud7J20IOusuOyEnCDrs4DtmZjsnbjsp4Ag7ZmV7J24XHJcbiAgICovXHJcbiAgaXNEb2N1bWVudENvbnZlcnNpb24oaW5wdXRGb3JtYXQsIG91dHB1dEZvcm1hdCkge1xyXG4gICAgY29uc3QgeyBkb2N1bWVudCB9ID0gdGhpcy5zdXBwb3J0ZWRGb3JtYXRzO1xyXG4gICAgcmV0dXJuIGRvY3VtZW50LmlucHV0cy5pbmNsdWRlcyhpbnB1dEZvcm1hdCkgJiYgZG9jdW1lbnQub3V0cHV0cy5pbmNsdWRlcyhvdXRwdXRGb3JtYXQpO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIOyjvOyWtOynhCDtmJXsi53snbQg7Jik65SU7JikIOuzgO2ZmOyduOyngCDtmZXsnbhcclxuICAgKi9cclxuICBpc0F1ZGlvQ29udmVyc2lvbihpbnB1dEZvcm1hdCwgb3V0cHV0Rm9ybWF0KSB7XHJcbiAgICBjb25zdCB7IGF1ZGlvIH0gPSB0aGlzLnN1cHBvcnRlZEZvcm1hdHM7XHJcbiAgICByZXR1cm4gYXVkaW8uaW5wdXRzLmluY2x1ZGVzKGlucHV0Rm9ybWF0KSAmJiBhdWRpby5vdXRwdXRzLmluY2x1ZGVzKG91dHB1dEZvcm1hdCk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICog7J2066+47KeAIOuzgO2ZmCDqtaztmIRcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gZGF0YVVyaSAtIOybkOuzuCDsnbTrr7jsp4Ag642w7J207YSwIFVSSVxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvdXRwdXRGb3JtYXQgLSDstpzroKUg7J2066+47KeAIO2YleyLnVxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0g67OA7ZmYIOyYteyFmCAo7ZKI7KeILCDtgazquLAg65OxKVxyXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHByb2dyZXNzQ2FsbGJhY2sgLSDsp4Ttlokg7IOB7ZmpIOy9nOuwsVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPEJsb2I+fSDrs4DtmZjrkJwg7J2066+47KeAIEJsb2JcclxuICAgKi9cclxuICBjb252ZXJ0SW1hZ2UoZGF0YVVyaSwgb3V0cHV0Rm9ybWF0LCBvcHRpb25zID0ge30sIHByb2dyZXNzQ2FsbGJhY2sgPSAoKSA9PiB7fSkge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBpbWcgPSBuZXcgSW1hZ2UoKTtcclxuICAgICAgICBcclxuICAgICAgICBpbWcub25sb2FkID0gKCkgPT4ge1xyXG4gICAgICAgICAgcHJvZ3Jlc3NDYWxsYmFjayh7XHJcbiAgICAgICAgICAgIHN0YWdlOiAncHJvY2Vzc2luZycsXHJcbiAgICAgICAgICAgIHByb2dyZXNzOiA1MCxcclxuICAgICAgICAgICAgbWVzc2FnZTogJ+ydtOuvuOyngCDrs4DtmZgg7KSRLi4uJ1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xyXG4gICAgICAgICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIC8vIOydtOuvuOyngCDtgazquLAg7KGw7KCVICjsmLXshZjsl5Ag65Sw6528KVxyXG4gICAgICAgICAgbGV0IHdpZHRoID0gaW1nLndpZHRoO1xyXG4gICAgICAgICAgbGV0IGhlaWdodCA9IGltZy5oZWlnaHQ7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIGlmIChvcHRpb25zLndpZHRoICYmIG9wdGlvbnMuaGVpZ2h0KSB7XHJcbiAgICAgICAgICAgIHdpZHRoID0gb3B0aW9ucy53aWR0aDtcclxuICAgICAgICAgICAgaGVpZ2h0ID0gb3B0aW9ucy5oZWlnaHQ7XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMud2lkdGgpIHtcclxuICAgICAgICAgICAgY29uc3QgcmF0aW8gPSBvcHRpb25zLndpZHRoIC8gaW1nLndpZHRoO1xyXG4gICAgICAgICAgICB3aWR0aCA9IG9wdGlvbnMud2lkdGg7XHJcbiAgICAgICAgICAgIGhlaWdodCA9IGltZy5oZWlnaHQgKiByYXRpbztcclxuICAgICAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy5oZWlnaHQpIHtcclxuICAgICAgICAgICAgY29uc3QgcmF0aW8gPSBvcHRpb25zLmhlaWdodCAvIGltZy5oZWlnaHQ7XHJcbiAgICAgICAgICAgIGhlaWdodCA9IG9wdGlvbnMuaGVpZ2h0O1xyXG4gICAgICAgICAgICB3aWR0aCA9IGltZy53aWR0aCAqIHJhdGlvO1xyXG4gICAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLm1heFdpZHRoICYmIGltZy53aWR0aCA+IG9wdGlvbnMubWF4V2lkdGgpIHtcclxuICAgICAgICAgICAgY29uc3QgcmF0aW8gPSBvcHRpb25zLm1heFdpZHRoIC8gaW1nLndpZHRoO1xyXG4gICAgICAgICAgICB3aWR0aCA9IG9wdGlvbnMubWF4V2lkdGg7XHJcbiAgICAgICAgICAgIGhlaWdodCA9IGltZy5oZWlnaHQgKiByYXRpbztcclxuICAgICAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy5tYXhIZWlnaHQgJiYgaW1nLmhlaWdodCA+IG9wdGlvbnMubWF4SGVpZ2h0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJhdGlvID0gb3B0aW9ucy5tYXhIZWlnaHQgLyBpbWcuaGVpZ2h0O1xyXG4gICAgICAgICAgICBoZWlnaHQgPSBvcHRpb25zLm1heEhlaWdodDtcclxuICAgICAgICAgICAgd2lkdGggPSBpbWcud2lkdGggKiByYXRpbztcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIFxyXG4gICAgICAgICAgY2FudmFzLndpZHRoID0gd2lkdGg7XHJcbiAgICAgICAgICBjYW52YXMuaGVpZ2h0ID0gaGVpZ2h0O1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICAvLyDrsLDqsr3sg4kg7ISk7KCVICjtlYTsmpTtlZwg6rK97JqwKVxyXG4gICAgICAgICAgaWYgKG9wdGlvbnMuYmFja2dyb3VuZENvbG9yKSB7XHJcbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBvcHRpb25zLmJhY2tncm91bmRDb2xvcjtcclxuICAgICAgICAgICAgY3R4LmZpbGxSZWN0KDAsIDAsIHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICAvLyDsnbTrr7jsp4Ag6re466as6riwXHJcbiAgICAgICAgICBjdHguZHJhd0ltYWdlKGltZywgMCwgMCwgd2lkdGgsIGhlaWdodCk7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIHByb2dyZXNzQ2FsbGJhY2soe1xyXG4gICAgICAgICAgICBzdGFnZTogJ3Byb2Nlc3NpbmcnLFxyXG4gICAgICAgICAgICBwcm9ncmVzczogODAsXHJcbiAgICAgICAgICAgIG1lc3NhZ2U6ICfsnbTrr7jsp4Ag7J247L2U65SpIOykkS4uLidcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICAvLyDstpzroKUg7ZiV7Iud7JeQIOuUsOudvCDsoIHsoIjtlZwgTUlNRSDtg4DsnoUg7ISk7KCVXHJcbiAgICAgICAgICBjb25zdCBtaW1lVHlwZSA9IEZpbGVVdGlscy5nZXRNaW1lVHlwZShvdXRwdXRGb3JtYXQpO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICAvLyDtkojsp4gg7ISk7KCVIChKUEVHLCBXRUJQIOuTseyXkCDsoIHsmqkpXHJcbiAgICAgICAgICBjb25zdCBxdWFsaXR5ID0gb3B0aW9ucy5xdWFsaXR5ID8gb3B0aW9ucy5xdWFsaXR5IC8gMTAwIDogMC45MjtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgLy8g7LqU67KE7Iqk66W8IEJsb2LsnLzroZwg67OA7ZmYXHJcbiAgICAgICAgICBjYW52YXMudG9CbG9iKChibG9iKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChibG9iKSB7XHJcbiAgICAgICAgICAgICAgcHJvZ3Jlc3NDYWxsYmFjayh7XHJcbiAgICAgICAgICAgICAgICBzdGFnZTogJ2ZpbmFsaXppbmcnLFxyXG4gICAgICAgICAgICAgICAgcHJvZ3Jlc3M6IDkwLFxyXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ+uzgO2ZmCDsmYTro4wg7KSRLi4uJ1xyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgIHJlc29sdmUoYmxvYik7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcign7J2066+47KeAIOuzgO2ZmCDsi6TtjKgnKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0sIG1pbWVUeXBlLCBxdWFsaXR5KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFxyXG4gICAgICAgIGltZy5vbmVycm9yID0gKCkgPT4ge1xyXG4gICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcign7J2066+47KeAIOuhnOuTnCDsi6TtjKgnKSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBcclxuICAgICAgICBpbWcuc3JjID0gZGF0YVVyaTtcclxuICAgICAgICBcclxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiDrrLjshJwg67OA7ZmYIOq1rO2YhFxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkYXRhVXJpIC0g7JuQ67O4IOusuOyEnCDrjbDsnbTthLAgVVJJXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlucHV0Rm9ybWF0IC0g7J6F66ClIOusuOyEnCDtmJXsi51cclxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3V0cHV0Rm9ybWF0IC0g7Lac66ClIOusuOyEnCDtmJXsi51cclxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIOuzgO2ZmCDsmLXshZhcclxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcm9ncmVzc0NhbGxiYWNrIC0g7KeE7ZaJIOyDge2ZqSDsvZzrsLFcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxCbG9iPn0g67OA7ZmY65CcIOusuOyEnCBCbG9iXHJcbiAgICovXHJcbiAgY29udmVydERvY3VtZW50KGRhdGFVcmksIGlucHV0Rm9ybWF0LCBvdXRwdXRGb3JtYXQsIG9wdGlvbnMgPSB7fSwgcHJvZ3Jlc3NDYWxsYmFjayA9ICgpID0+IHt9KSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIHByb2dyZXNzQ2FsbGJhY2soe1xyXG4gICAgICAgICAgc3RhZ2U6ICdwcm9jZXNzaW5nJyxcclxuICAgICAgICAgIHByb2dyZXNzOiA0MCxcclxuICAgICAgICAgIG1lc3NhZ2U6ICfrrLjshJwg67OA7ZmYIOykkS4uLidcclxuICAgICAgICB9KTtcclxuICAgICAgICBcclxuICAgICAgICAvLyDrjbDsnbTthLAgVVJJ7JeQ7IScIOyLpOygnCDsvZjthZDsuKAg7LaU7LacXHJcbiAgICAgICAgY29uc3QgYmFzZTY0Q29udGVudCA9IGRhdGFVcmkuc3BsaXQoJywnKVsxXTtcclxuICAgICAgICBjb25zdCB0ZXh0Q29udGVudCA9IGF0b2IoYmFzZTY0Q29udGVudCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgbGV0IHJlc3VsdCA9ICcnO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIO2YleyLneuzhCDrs4DtmZgg66Gc7KeBXHJcbiAgICAgICAgaWYgKGlucHV0Rm9ybWF0ID09PSAnY3N2JyAmJiBvdXRwdXRGb3JtYXQgPT09ICdqc29uJykge1xyXG4gICAgICAgICAgLy8gQ1NWIOKGkiBKU09OIOuzgO2ZmFxyXG4gICAgICAgICAgcmVzdWx0ID0gdGhpcy5jc3ZUb0pzb24odGV4dENvbnRlbnQsIG9wdGlvbnMpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoaW5wdXRGb3JtYXQgPT09ICdqc29uJyAmJiBvdXRwdXRGb3JtYXQgPT09ICdjc3YnKSB7XHJcbiAgICAgICAgICAvLyBKU09OIOKGkiBDU1Yg67OA7ZmYXHJcbiAgICAgICAgICByZXN1bHQgPSB0aGlzLmpzb25Ub0Nzdih0ZXh0Q29udGVudCwgb3B0aW9ucyk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChpbnB1dEZvcm1hdCA9PT0gJ21kJyAmJiBvdXRwdXRGb3JtYXQgPT09ICdodG1sJykge1xyXG4gICAgICAgICAgLy8gTWFya2Rvd24g4oaSIEhUTUwg67OA7ZmYICjqsITri6jtlZwg6rec7LmZ66eMIOyggeyaqSlcclxuICAgICAgICAgIHJlc3VsdCA9IHRoaXMubWFya2Rvd25Ub0h0bWwodGV4dENvbnRlbnQpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoaW5wdXRGb3JtYXQgPT09ICdqc29uJyAmJiBvdXRwdXRGb3JtYXQgPT09ICd4bWwnKSB7XHJcbiAgICAgICAgICAvLyBKU09OIOKGkiBYTUwg67OA7ZmYXHJcbiAgICAgICAgICByZXN1bHQgPSB0aGlzLmpzb25Ub1htbCh0ZXh0Q29udGVudCk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChpbnB1dEZvcm1hdCA9PT0gJ3htbCcgJiYgb3V0cHV0Rm9ybWF0ID09PSAnanNvbicpIHtcclxuICAgICAgICAgIC8vIFhNTCDihpIgSlNPTiDrs4DtmZggKOqwhOuLqO2VnCDqtaztmIQpXHJcbiAgICAgICAgICByZXN1bHQgPSB0aGlzLnhtbFRvSnNvbih0ZXh0Q29udGVudCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIC8vIOq4sO2DgCDthY3siqTtirgg67OA7ZmYICjri6jsiJwg7Y+s66e3IOuzgOqyvSlcclxuICAgICAgICAgIHJlc3VsdCA9IHRleHRDb250ZW50O1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBwcm9ncmVzc0NhbGxiYWNrKHtcclxuICAgICAgICAgIHN0YWdlOiAnZmluYWxpemluZycsXHJcbiAgICAgICAgICBwcm9ncmVzczogOTAsXHJcbiAgICAgICAgICBtZXNzYWdlOiAn66y47IScIOuzgO2ZmCDsmYTro4wg7KSRLi4uJ1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIOqysOqzvCBCbG9iIOyDneyEsVxyXG4gICAgICAgIGNvbnN0IG91dHB1dE1pbWVUeXBlID0gRmlsZVV0aWxzLmdldE1pbWVUeXBlKG91dHB1dEZvcm1hdCk7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0QmxvYiA9IG5ldyBCbG9iKFtyZXN1bHRdLCB7IHR5cGU6IG91dHB1dE1pbWVUeXBlIH0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHJlc29sdmUocmVzdWx0QmxvYik7XHJcbiAgICAgICAgXHJcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICog7Jik65SU7JikIOuzgO2ZmCDqtaztmIQgKOqwhOuLqO2VnCDsmIjsi5wpXHJcbiAgICog7LC46rOgOiDsmYTsoITtlZwg7Jik65SU7JikIOuzgO2ZmOydgCDsm7kg7Jik65SU7JikIEFQSeydmCDsoJztlZzsnLzroZwg7J247ZW0IOygnOyVveydtCDsnojsirXri4jri6QuXHJcbiAgICovXHJcbiAgY29udmVydEF1ZGlvKGRhdGFVcmksIG91dHB1dEZvcm1hdCwgb3B0aW9ucyA9IHt9LCBwcm9ncmVzc0NhbGxiYWNrID0gKCkgPT4ge30pIHtcclxuICAgIC8vIOyLpOygnCDtmZjqsr3sl5DshJzripQg7Ju5IOyYpOuUlOyYpCBBUEnrpbwg7IKs7Jqp7ZWY7JesIOq1rO2YhO2VtOyVvCDtlanri4jri6QuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICBwcm9ncmVzc0NhbGxiYWNrKHtcclxuICAgICAgICBzdGFnZTogJ3Byb2Nlc3NpbmcnLFxyXG4gICAgICAgIHByb2dyZXNzOiA1MCxcclxuICAgICAgICBtZXNzYWdlOiAn7Jik65SU7JikIOuzgO2ZmCDspJEuLi4gKOuNsOuqqCknXHJcbiAgICAgIH0pO1xyXG4gICAgICBcclxuICAgICAgLy8g642w66qoIOuqqeyggeycvOuhnCDqsITri6jtnogg6rWs7ZiEXHJcbiAgICAgIC8vIOyLpOygnCDqtaztmITsnYAgQXVkaW8gQVBJ7JmAIEF1ZGlvQ29udGV4dOulvCDsgqzsmqntlbTslbwg7ZWoXHJcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIHByb2dyZXNzQ2FsbGJhY2soe1xyXG4gICAgICAgICAgc3RhZ2U6ICdmaW5hbGl6aW5nJyxcclxuICAgICAgICAgIHByb2dyZXNzOiA5MCxcclxuICAgICAgICAgIG1lc3NhZ2U6ICfsmKTrlJTsmKQg7J247L2U65SpIOykkS4uLidcclxuICAgICAgICB9KTtcclxuICAgICAgICBcclxuICAgICAgICAvLyDsm5Drs7gg642w7J207YSw66W8IOq3uOuMgOuhnCDrsJjtmZggKOyLpOygnOuhnOuKlCDrs4DtmZgg66Gc7KeBIO2VhOyalClcclxuICAgICAgICBmZXRjaChkYXRhVXJpKVxyXG4gICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuYmxvYigpKVxyXG4gICAgICAgICAgLnRoZW4oYmxvYiA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IG91dHB1dE1pbWVUeXBlID0gRmlsZVV0aWxzLmdldE1pbWVUeXBlKG91dHB1dEZvcm1hdCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdEJsb2IgPSBuZXcgQmxvYihbYmxvYl0sIHsgdHlwZTogb3V0cHV0TWltZVR5cGUgfSk7XHJcbiAgICAgICAgICAgIHJlc29sdmUocmVzdWx0QmxvYik7XHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICAgLmNhdGNoKHJlamVjdCk7XHJcbiAgICAgICAgICBcclxuICAgICAgfSwgMTAwMCk7XHJcbiAgICB9KTtcclxuICB9LFxyXG5cclxuICAvLyDrrLjshJwg67OA7ZmYIOycoO2LuOumrO2LsCDtlajsiJjrk6RcclxuXHJcbiAgLyoqXHJcbiAgICogQ1NW66W8IEpTT07snLzroZwg67OA7ZmYXHJcbiAgICovXHJcbiAgY3N2VG9Kc29uKGNzdlRleHQsIG9wdGlvbnMgPSB7fSkge1xyXG4gICAgY29uc3QgbGluZXMgPSBjc3ZUZXh0LnNwbGl0KC9cXHI/XFxuLyk7XHJcbiAgICBpZiAobGluZXMubGVuZ3RoID09PSAwKSByZXR1cm4gJ1tdJztcclxuICAgIFxyXG4gICAgY29uc3QgaGVhZGVycyA9IGxpbmVzWzBdLnNwbGl0KCcsJykubWFwKGhlYWRlciA9PiBoZWFkZXIudHJpbSgpKTtcclxuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xyXG4gICAgXHJcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGlmICghbGluZXNbaV0udHJpbSgpKSBjb250aW51ZTtcclxuICAgICAgXHJcbiAgICAgIGNvbnN0IHZhbHVlcyA9IGxpbmVzW2ldLnNwbGl0KCcsJyk7XHJcbiAgICAgIGNvbnN0IG9iaiA9IHt9O1xyXG4gICAgICBcclxuICAgICAgaGVhZGVycy5mb3JFYWNoKChoZWFkZXIsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgb2JqW2hlYWRlcl0gPSB2YWx1ZXNbaW5kZXhdID8gdmFsdWVzW2luZGV4XS50cmltKCkgOiAnJztcclxuICAgICAgfSk7XHJcbiAgICAgIFxyXG4gICAgICByZXN1bHQucHVzaChvYmopO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkocmVzdWx0LCBudWxsLCAyKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBKU09O7J2EIENTVuuhnCDrs4DtmZhcclxuICAgKi9cclxuICBqc29uVG9Dc3YoanNvblRleHQsIG9wdGlvbnMgPSB7fSkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2UoanNvblRleHQpO1xyXG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZGF0YSkgfHwgZGF0YS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGNvbnN0IGhlYWRlcnMgPSBPYmplY3Qua2V5cyhkYXRhWzBdKTtcclxuICAgICAgY29uc3QgaGVhZGVyUm93ID0gaGVhZGVycy5qb2luKCcsJyk7XHJcbiAgICAgIFxyXG4gICAgICBjb25zdCByb3dzID0gZGF0YS5tYXAob2JqID0+IHtcclxuICAgICAgICByZXR1cm4gaGVhZGVycy5tYXAoaGVhZGVyID0+IHtcclxuICAgICAgICAgIGNvbnN0IHZhbHVlID0gb2JqW2hlYWRlcl07XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIC8vIOyJvO2RnCwg65Sw7Ji07ZGcIOuTseydtCDtj6ztlajrkJwg6rK97JqwIOuUsOyYtO2RnOuhnCDqsJDsi7jquLBcclxuICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmICh2YWx1ZS5pbmNsdWRlcygnLCcpIHx8IHZhbHVlLmluY2x1ZGVzKCdcIicpKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gYFwiJHt2YWx1ZS5yZXBsYWNlKC9cIi9nLCAnXCJcIicpfVwiYDtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIFxyXG4gICAgICAgICAgcmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6ICcnO1xyXG4gICAgICAgIH0pLmpvaW4oJywnKTtcclxuICAgICAgfSk7XHJcbiAgICAgIFxyXG4gICAgICByZXR1cm4gW2hlYWRlclJvdywgLi4ucm93c10uam9pbignXFxuJyk7XHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcign7Jyg7Zqo7ZWY7KeAIOyViuydgCBKU09OIO2YleyLnScpO1xyXG4gICAgfVxyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIOuniO2BrOuLpOyatOydhCBIVE1M66GcIOuzgO2ZmCAo6rCE64uo7ZWcIOq3nOy5meunjCDsoIHsmqkpXHJcbiAgICovXHJcbiAgbWFya2Rvd25Ub0h0bWwobWFya2Rvd24pIHtcclxuICAgIGxldCBodG1sID0gbWFya2Rvd25cclxuICAgICAgLy8g7Zek642UIOuzgO2ZmFxyXG4gICAgICAucmVwbGFjZSgvXiMgKC4qPykkL2dtLCAnPGgxPiQxPC9oMT4nKVxyXG4gICAgICAucmVwbGFjZSgvXiMjICguKj8pJC9nbSwgJzxoMj4kMTwvaDI+JylcclxuICAgICAgLnJlcGxhY2UoL14jIyMgKC4qPykkL2dtLCAnPGgzPiQxPC9oMz4nKVxyXG4gICAgICAvLyDqtbXsnYAg7YWN7Iqk7Yq4XHJcbiAgICAgIC5yZXBsYWNlKC9cXCpcXCooLio/KVxcKlxcKi9nLCAnPHN0cm9uZz4kMTwvc3Ryb25nPicpXHJcbiAgICAgIC8vIOydtO2DpOumreyytFxyXG4gICAgICAucmVwbGFjZSgvXFwqKC4qPylcXCovZywgJzxlbT4kMTwvZW0+JylcclxuICAgICAgLy8g66eB7YGsXHJcbiAgICAgIC5yZXBsYWNlKC9cXFsoLio/KVxcXVxcKCguKj8pXFwpL2csICc8YSBocmVmPVwiJDJcIj4kMTwvYT4nKVxyXG4gICAgICAvLyDsiJzshJwg7JeG64qUIOuqqeuhnVxyXG4gICAgICAucmVwbGFjZSgvXlxcLSAoLio/KSQvZ20sICc8bGk+JDE8L2xpPicpXHJcbiAgICAgIC8vIOy9lOuTnCDruJTroZ1cclxuICAgICAgLnJlcGxhY2UoL2AoLio/KWAvZywgJzxjb2RlPiQxPC9jb2RlPicpXHJcbiAgICAgIC8vIOusuOuLqFxyXG4gICAgICAucmVwbGFjZSgvKC4rPykoXFxuXFxufCQpL2csICc8cD4kMTwvcD4nKTtcclxuICAgIFxyXG4gICAgLy8g7Iic7IScIOyXhuuKlCDrqqnroZ0g7ZWt66qp7J2EIHVs66GcIOqwkOyLuOq4sFxyXG4gICAgaHRtbCA9IGh0bWwucmVwbGFjZSgvPGxpPi4qPzxcXC9saT4oXFxuPGxpPi4qPzxcXC9saT4pKi9nLCBmdW5jdGlvbihtYXRjaCkge1xyXG4gICAgICByZXR1cm4gJzx1bD4nICsgbWF0Y2ggKyAnPC91bD4nO1xyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIHJldHVybiBodG1sO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIEpTT07snYQgWE1M66GcIOuzgO2ZmCAo6rCE64uo7ZWcIOq1rO2YhClcclxuICAgKi9cclxuICBqc29uVG9YbWwoanNvblRleHQpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKGpzb25UZXh0KTtcclxuICAgICAgXHJcbiAgICAgIGNvbnN0IHRvWG1sID0gKG9iaiwgcm9vdE5hbWUgPSAncm9vdCcpID0+IHtcclxuICAgICAgICBsZXQgeG1sID0gYDwke3Jvb3ROYW1lfT5gO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIG9iaikge1xyXG4gICAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gb2JqW2tleV07XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgICB4bWwgKz0gYDwke2tleX0+YDtcclxuICAgICAgICAgICAgICB2YWx1ZS5mb3JFYWNoKGl0ZW0gPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBpdGVtID09PSAnb2JqZWN0JyAmJiBpdGVtICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgIHhtbCArPSB0b1htbChpdGVtLCAnaXRlbScpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgeG1sICs9IGA8aXRlbT4ke2l0ZW19PC9pdGVtPmA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgeG1sICs9IGA8LyR7a2V5fT5gO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICB4bWwgKz0gdG9YbWwodmFsdWUsIGtleSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgeG1sICs9IGA8JHtrZXl9PiR7dmFsdWV9PC8ke2tleX0+YDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICB4bWwgKz0gYDwvJHtyb290TmFtZX0+YDtcclxuICAgICAgICByZXR1cm4geG1sO1xyXG4gICAgICB9O1xyXG4gICAgICBcclxuICAgICAgcmV0dXJuICc8P3htbCB2ZXJzaW9uPVwiMS4wXCIgZW5jb2Rpbmc9XCJVVEYtOFwiPz5cXG4nICsgdG9YbWwoZGF0YSk7XHJcbiAgICAgIFxyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ+ycoO2aqO2VmOyngCDslYrsnYAgSlNPTiDtmJXsi50nKTtcclxuICAgIH1cclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBYTUzsnYQgSlNPTuycvOuhnCDrs4DtmZggKOqwhOuLqO2VnCDqtaztmIQpXHJcbiAgICog7LC46rOgOiDsmYTsoITtlZwgWE1MIO2MjOyLseydgCBET01QYXJzZXLrpbwg7IKs7Jqp7ZWY64qUIOqyg+ydtCDsoovsirXri4jri6QuXHJcbiAgICovXHJcbiAgeG1sVG9Kc29uKHhtbFRleHQpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHBhcnNlciA9IG5ldyBET01QYXJzZXIoKTtcclxuICAgICAgY29uc3QgeG1sRG9jID0gcGFyc2VyLnBhcnNlRnJvbVN0cmluZyh4bWxUZXh0LCAndGV4dC94bWwnKTtcclxuICAgICAgXHJcbiAgICAgIGNvbnN0IHBhcnNlTm9kZSA9IChub2RlKSA9PiB7XHJcbiAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IE5vZGUuVEVYVF9OT0RFKSB7XHJcbiAgICAgICAgICBjb25zdCB0ZXh0ID0gbm9kZS5ub2RlVmFsdWUudHJpbSgpO1xyXG4gICAgICAgICAgcmV0dXJuIHRleHQubGVuZ3RoID4gMCA/IHRleHQgOiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUpIHtcclxuICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xyXG4gICAgICAgICAgY29uc3QgY2hpbGRFbGVtZW50cyA9IEFycmF5LmZyb20obm9kZS5jaGlsZHJlbik7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIGlmIChjaGlsZEVsZW1lbnRzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbm9kZS50ZXh0Q29udGVudC50cmltKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIC8vIOuPmeydvO2VnCDsnbTrpoTsnZgg7J6Q7IudIOyalOyGjOqwgCDsl6zrn6wg6rCc7J247KeAIO2ZleyduFxyXG4gICAgICAgICAgY29uc3QgY2hpbGROYW1lcyA9IGNoaWxkRWxlbWVudHMubWFwKGNoaWxkID0+IGNoaWxkLm5vZGVOYW1lKTtcclxuICAgICAgICAgIGNvbnN0IHVuaXF1ZU5hbWVzID0gWy4uLm5ldyBTZXQoY2hpbGROYW1lcyldO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICBmb3IgKGNvbnN0IG5hbWUgb2YgdW5pcXVlTmFtZXMpIHtcclxuICAgICAgICAgICAgY29uc3QgZWxlbWVudHMgPSBjaGlsZEVsZW1lbnRzLmZpbHRlcihjaGlsZCA9PiBjaGlsZC5ub2RlTmFtZSA9PT0gbmFtZSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiAoZWxlbWVudHMubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgLy8g64uo7J28IOyalOyGjFxyXG4gICAgICAgICAgICAgIHJlc3VsdFtuYW1lXSA9IHBhcnNlTm9kZShlbGVtZW50c1swXSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgLy8g67Cw7Je066GcIOyymOumrFxyXG4gICAgICAgICAgICAgIHJlc3VsdFtuYW1lXSA9IGVsZW1lbnRzLm1hcChlbGVtZW50ID0+IHBhcnNlTm9kZShlbGVtZW50KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIFxyXG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgIH07XHJcbiAgICAgIFxyXG4gICAgICBjb25zdCByb290RWxlbWVudCA9IHhtbERvYy5kb2N1bWVudEVsZW1lbnQ7XHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xyXG4gICAgICByZXN1bHRbcm9vdEVsZW1lbnQubm9kZU5hbWVdID0gcGFyc2VOb2RlKHJvb3RFbGVtZW50KTtcclxuICAgICAgXHJcbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShyZXN1bHQsIG51bGwsIDIpO1xyXG4gICAgICBcclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCfsnKDtmqjtlZjsp4Ag7JWK7J2AIFhNTCDtmJXsi50nKTtcclxuICAgIH1cclxuICB9XHJcbn07XHJcblxyXG4vLyDtlZjsnIQg7Zi47ZmY7ISx7J2EIOychO2VnCDsoITsl60g7LC47KGwXHJcbmlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xyXG4gIHdpbmRvdy5GaWxlVG9RUiA9IHdpbmRvdy5GaWxlVG9RUiB8fCB7fTtcclxuICB3aW5kb3cuRmlsZVRvUVIuY29yZSA9IHdpbmRvdy5GaWxlVG9RUi5jb3JlIHx8IHt9O1xyXG4gIHdpbmRvdy5GaWxlVG9RUi5jb3JlLmNvbnZlcnRlciA9IENvbnZlcnRlckNvcmU7XHJcbiAgLy8g7KeB7KCRIOygkeq3vOydhCDsnITtlZwg7KCE7JetIOywuOyhsCDstpTqsIBcclxuICB3aW5kb3cuQ29udmVydGVyQ29yZSA9IENvbnZlcnRlckNvcmU7XHJcbn1cclxuXHJcbi8vIOuqqOuTiCDrgrTrs7TrgrTquLBcclxuZXhwb3J0IGRlZmF1bHQgQ29udmVydGVyQ29yZTsgIl0sIm5hbWVzIjpbIl9yZWdlbmVyYXRvclJ1bnRpbWUiLCJyIiwidCIsImUiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJuIiwiaGFzT3duUHJvcGVydHkiLCJvIiwiU3ltYm9sIiwiaSIsIml0ZXJhdG9yIiwiYSIsImFzeW5jSXRlcmF0b3IiLCJ1IiwidG9TdHJpbmdUYWciLCJjIiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImgiLCJHZW5lcmF0b3IiLCJjcmVhdGUiLCJFcnJvciIsImRvbmUiLCJtZXRob2QiLCJhcmciLCJkZWxlZ2F0ZSIsImQiLCJmIiwic2VudCIsIl9zZW50IiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJhYnJ1cHQiLCJzIiwidHlwZSIsIkNvbnRleHQiLCJjYWxsIiwid3JhcCIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJsIiwicCIsImdldFByb3RvdHlwZU9mIiwieSIsIngiLCJ2IiwiZyIsImZvckVhY2giLCJfaW52b2tlIiwiQXN5bmNJdGVyYXRvciIsIl90eXBlb2YiLCJyZXNvbHZlIiwiX19hd2FpdCIsInRoZW4iLCJUeXBlRXJyb3IiLCJuZXh0IiwidyIsInRyeUVudHJpZXMiLCJwdXNoIiwibSIsInJlc2V0IiwiaXNOYU4iLCJsZW5ndGgiLCJkaXNwbGF5TmFtZSIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJtYXJrIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJhd3JhcCIsImFzeW5jIiwiUHJvbWlzZSIsImtleXMiLCJ1bnNoaWZ0IiwicG9wIiwidmFsdWVzIiwicHJldiIsImNoYXJBdCIsInNsaWNlIiwic3RvcCIsInJ2YWwiLCJjb21wbGV0ZSIsImZpbmlzaCIsIl9jYXRjaCIsImRlbGVnYXRlWWllbGQiLCJhc3luY0dlbmVyYXRvclN0ZXAiLCJfYXN5bmNUb0dlbmVyYXRvciIsImFyZ3VtZW50cyIsImFwcGx5IiwiX25leHQiLCJfdGhyb3ciLCJGaWxlVXRpbHMiLCJDb21tb25VdGlscyIsIkNvbnZlcnRlckNvcmUiLCJzdXBwb3J0ZWRGb3JtYXRzIiwiY29udmVydCIsImZpbGUiLCJvdXRwdXRGb3JtYXQiLCJfYXJndW1lbnRzIiwiX3RoaXMiLCJfY2FsbGVlIiwib3B0aW9ucyIsInByb2dyZXNzQ2FsbGJhY2siLCJyZXN1bHQiLCJ1cmwiLCJfY2FsbGVlJCIsIl9jb250ZXh0IiwidW5kZWZpbmVkIiwicHJvZ3Jlc3MiLCJjb252ZXJ0RmlsZSIsImRhdGEiLCJzdGFnZSIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsImJsb2IiLCJmaWxlbmFtZSIsIm1ldGFkYXRhIiwib3V0cHV0RmlsZU5hbWUiLCJzaXplIiwibWltZVR5cGUiLCJ0MCIsImNvbnNvbGUiLCJlcnJvciIsIl9hcmd1bWVudHMyIiwiX3RoaXMyIiwiX2NhbGxlZTIiLCJpbnB1dEZvcm1hdCIsImRhdGFVcmkiLCJfY2FsbGVlMiQiLCJfY29udGV4dDIiLCJtZXNzYWdlIiwiZ2V0RmlsZUV4dGVuc2lvbiIsImNhbkNvbnZlcnQiLCJjb25jYXQiLCJsYXN0TW9kaWZpZWQiLCJmaWxlVG9EYXRhVXJpIiwiaXNJbWFnZUNvbnZlcnNpb24iLCJjb252ZXJ0SW1hZ2UiLCJpc0RvY3VtZW50Q29udmVyc2lvbiIsImNvbnZlcnREb2N1bWVudCIsImlzQXVkaW9Db252ZXJzaW9uIiwiY29udmVydEF1ZGlvIiwiZ2V0T3V0cHV0RmlsZU5hbWUiLCJfb2JqZWN0U3ByZWFkIiwiY2F0ZWdvcmllcyIsIl9pIiwiX2NhdGVnb3JpZXMiLCJjYXRlZ29yeSIsImZvcm1hdEluZm8iLCJpbnB1dHMiLCJpbmNsdWRlcyIsImNvbnZlcnRpYmxlVG8iLCJpbWFnZSIsIm91dHB1dHMiLCJkb2N1bWVudCIsImF1ZGlvIiwicmVqZWN0IiwiaW1nIiwiSW1hZ2UiLCJvbmxvYWQiLCJjYW52YXMiLCJjcmVhdGVFbGVtZW50IiwiY3R4IiwiZ2V0Q29udGV4dCIsIndpZHRoIiwiaGVpZ2h0IiwicmF0aW8iLCJtYXhXaWR0aCIsIm1heEhlaWdodCIsImJhY2tncm91bmRDb2xvciIsImZpbGxTdHlsZSIsImZpbGxSZWN0IiwiZHJhd0ltYWdlIiwiZ2V0TWltZVR5cGUiLCJxdWFsaXR5IiwidG9CbG9iIiwib25lcnJvciIsInNyYyIsIl90aGlzMyIsImJhc2U2NENvbnRlbnQiLCJzcGxpdCIsInRleHRDb250ZW50IiwiYXRvYiIsImNzdlRvSnNvbiIsImpzb25Ub0NzdiIsIm1hcmtkb3duVG9IdG1sIiwianNvblRvWG1sIiwieG1sVG9Kc29uIiwib3V0cHV0TWltZVR5cGUiLCJyZXN1bHRCbG9iIiwiQmxvYiIsInNldFRpbWVvdXQiLCJmZXRjaCIsInJlc3BvbnNlIiwiY3N2VGV4dCIsImxpbmVzIiwiaGVhZGVycyIsIm1hcCIsImhlYWRlciIsInRyaW0iLCJfbG9vcCIsIm9iaiIsImluZGV4IiwiSlNPTiIsInN0cmluZ2lmeSIsImpzb25UZXh0IiwicGFyc2UiLCJBcnJheSIsImlzQXJyYXkiLCJoZWFkZXJSb3ciLCJqb2luIiwicm93cyIsInJlcGxhY2UiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJtYXJrZG93biIsImh0bWwiLCJtYXRjaCIsInRvWG1sIiwicm9vdE5hbWUiLCJ4bWwiLCJrZXkiLCJpdGVtIiwieG1sVGV4dCIsInBhcnNlciIsIkRPTVBhcnNlciIsInhtbERvYyIsInBhcnNlRnJvbVN0cmluZyIsInBhcnNlTm9kZSIsIm5vZGUiLCJub2RlVHlwZSIsIk5vZGUiLCJURVhUX05PREUiLCJ0ZXh0Iiwibm9kZVZhbHVlIiwiRUxFTUVOVF9OT0RFIiwiY2hpbGRFbGVtZW50cyIsImZyb20iLCJjaGlsZHJlbiIsImNoaWxkTmFtZXMiLCJjaGlsZCIsIm5vZGVOYW1lIiwidW5pcXVlTmFtZXMiLCJTZXQiLCJfaXRlcmF0b3IiLCJfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlciIsIl9zdGVwIiwiX2xvb3AyIiwiZWxlbWVudHMiLCJmaWx0ZXIiLCJlbGVtZW50IiwiZXJyIiwicm9vdEVsZW1lbnQiLCJkb2N1bWVudEVsZW1lbnQiLCJ3aW5kb3ciLCJGaWxlVG9RUiIsImNvcmUiLCJjb252ZXJ0ZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///557\n")},890:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return r; }; var t, r = {}, e = Object.prototype, n = e.hasOwnProperty, o = \"function\" == typeof Symbol ? Symbol : {}, i = o.iterator || \"@@iterator\", a = o.asyncIterator || \"@@asyncIterator\", u = o.toStringTag || \"@@toStringTag\"; function c(t, r, e, n) { return Object.defineProperty(t, r, { value: e, enumerable: !n, configurable: !n, writable: !n }); } try { c({}, \"\"); } catch (t) { c = function c(t, r, e) { return t[r] = e; }; } function h(r, e, n, o) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype); return c(a, \"_invoke\", function (r, e, n) { var o = 1; return function (i, a) { if (3 === o) throw Error(\"Generator is already running\"); if (4 === o) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var u = n.delegate; if (u) { var c = d(u, n); if (c) { if (c === f) continue; return c; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (1 === o) throw o = 4, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = 3; var h = s(r, e, n); if (\"normal\" === h.type) { if (o = n.done ? 4 : 2, h.arg === f) continue; return { value: h.arg, done: n.done }; } \"throw\" === h.type && (o = 4, n.method = \"throw\", n.arg = h.arg); } }; }(r, n, new Context(o || [])), !0), a; } function s(t, r, e) { try { return { type: \"normal\", arg: t.call(r, e) }; } catch (t) { return { type: \"throw\", arg: t }; } } r.wrap = h; var f = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var l = {}; c(l, i, function () { return this; }); var p = Object.getPrototypeOf, y = p && p(p(x([]))); y && y !== e && n.call(y, i) && (l = y); var v = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(l); function g(t) { [\"next\", \"throw\", \"return\"].forEach(function (r) { c(t, r, function (t) { return this._invoke(r, t); }); }); } function AsyncIterator(t, r) { function e(o, i, a, u) { var c = s(t[o], t, i); if (\"throw\" !== c.type) { var h = c.arg, f = h.value; return f && \"object\" == _typeof(f) && n.call(f, \"__await\") ? r.resolve(f.__await).then(function (t) { e(\"next\", t, a, u); }, function (t) { e(\"throw\", t, a, u); }) : r.resolve(f).then(function (t) { h.value = t, a(h); }, function (t) { return e(\"throw\", t, a, u); }); } u(c.arg); } var o; c(this, \"_invoke\", function (t, n) { function i() { return new r(function (r, o) { e(t, n, r, o); }); } return o = o ? o.then(i, i) : i(); }, !0); } function d(r, e) { var n = e.method, o = r.i[n]; if (o === t) return e.delegate = null, \"throw\" === n && r.i[\"return\"] && (e.method = \"return\", e.arg = t, d(r, e), \"throw\" === e.method) || \"return\" !== n && (e.method = \"throw\", e.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), f; var i = s(o, r.i, e.arg); if (\"throw\" === i.type) return e.method = \"throw\", e.arg = i.arg, e.delegate = null, f; var a = i.arg; return a ? a.done ? (e[r.r] = a.value, e.next = r.n, \"return\" !== e.method && (e.method = \"next\", e.arg = t), e.delegate = null, f) : a : (e.method = \"throw\", e.arg = new TypeError(\"iterator result is not an object\"), e.delegate = null, f); } function w(t) { this.tryEntries.push(t); } function m(r) { var e = r[4] || {}; e.type = \"normal\", e.arg = t, r[4] = e; } function Context(t) { this.tryEntries = [[-1]], t.forEach(w, this), this.reset(!0); } function x(r) { if (null != r) { var e = r[i]; if (e) return e.call(r); if (\"function\" == typeof r.next) return r; if (!isNaN(r.length)) { var o = -1, a = function e() { for (; ++o < r.length;) if (n.call(r, o)) return e.value = r[o], e.done = !1, e; return e.value = t, e.done = !0, e; }; return a.next = a; } } throw new TypeError(_typeof(r) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, c(v, \"constructor\", GeneratorFunctionPrototype), c(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = c(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), r.isGeneratorFunction = function (t) { var r = \"function\" == typeof t && t.constructor; return !!r && (r === GeneratorFunction || \"GeneratorFunction\" === (r.displayName || r.name)); }, r.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, c(t, u, \"GeneratorFunction\")), t.prototype = Object.create(v), t; }, r.awrap = function (t) { return { __await: t }; }, g(AsyncIterator.prototype), c(AsyncIterator.prototype, a, function () { return this; }), r.AsyncIterator = AsyncIterator, r.async = function (t, e, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(h(t, e, n, o), i); return r.isGeneratorFunction(e) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, g(v), c(v, u, \"Generator\"), c(v, i, function () { return this; }), c(v, \"toString\", function () { return \"[object Generator]\"; }), r.keys = function (t) { var r = Object(t), e = []; for (var n in r) e.unshift(n); return function t() { for (; e.length;) if ((n = e.pop()) in r) return t.value = n, t.done = !1, t; return t.done = !0, t; }; }, r.values = x, Context.prototype = { constructor: Context, reset: function reset(r) { if (this.prev = this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(m), !r) for (var e in this) \"t\" === e.charAt(0) && n.call(this, e) && !isNaN(+e.slice(1)) && (this[e] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0][4]; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(r) { if (this.done) throw r; var e = this; function n(t) { a.type = \"throw\", a.arg = r, e.next = t; } for (var o = e.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i[4], u = this.prev, c = i[1], h = i[2]; if (-1 === i[0]) return n(\"end\"), !1; if (!c && !h) throw Error(\"try statement without catch or finally\"); if (null != i[0] && i[0] <= u) { if (u < c) return this.method = \"next\", this.arg = t, n(c), !0; if (u < h) return n(h), !1; } } }, abrupt: function abrupt(t, r) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var n = this.tryEntries[e]; if (n[0] > -1 && n[0] <= this.prev && this.prev < n[2]) { var o = n; break; } } o && (\"break\" === t || \"continue\" === t) && o[0] <= r && r <= o[2] && (o = null); var i = o ? o[4] : {}; return i.type = t, i.arg = r, o ? (this.method = \"next\", this.next = o[2], f) : this.complete(i); }, complete: function complete(t, r) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && r && (this.next = r), f; }, finish: function finish(t) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var e = this.tryEntries[r]; if (e[2] === t) return this.complete(e[4], e[3]), m(e), f; } }, \"catch\": function _catch(t) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var e = this.tryEntries[r]; if (e[0] === t) { var n = e[4]; if (\"throw\" === n.type) { var o = n.arg; m(e); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(r, e, n) { return this.delegate = { i: x(r), r: e, n: n }, \"next\" === this.method && (this.arg = t), f; } }, r; }\nfunction _createForOfIteratorHelper(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t[\"return\"] || t[\"return\"](); } finally { if (u) throw o; } } }; }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\n/**\n * qr-generator.js - FileToQR QR 코드 생성 모듈\n * 버전: 1.1.0\n * 최종 업데이트: 2025-06-20\n * \n * 이 모듈은 다양한 콘텐츠로 QR 코드를 생성하는 기능을 제공합니다:\n * - URL, 텍스트, 연락처 정보 등을 QR 코드로 변환\n * - 색상, 크기, 로고 등 커스터마이징 옵션\n * - 생성된 QR 코드 다운로드 (PNG, SVG, PDF)\n */\n\n// QR 코드 라이브러리 URL 설정\nvar QR_LIB_URLS = {\n  local: ['/assets/js/vendor/qrcode.min.js', './assets/js/vendor/qrcode.min.js', '../assets/js/vendor/qrcode.min.js', '../../assets/js/vendor/qrcode.min.js'],\n  cdn: ['https://cdn.jsdelivr.net/npm/qrcode@1.5.3/build/qrcode.min.js', 'https://unpkg.com/qrcode@1.5.3/build/qrcode.min.js', 'https://cdn.rawgit.com/davidshimjs/qrcodejs/gh-pages/qrcode.min.js']\n};\n\n// QR 코드 생성 라이브러리 임포트 (QRCode.js 사용)\nvar importQRCodeLibrary = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    var qrPreview, _iterator, _step, path, response, _iterator2, _step2, url, i18n, msg, _i18n, _msg;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          if (!window.QRCode) {\n            _context.next = 3;\n            break;\n          }\n          console.log('QRCode 라이브러리가 이미 전역 객체에 있습니다.');\n          return _context.abrupt(\"return\", window.QRCode);\n        case 3:\n          // 로딩 상태 업데이트\n          qrPreview = document.getElementById('qr-preview');\n          if (qrPreview) {\n            qrPreview.innerHTML = \"\\n      <div class=\\\"loading-status text-center\\\">\\n        <div class=\\\"spinner mx-auto mb-2\\\"></div>\\n        <p class=\\\"text-gray-500\\\">QR \\uCF54\\uB4DC \\uC0DD\\uC131\\uAE30 \\uC900\\uBE44 \\uC911...</p>\\n      </div>\\n    \";\n          }\n          _context.prev = 5;\n          console.log('QRCode 라이브러리 로드 시도');\n\n          // 1. 로컬 라이브러리 시도\n          _iterator = _createForOfIteratorHelper(QR_LIB_URLS.local);\n          _context.prev = 8;\n          _iterator.s();\n        case 10:\n          if ((_step = _iterator.n()).done) {\n            _context.next = 30;\n            break;\n          }\n          path = _step.value;\n          _context.prev = 12;\n          _context.next = 15;\n          return fetch(path, {\n            method: 'HEAD'\n          });\n        case 15:\n          response = _context.sent;\n          if (!response.ok) {\n            _context.next = 23;\n            break;\n          }\n          console.log(\"\\uB85C\\uCEEC QRCode \\uB77C\\uC774\\uBE0C\\uB7EC\\uB9AC \\uBC1C\\uACAC (\".concat(path, \"), \\uB85C\\uB4DC \\uC911...\"));\n          _context.next = 20;\n          return loadScript(path);\n        case 20:\n          if (!window.QRCode) {\n            _context.next = 23;\n            break;\n          }\n          console.log('로컬 QRCode 라이브러리 로드 성공');\n          return _context.abrupt(\"return\", window.QRCode);\n        case 23:\n          _context.next = 28;\n          break;\n        case 25:\n          _context.prev = 25;\n          _context.t0 = _context[\"catch\"](12);\n          console.warn(\"\\uB85C\\uCEEC \\uACBD\\uB85C \".concat(path, \" \\uD655\\uC778 \\uC2E4\\uD328:\"), _context.t0);\n        case 28:\n          _context.next = 10;\n          break;\n        case 30:\n          _context.next = 35;\n          break;\n        case 32:\n          _context.prev = 32;\n          _context.t1 = _context[\"catch\"](8);\n          _iterator.e(_context.t1);\n        case 35:\n          _context.prev = 35;\n          _iterator.f();\n          return _context.finish(35);\n        case 38:\n          // 2. CDN에서 로드 시도\n          _iterator2 = _createForOfIteratorHelper(QR_LIB_URLS.cdn);\n          _context.prev = 39;\n          _iterator2.s();\n        case 41:\n          if ((_step2 = _iterator2.n()).done) {\n            _context.next = 57;\n            break;\n          }\n          url = _step2.value;\n          _context.prev = 43;\n          console.log(\"CDN\\uC5D0\\uC11C QRCode \\uB77C\\uC774\\uBE0C\\uB7EC\\uB9AC \\uB85C\\uB4DC \\uC2DC\\uB3C4: \".concat(url));\n          _context.next = 47;\n          return loadScript(url);\n        case 47:\n          if (!window.QRCode) {\n            _context.next = 50;\n            break;\n          }\n          console.log('CDN QRCode 라이브러리 로드 성공');\n          return _context.abrupt(\"return\", window.QRCode);\n        case 50:\n          _context.next = 55;\n          break;\n        case 52:\n          _context.prev = 52;\n          _context.t2 = _context[\"catch\"](43);\n          console.warn(\"CDN QRCode \\uB77C\\uC774\\uBE0C\\uB7EC\\uB9AC \\uB85C\\uB4DC \\uC2E4\\uD328 (\".concat(url, \"):\"), _context.t2);\n        case 55:\n          _context.next = 41;\n          break;\n        case 57:\n          _context.next = 62;\n          break;\n        case 59:\n          _context.prev = 59;\n          _context.t3 = _context[\"catch\"](39);\n          _iterator2.e(_context.t3);\n        case 62:\n          _context.prev = 62;\n          _iterator2.f();\n          return _context.finish(62);\n        case 65:\n          // 3. 모든 시도 실패 - 내장 기본 QR 코드 생성기 제공\n          console.error('모든 QRCode 라이브러리 로드 실패, 내장 QR 생성기로 대체');\n          // 간단한 QR 코드 생성 API 제공\n          window.QRCode = createFallbackQRCodeLibrary();\n          // 다국어 안내 메시지 적용\n          i18n = window.FileToQR && window.FileToQR.i18n;\n          msg = i18n && typeof i18n.translate === 'function' ? i18n.translate('qrcode.errors.qrLibLoadFail', {}, 'QR 코드 라이브러리를 로드할 수 없습니다. 제한된 기능으로 계속합니다.') : 'QR 코드 라이브러리를 로드할 수 없습니다. 제한된 기능으로 계속합니다.';\n          showErrorMessage('qrcode.errors.qrLibLoadFail', msg);\n          return _context.abrupt(\"return\", window.QRCode);\n        case 73:\n          _context.prev = 73;\n          _context.t4 = _context[\"catch\"](5);\n          console.error('QRCode 라이브러리 로드 중 심각한 오류 발생:', _context.t4);\n          _i18n = window.FileToQR && window.FileToQR.i18n;\n          _msg = _i18n && typeof _i18n.translate === 'function' ? _i18n.translate('qrcode.errors.qrLibInitFail', {}, 'QR 코드 생성기를 초기화할 수 없습니다. 페이지를 새로고침하거나 다시 시도해주세요.') : 'QR 코드 생성기를 초기화할 수 없습니다. 페이지를 새로고침하거나 다시 시도해주세요.';\n          showErrorMessage('qrcode.errors.qrLibInitFail', _msg);\n          // 최소한의 대체 라이브러리 제공\n          window.QRCode = createFallbackQRCodeLibrary();\n          return _context.abrupt(\"return\", window.QRCode);\n        case 81:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[5, 73], [8, 32, 35, 38], [12, 25], [39, 59, 62, 65], [43, 52]]);\n  }));\n  return function importQRCodeLibrary() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\n// 스크립트 로드 유틸리티 함수\nfunction loadScript(src) {\n  return new Promise(function (resolve, reject) {\n    var script = document.createElement('script');\n    script.src = src;\n    script.onload = function () {\n      return resolve();\n    };\n    script.onerror = function (error) {\n      return reject(error);\n    };\n    document.head.appendChild(script);\n  });\n}\n\n// 내장 기본 QR 코드 생성기 생성\nfunction createFallbackQRCodeLibrary() {\n  return {\n    toCanvas: function toCanvas(canvas, text, options) {\n      var ctx = canvas.getContext('2d');\n      ctx.fillStyle = (options === null || options === void 0 ? void 0 : options.colorLight) || '#FFFFFF';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n      ctx.fillStyle = (options === null || options === void 0 ? void 0 : options.colorDark) || '#000000';\n      ctx.font = 'bold 14px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText('QR 코드 생성 실패', canvas.width / 2, canvas.height / 2 - 20);\n      ctx.font = '12px Arial';\n      ctx.fillText('라이브러리를 로드할 수 없습니다', canvas.width / 2, canvas.height / 2 + 10);\n\n      // 간단한 QR 코드처럼 보이는 패턴 그리기\n      ctx.fillRect(canvas.width / 4, canvas.height / 4, 20, 20);\n      ctx.fillRect(canvas.width * 3 / 4 - 20, canvas.height / 4, 20, 20);\n      ctx.fillRect(canvas.width / 4, canvas.height * 3 / 4 - 20, 20, 20);\n      return Promise.resolve();\n    },\n    CorrectLevel: {\n      L: 1,\n      M: 0,\n      Q: 3,\n      H: 2\n    }\n  };\n}\n\n// 오류 메시지 표시 함수\nfunction showErrorMessage(messageKey, defaultMsg) {\n  // 오류 메시지는 반드시 i18n을 통해 출력해야 함\n  var i18n = window.FileToQR && window.FileToQR.i18n;\n  var message = i18n && typeof i18n.translate === 'function' ? i18n.translate(messageKey, {}, defaultMsg || messageKey) : defaultMsg || messageKey;\n  // Toast 메시지 생성\n  var toast = document.createElement('div');\n  toast.className = 'toast toast-error';\n  toast.innerHTML = \"\\n    <div class=\\\"toast-content\\\">\\n      <svg class=\\\"w-5 h-5 text-red-500 mr-2\\\" fill=\\\"currentColor\\\" viewBox=\\\"0 0 20 20\\\">\\n        <path fill-rule=\\\"evenodd\\\" d=\\\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\\\" clip-rule=\\\"evenodd\\\"></path>\\n      </svg>\\n      <span>\".concat(message, \"</span>\\n    </div>\\n    <button class=\\\"toast-close\\\">\\xD7</button>\\n  \");\n  // 닫기 버튼 이벤트 리스너\n  var closeBtn = toast.querySelector('.toast-close');\n  if (closeBtn) {\n    closeBtn.addEventListener('click', function () {\n      toast.classList.add('toast-closing');\n      setTimeout(function () {\n        return toast.remove();\n      }, 300);\n    });\n  }\n  // 기존 토스트 메시지가 있으면 제거\n  var existingToast = document.querySelector('.toast');\n  if (existingToast) {\n    existingToast.remove();\n  }\n  // 페이지에 토스트 추가\n  document.body.appendChild(toast);\n  // 자동 제거 타이머 (10초)\n  setTimeout(function () {\n    if (document.body.contains(toast)) {\n      toast.classList.add('toast-closing');\n      setTimeout(function () {\n        return toast.remove();\n      }, 300);\n    }\n  }, 10000);\n  // QR 프리뷰 영역에도 오류 표시\n  var qrPreview = document.getElementById('qr-preview');\n  if (qrPreview) {\n    qrPreview.innerHTML = \"<div class=\\\"p-4 bg-red-100 text-red-800 rounded-lg\\\"><h3 class=\\\"font-medium\\\">\".concat(i18n ? i18n.translate('errors.errorOccurred', {}, '오류 발생') : '오류 발생', \"</h3><p>\").concat(message, \"</p></div>\");\n  }\n}\n\n// QR 코드 생성기 모듈\nvar QRGenerator = {\n  // 내부 상태\n  state: {\n    initialized: false,\n    qrLibrary: null,\n    currentOptions: {\n      content: '',\n      type: 'text',\n      foreground: '#000000',\n      background: '#FFFFFF',\n      size: 256,\n      margin: 4,\n      errorCorrectionLevel: 'M',\n      logo: null\n    },\n    generatedQR: null\n  },\n  /**\n   * 모듈 초기화\n   * @returns {Promise<boolean>} 초기화 성공 여부\n   */\n  init: function init() {\n    var _this = this;\n    return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            console.log('QR 코드 생성기 초기화 시작...');\n\n            // 이미 초기화된 경우 중복 실행 방지\n            if (!_this.state.initialized) {\n              _context2.next = 5;\n              break;\n            }\n            console.log('QRGenerator가 이미 초기화되어 있습니다.');\n            return _context2.abrupt(\"return\", true);\n          case 5:\n            // QR 코드 라이브러리 로드\n            console.log('QR 코드 라이브러리 로드 시도');\n            _context2.next = 8;\n            return importQRCodeLibrary();\n          case 8:\n            _this.state.qrLibrary = _context2.sent;\n            console.log('QR 코드 라이브러리 로드 상태:', _this.state.qrLibrary ? '성공' : '실패');\n\n            // UI 요소 초기화\n            console.log('UI 요소 초기화 시작');\n            _this._initUI();\n\n            // 이벤트 리스너 등록\n            console.log('이벤트 리스너 등록 시작');\n            _this._registerEventListeners();\n            _this.state.initialized = true;\n            console.log('QR 코드 생성기 초기화 완료. 상태:', _this.state);\n            return _context2.abrupt(\"return\", true);\n          case 19:\n            _context2.prev = 19;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.error('QR 코드 생성기 초기화 중 에러 발생:', _context2.t0);\n            // 에러 상세 추적\n            console.error('스택 트레이스:', _context2.t0.stack);\n            console.error('에러 발생 시 모듈 상태:', JSON.stringify(_this.state));\n\n            // 사용자에게 에러 메시지 표시\n            showErrorMessage('qrcode.errors.qrLibInitFail', 'QR 코드 생성기를 초기화하는 도중 오류가 발생했습니다. 페이지를 새로고침해 주세요.');\n            return _context2.abrupt(\"return\", false);\n          case 26:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2, null, [[0, 19]]);\n    }))();\n  },\n  /**\n   * QR 코드 생성 (공개 메서드)\n   * 폼에서 데이터를 수집하여 QR 코드 생성\n   */\n  generateQRCode: function generateQRCode() {\n    console.log('QRGenerator.generateQRCode 호출됨');\n\n    // 상태 확인\n    if (!this.state.initialized) {\n      console.error('QRGenerator가 초기화되지 않았습니다. init() 먼저 호출하세요.');\n      return;\n    }\n    console.log('QR 코드 생성 시작, 현재 상태:', this.state);\n    this._handleFormSubmit();\n  },\n  /**\n     * QR 코드 다운로드 (공개 메서드)\n     * @param {string} format - 다운로드 형식 (png, svg, jpeg)\n     */\n  downloadQRCode: function downloadQRCode(format) {\n    console.log(\"QRGenerator.downloadQRCode \\uD638\\uCD9C\\uB428: \".concat(format));\n\n    // 상태 확인\n    if (!this.state.initialized) {\n      console.error('QRGenerator가 초기화되지 않았습니다. init() 먼저 호출하세요.');\n      return;\n    }\n    if (!this.state.generatedQR) {\n      console.error('생성된 QR 코드가 없습니다. generateQRCode()를 먼저 호출하세요.');\n      return;\n    }\n    this._downloadQRCode(format);\n  },\n  /**\n   * UI 요소 초기화\n   * @private\n   */\n  _initUI: function _initUI() {\n    var _this2 = this;\n    // UI 요소가 로드되기를 기다림\n    var _checkElements = function checkElements() {\n      var qrForm = document.getElementById('qr-form');\n      var contentInput = document.getElementById('qr-content');\n      var qrPreview = document.getElementById('qr-preview');\n      if (!qrForm || !contentInput || !qrPreview) {\n        // DOM 요소가 아직 없으면 100ms 후 다시 시도\n        setTimeout(_checkElements, 100);\n        return;\n      }\n\n      // URL에서 초기 내용 가져오기\n      var queryParams = new URLSearchParams(window.location.search);\n      var initialContent = queryParams.get('content') || '';\n      var initialType = queryParams.get('type') || 'text';\n      if (initialContent) {\n        contentInput.value = initialContent;\n        _this2.state.currentOptions.content = initialContent;\n        _this2.state.currentOptions.type = initialType;\n\n        // URL 파라미터가 있으면 자동으로 QR 코드 생성\n        _this2._generateQRCode();\n      }\n\n      // 색상 선택기 초기화\n      var fgColorPicker = document.getElementById('qr-foreground');\n      var bgColorPicker = document.getElementById('qr-background');\n      if (fgColorPicker) fgColorPicker.value = _this2.state.currentOptions.foreground;\n      if (bgColorPicker) bgColorPicker.value = _this2.state.currentOptions.background;\n\n      // 크기 슬라이더 초기화\n      var sizeSlider = document.getElementById('qr-size');\n      if (sizeSlider) {\n        sizeSlider.value = _this2.state.currentOptions.size;\n        var sizeValue = document.getElementById('qr-size-value');\n        if (sizeValue) sizeValue.textContent = \"\".concat(_this2.state.currentOptions.size, \"px\");\n      }\n\n      // 여백 슬라이더 초기화\n      var marginSlider = document.getElementById('qr-margin');\n      if (marginSlider) {\n        marginSlider.value = _this2.state.currentOptions.margin;\n        var marginValue = document.getElementById('qr-margin-value');\n        if (marginValue) marginValue.textContent = _this2.state.currentOptions.margin;\n      }\n\n      // 오류 수정 레벨 선택기 초기화\n      var ecLevelSelect = document.getElementById('qr-error-correction');\n      if (ecLevelSelect) ecLevelSelect.value = _this2.state.currentOptions.errorCorrectionLevel;\n    };\n    _checkElements();\n  },\n  /**\n     * 이벤트 리스너 등록\n     * @private\n     */\n  _registerEventListeners: function _registerEventListeners() {\n    var _this3 = this;\n    document.addEventListener('DOMContentLoaded', function () {\n      // QR 코드 생성 폼\n      var qrForm = document.getElementById('qr-form');\n      if (qrForm) {\n        qrForm.addEventListener('submit', function (e) {\n          e.preventDefault();\n          _this3._handleFormSubmit();\n        });\n      }\n\n      // 내용 타입 변경\n      var typeSelector = document.getElementById('qr-type');\n      if (typeSelector) {\n        typeSelector.addEventListener('change', function () {\n          _this3._updateContentPlaceholder();\n        });\n      }\n\n      // 색상 변경\n      var fgColorPicker = document.getElementById('qr-foreground');\n      var bgColorPicker = document.getElementById('qr-background');\n      if (fgColorPicker) {\n        fgColorPicker.addEventListener('change', function () {\n          _this3.state.currentOptions.foreground = fgColorPicker.value;\n          if (_this3.state.generatedQR) _this3._generateQRCode();\n        });\n      }\n      if (bgColorPicker) {\n        bgColorPicker.addEventListener('change', function () {\n          _this3.state.currentOptions.background = bgColorPicker.value;\n          if (_this3.state.generatedQR) _this3._generateQRCode();\n        });\n      }\n\n      // 크기 변경\n      var sizeSlider = document.getElementById('qr-size');\n      if (sizeSlider) {\n        sizeSlider.addEventListener('input', function () {\n          _this3.state.currentOptions.size = parseInt(sizeSlider.value, 10);\n          var sizeValue = document.getElementById('qr-size-value');\n          if (sizeValue) sizeValue.textContent = \"\".concat(_this3.state.currentOptions.size, \"px\");\n          if (_this3.state.generatedQR) _this3._generateQRCode();\n        });\n      }\n\n      // 여백 변경\n      var marginSlider = document.getElementById('qr-margin');\n      if (marginSlider) {\n        marginSlider.addEventListener('input', function () {\n          _this3.state.currentOptions.margin = parseInt(marginSlider.value, 10);\n          var marginValue = document.getElementById('qr-margin-value');\n          if (marginValue) marginValue.textContent = _this3.state.currentOptions.margin;\n          if (_this3.state.generatedQR) _this3._generateQRCode();\n        });\n      }\n\n      // 오류 수정 레벨 변경\n      var ecLevelSelect = document.getElementById('qr-error-correction');\n      if (ecLevelSelect) {\n        ecLevelSelect.addEventListener('change', function () {\n          _this3.state.currentOptions.errorCorrectionLevel = ecLevelSelect.value;\n          if (_this3.state.generatedQR) _this3._generateQRCode();\n        });\n      }\n\n      // 로고 이미지 변경\n      var logoInput = document.getElementById('qr-logo');\n      if (logoInput) {\n        logoInput.addEventListener('change', function (e) {\n          var file = e.target.files[0];\n          if (file) {\n            var reader = new FileReader();\n            reader.onload = function (e) {\n              _this3.state.currentOptions.logo = e.target.result;\n              if (_this3.state.generatedQR) _this3._generateQRCode();\n            };\n            reader.readAsDataURL(file);\n          } else {\n            _this3.state.currentOptions.logo = null;\n            if (_this3.state.generatedQR) _this3._generateQRCode();\n          }\n        });\n      }\n\n      // 다운로드 버튼\n      var pngDownloadBtn = document.getElementById('download-png');\n      var svgDownloadBtn = document.getElementById('download-svg');\n      if (pngDownloadBtn) {\n        pngDownloadBtn.addEventListener('click', function () {\n          _this3._downloadQRCode('png');\n        });\n      }\n      if (svgDownloadBtn) {\n        svgDownloadBtn.addEventListener('click', function () {\n          _this3._downloadQRCode('svg');\n        });\n      }\n    });\n  },\n  /**\n     * 콘텐츠 타입에 따른 입력 플레이스홀더 업데이트\n     * @private\n   */\n  _updateContentPlaceholder: function _updateContentPlaceholder() {\n    var typeSelector = document.getElementById('qr-type');\n    var contentInput = document.getElementById('qr-content');\n    if (!typeSelector || !contentInput) return;\n    var type = typeSelector.value;\n    var placeholder = '';\n    switch (type) {\n      case 'url':\n        placeholder = 'https://example.com';\n        break;\n      case 'email':\n        placeholder = 'mailto:example@example.com';\n        break;\n      case 'tel':\n        placeholder = 'tel:+821012345678';\n        break;\n      case 'sms':\n        placeholder = 'sms:+821012345678?body=Hello';\n        break;\n      case 'wifi':\n        placeholder = 'WIFI:S:NetworkName;T:WPA;P:Password;;';\n        break;\n      case 'geo':\n        placeholder = 'geo:37.5665,126.9780';\n        break;\n      case 'vcard':\n        placeholder = 'BEGIN:VCARD\\nVERSION:3.0\\nN:홍길동\\nTEL:+821012345678\\nEMAIL:example@example.com\\nEND:VCARD';\n        break;\n      default:\n        placeholder = '텍스트를 입력하세요';\n    }\n    contentInput.placeholder = placeholder;\n  },\n  /**\n   * 폼 제출 핸들러\n   * @private\n   */\n  _handleFormSubmit: function _handleFormSubmit() {\n    console.log('QRGenerator._handleFormSubmit 호출됨');\n\n    // URL 또는 텍스트 입력 필드 확인\n    var contentInputs = {\n      'url': document.getElementById('url-input'),\n      'text': document.getElementById('text-input'),\n      'email': document.getElementById('email-address'),\n      'phone': document.getElementById('phone-input'),\n      'vcard': document.getElementById('vcard-name')\n    };\n\n    // 활성화된 입력 폼 찾기\n    var activeForm = document.querySelector('.content-form.active');\n    console.log('활성화된 입력 폼:', activeForm === null || activeForm === void 0 ? void 0 : activeForm.id);\n    if (!activeForm) {\n      console.error('활성화된 입력 폼을 찾을 수 없습니다.');\n      return;\n    }\n\n    // 폼 유형 결정\n    var formType = activeForm.id.split('-')[0]; // 'url-form' -> 'url'\n    console.log('결정된 폼 유형:', formType);\n\n    // 해당 유형의 입력 필드 확인\n    var contentInput = contentInputs[formType];\n    if (!contentInput) {\n      console.error(\"\\uD3FC \\uC720\\uD615 \".concat(formType, \"\\uC5D0 \\uB300\\uD55C \\uC785\\uB825 \\uD544\\uB4DC\\uB97C \\uCC3E\\uC744 \\uC218 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"));\n      return;\n    }\n    var content = contentInput.value.trim();\n    console.log('입력된 콘텐츠:', content);\n    if (!content) {\n      console.warn('QR 코드 내용이 비어 있습니다.');\n      alert('QR 코드 내용을 입력해주세요.');\n      return;\n    }\n\n    // 상태 업데이트\n    this.state.currentOptions.content = content;\n    this.state.currentOptions.type = formType;\n    console.log('QR 코드 옵션 업데이트:', this.state.currentOptions);\n\n    // QR 코드 생성\n    this._generateQRCode();\n  },\n  /**\n     * QR 코드 생성\n     * @private\n     */\n  _generateQRCode: function _generateQRCode() {\n    var _this4 = this;\n    return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n      var qrPreview, downloadBtns, formattedContent, options, canvas;\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            console.log('QRGenerator._generateQRCode 호출됨');\n            qrPreview = document.getElementById('qr-preview');\n            downloadBtns = document.getElementById('download-options');\n            if (qrPreview) {\n              _context3.next = 6;\n              break;\n            }\n            console.error('QR 코드 프리뷰 컨테이너를 찾을 수 없습니다.');\n            return _context3.abrupt(\"return\");\n          case 6:\n            _context3.prev = 6;\n            // 로딩 상태 표시\n            console.log('QR 코드 생성 중... 로딩 상태 표시');\n            qrPreview.innerHTML = \"\\n        <div class=\\\"flex justify-center items-center h-64\\\">\\n          <div class=\\\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-600\\\"></div>\\n        </div>\\n      \";\n\n            // 내용 포맷팅\n            console.log('내용 포맷팅 시작');\n            formattedContent = _this4._formatContent();\n            console.log('포맷팅된 내용:', formattedContent);\n\n            // QR 코드 옵션 설정\n            options = {\n              text: formattedContent,\n              width: _this4.state.currentOptions.size,\n              height: _this4.state.currentOptions.size,\n              colorDark: _this4.state.currentOptions.foreground,\n              colorLight: _this4.state.currentOptions.background,\n              margin: _this4.state.currentOptions.margin,\n              correctLevel: _this4._getErrorCorrectionLevel()\n            };\n            console.log('QR 코드 옵션:', options);\n\n            // QR 코드 라이브러리 확인\n            if (_this4.state.qrLibrary) {\n              _context3.next = 17;\n              break;\n            }\n            console.error('QR 코드 라이브러리가 로드되지 않았습니다.');\n            throw new Error('QR 코드 라이브러리가 초기화되지 않았습니다.');\n          case 17:\n            // QR 코드 생성 (캔버스)\n            console.log('QR 코드 캔버스 생성 시작');\n            canvas = document.createElement('canvas'); // 라이브러리 메서드 확인\n            if (!(typeof _this4.state.qrLibrary.toCanvas !== 'function')) {\n              _context3.next = 23;\n              break;\n            }\n            console.error('QR 라이브러리 toCanvas 메서드를 찾을 수 없습니다.');\n            console.log('QR 라이브러리 구조:', _this4.state.qrLibrary);\n            throw new Error('QR 코드 라이브러리가 필요한 메서드를 지원하지 않습니다.');\n          case 23:\n            _context3.next = 25;\n            return _this4.state.qrLibrary.toCanvas(canvas, formattedContent, options);\n          case 25:\n            console.log('QR 코드 캔버스 생성 완료');\n\n            // 로고 추가 (있는 경우)\n            if (_this4.state.currentOptions.logo) {\n              console.log('로고 추가 시작');\n              _this4._addLogoToCanvas(canvas);\n            } else {\n              // 결과 표시\n              console.log('QR 코드 프리뷰 표시');\n              qrPreview.innerHTML = '';\n              qrPreview.appendChild(canvas);\n\n              // 다운로드 버튼 표시\n              if (downloadBtns) {\n                console.log('다운로드 버튼 표시');\n                downloadBtns.style.display = 'block';\n              }\n\n              // 생성된 QR 코드 저장\n              _this4.state.generatedQR = canvas;\n              console.log('생성된 QR 코드가 상태에 저장됨');\n            }\n            _context3.next = 34;\n            break;\n          case 29:\n            _context3.prev = 29;\n            _context3.t0 = _context3[\"catch\"](6);\n            console.error('QR 코드 생성 중 오류 발생:', _context3.t0);\n            console.error('스택 트레이스:', _context3.t0.stack);\n            qrPreview.innerHTML = \"\\n        <div class=\\\"p-4 bg-red-100 rounded-lg text-red-800\\\">\\n          <h3 class=\\\"font-medium\\\">QR \\uCF54\\uB4DC \\uC0DD\\uC131 \\uC2E4\\uD328</h3>\\n          <p>\".concat(_context3.t0.message, \"</p>\\n          <div class=\\\"mt-2 text-xs bg-red-50 p-2 rounded-md overflow-auto\\\">\\n            <pre>\").concat(_context3.t0.stack || '스택 트레이스 없음', \"</pre>\\n          </div>\\n        </div>\\n      \");\n          case 34:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, _callee3, null, [[6, 29]]);\n    }))();\n  },\n  /**\n   * 내용 타입에 따른 포맷팅\n   * @returns {string} 포맷팅된 내용\n   * @private\n   */\n  _formatContent: function _formatContent() {\n    var content = this.state.currentOptions.content;\n    var type = this.state.currentOptions.type;\n    if (!content) return '';\n    switch (type) {\n      case 'url':\n        if (!content.startsWith('http://') && !content.startsWith('https://')) {\n          return \"https://\".concat(content);\n        }\n        return content;\n      case 'email':\n        if (!content.startsWith('mailto:')) {\n          return \"mailto:\".concat(content);\n        }\n        return content;\n      case 'tel':\n        if (!content.startsWith('tel:')) {\n          return \"tel:\".concat(content);\n        }\n        return content;\n      case 'sms':\n        if (!content.startsWith('sms:')) {\n          return \"sms:\".concat(content);\n        }\n        return content;\n      case 'wifi':\n        if (!content.startsWith('WIFI:')) {\n          // 기본 WiFi 형식 확인\n          if (content.includes(';') && content.includes(':')) {\n            return content;\n          }\n          // 간단한 입력을 WiFi 형식으로 변환\n          return \"WIFI:S:\".concat(content, \";T:WPA;P:password;;\");\n        }\n        return content;\n      case 'geo':\n        if (!content.startsWith('geo:')) {\n          return \"geo:\".concat(content);\n        }\n        return content;\n      case 'vcard':\n        if (!content.startsWith('BEGIN:VCARD')) {\n          return \"BEGIN:VCARD\\nVERSION:3.0\\nN:\".concat(content, \"\\nEND:VCARD\");\n        }\n        return content;\n      default:\n        return content;\n    }\n  },\n  /**\n   * 오류 수정 레벨 반환\n   * @returns {number} QRCode.js 오류 수정 레벨\n   * @private\n   */\n  _getErrorCorrectionLevel: function _getErrorCorrectionLevel() {\n    switch (this.state.currentOptions.errorCorrectionLevel) {\n      case 'L':\n        return this.state.qrLibrary.CorrectLevel.L;\n      // 약 7%\n      case 'M':\n        return this.state.qrLibrary.CorrectLevel.M;\n      // 약 15%\n      case 'Q':\n        return this.state.qrLibrary.CorrectLevel.Q;\n      // 약 25%\n      case 'H':\n        return this.state.qrLibrary.CorrectLevel.H;\n      // 약 30%\n      default:\n        return this.state.qrLibrary.CorrectLevel.M;\n    }\n  },\n  /**\n   * 캔버스에 로고 추가\n   * @param {HTMLCanvasElement} canvas - QR 코드 캔버스\n   * @private\n   */\n  _addLogoToCanvas: function _addLogoToCanvas(canvas) {\n    var _this5 = this;\n    var qrPreview = document.getElementById('qr-preview');\n    var downloadBtns = document.getElementById('download-buttons');\n    if (!qrPreview) return;\n    var ctx = canvas.getContext('2d');\n    var size = this.state.currentOptions.size;\n    var logoImg = new Image();\n    logoImg.onload = function () {\n      // 로고 크기 계산 (QR 코드 크기의 약 20%)\n      var logoSize = size * 0.2;\n      var logoX = (size - logoSize) / 2;\n      var logoY = (size - logoSize) / 2;\n\n      // 로고 배경 (흰색 원)\n      ctx.fillStyle = '#FFFFFF';\n      ctx.beginPath();\n      ctx.arc(size / 2, size / 2, logoSize / 1.8, 0, 2 * Math.PI);\n      ctx.fill();\n\n      // 로고 그리기\n      ctx.drawImage(logoImg, logoX, logoY, logoSize, logoSize);\n\n      // 결과 표시\n      qrPreview.innerHTML = '';\n      qrPreview.appendChild(canvas);\n\n      // 다운로드 버튼 표시\n      if (downloadBtns) downloadBtns.classList.remove('hidden');\n\n      // 생성된 QR 코드 저장\n      _this5.state.generatedQR = canvas;\n    };\n    logoImg.onerror = function () {\n      console.error('로고 이미지 로드 실패');\n\n      // 로고 없이 결과 표시\n      qrPreview.innerHTML = '';\n      qrPreview.appendChild(canvas);\n\n      // 다운로드 버튼 표시\n      if (downloadBtns) downloadBtns.classList.remove('hidden');\n\n      // 생성된 QR 코드 저장\n      _this5.state.generatedQR = canvas;\n    };\n    logoImg.src = this.state.currentOptions.logo;\n  },\n  /**\n   * QR 코드 다운로드\n   * @param {string} format - 다운로드 형식 ('png', 'svg')\n   * @private\n   */\n  _downloadQRCode: function _downloadQRCode(format) {\n    if (!this.state.generatedQR) {\n      alert('먼저 QR 코드를 생성해주세요.');\n      return;\n    }\n    var canvas = this.state.generatedQR;\n    var content = this.state.currentOptions.content;\n\n    // 파일명 생성\n    var filename = \"qrcode_\".concat(new Date().getTime());\n    if (format === 'png') {\n      var dataUrl = canvas.toDataURL('image/png');\n      var link = document.createElement('a');\n      link.href = dataUrl;\n      link.download = \"\".concat(filename, \".png\");\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    } else if (format === 'svg') {\n      // 캔버스를 SVG로 변환\n      this._canvasToSVG(canvas, \"\".concat(filename, \".svg\"));\n    }\n  },\n  /**\n   * 캔버스를 SVG로 변환\n   * @param {HTMLCanvasElement} canvas - 변환할 캔버스\n   * @param {string} filename - 다운로드 파일명\n   * @private\n   */\n  _canvasToSVG: function _canvasToSVG(canvas, filename) {\n    var ctx = canvas.getContext('2d');\n    var imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n    var data = imageData.data;\n    var svgContent = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 \".concat(canvas.width, \" \").concat(canvas.height, \"\\\" width=\\\"\").concat(canvas.width, \"\\\" height=\\\"\").concat(canvas.height, \"\\\">\");\n\n    // 배경 추가\n    svgContent += \"<rect width=\\\"\".concat(canvas.width, \"\\\" height=\\\"\").concat(canvas.height, \"\\\" fill=\\\"\").concat(this.state.currentOptions.background, \"\\\"/>\");\n\n    // 픽셀 데이터 처리\n    for (var y = 0; y < canvas.height; y++) {\n      for (var x = 0; x < canvas.width; x++) {\n        var i = (y * canvas.width + x) * 4;\n        var r = data[i];\n        var g = data[i + 1];\n        var b = data[i + 2];\n        var a = data[i + 3];\n\n        // 어두운 픽셀만 QR 코드 데이터로 처리\n        var isDark = r < 128 && g < 128 && b < 128 && a > 0;\n        if (isDark) {\n          svgContent += \"<rect x=\\\"\".concat(x, \"\\\" y=\\\"\").concat(y, \"\\\" width=\\\"1\\\" height=\\\"1\\\" fill=\\\"\").concat(this.state.currentOptions.foreground, \"\\\"/>\");\n        }\n      }\n    }\n    svgContent += '</svg>';\n\n    // SVG 다운로드\n    var blob = new Blob([svgContent], {\n      type: 'image/svg+xml'\n    });\n    var url = URL.createObjectURL(blob);\n    var link = document.createElement('a');\n    link.href = url;\n    link.download = filename;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n  }\n};\n\n// 글로벌 네임스페이스에 등록\nif (typeof window !== 'undefined') {\n  window.FileToQR = window.FileToQR || {};\n  window.FileToQR.QRGenerator = QRGenerator;\n\n  // 브라우저 환경에서 직접 로드된 경우에 대한 처리\n  if (typeof document !== 'undefined' && document.readyState !== 'loading') {\n    console.log('QRGenerator 모듈이 직접 로드되었습니다. 자동 초기화를 시도합니다.');\n    setTimeout(function () {\n      // 이미 DOM이 로드되었다면 초기화 시도\n      if (!QRGenerator.state.initialized) {\n        QRGenerator.init().then(function (success) {\n          console.log('QRGenerator 자동 초기화 결과:', success ? '성공' : '실패');\n        });\n      }\n    }, 100);\n  } else if (typeof document !== 'undefined') {\n    // DOM이 아직 로드되지 않았다면 이벤트 리스너 등록\n    document.addEventListener('DOMContentLoaded', function () {\n      console.log('DOM 로드 완료 후 QRGenerator 자동 초기화 시도');\n      if (!QRGenerator.state.initialized) {\n        QRGenerator.init().then(function (success) {\n          console.log('QRGenerator 자동 초기화 결과:', success ? '성공' : '실패');\n        });\n      }\n    });\n  }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (QRGenerator);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///890\n")}}]);