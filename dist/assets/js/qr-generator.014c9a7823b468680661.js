"use strict";(self.webpackChunkfiletoqr=self.webpackChunkfiletoqr||[]).push([[902],{890:()=>{eval("function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return r; }; var t, r = {}, e = Object.prototype, n = e.hasOwnProperty, o = \"function\" == typeof Symbol ? Symbol : {}, i = o.iterator || \"@@iterator\", a = o.asyncIterator || \"@@asyncIterator\", u = o.toStringTag || \"@@toStringTag\"; function c(t, r, e, n) { return Object.defineProperty(t, r, { value: e, enumerable: !n, configurable: !n, writable: !n }); } try { c({}, \"\"); } catch (t) { c = function c(t, r, e) { return t[r] = e; }; } function h(r, e, n, o) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype); return c(a, \"_invoke\", function (r, e, n) { var o = 1; return function (i, a) { if (3 === o) throw Error(\"Generator is already running\"); if (4 === o) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var u = n.delegate; if (u) { var c = d(u, n); if (c) { if (c === f) continue; return c; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (1 === o) throw o = 4, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = 3; var h = s(r, e, n); if (\"normal\" === h.type) { if (o = n.done ? 4 : 2, h.arg === f) continue; return { value: h.arg, done: n.done }; } \"throw\" === h.type && (o = 4, n.method = \"throw\", n.arg = h.arg); } }; }(r, n, new Context(o || [])), !0), a; } function s(t, r, e) { try { return { type: \"normal\", arg: t.call(r, e) }; } catch (t) { return { type: \"throw\", arg: t }; } } r.wrap = h; var f = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var l = {}; c(l, i, function () { return this; }); var p = Object.getPrototypeOf, y = p && p(p(x([]))); y && y !== e && n.call(y, i) && (l = y); var v = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(l); function g(t) { [\"next\", \"throw\", \"return\"].forEach(function (r) { c(t, r, function (t) { return this._invoke(r, t); }); }); } function AsyncIterator(t, r) { function e(o, i, a, u) { var c = s(t[o], t, i); if (\"throw\" !== c.type) { var h = c.arg, f = h.value; return f && \"object\" == _typeof(f) && n.call(f, \"__await\") ? r.resolve(f.__await).then(function (t) { e(\"next\", t, a, u); }, function (t) { e(\"throw\", t, a, u); }) : r.resolve(f).then(function (t) { h.value = t, a(h); }, function (t) { return e(\"throw\", t, a, u); }); } u(c.arg); } var o; c(this, \"_invoke\", function (t, n) { function i() { return new r(function (r, o) { e(t, n, r, o); }); } return o = o ? o.then(i, i) : i(); }, !0); } function d(r, e) { var n = e.method, o = r.i[n]; if (o === t) return e.delegate = null, \"throw\" === n && r.i[\"return\"] && (e.method = \"return\", e.arg = t, d(r, e), \"throw\" === e.method) || \"return\" !== n && (e.method = \"throw\", e.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), f; var i = s(o, r.i, e.arg); if (\"throw\" === i.type) return e.method = \"throw\", e.arg = i.arg, e.delegate = null, f; var a = i.arg; return a ? a.done ? (e[r.r] = a.value, e.next = r.n, \"return\" !== e.method && (e.method = \"next\", e.arg = t), e.delegate = null, f) : a : (e.method = \"throw\", e.arg = new TypeError(\"iterator result is not an object\"), e.delegate = null, f); } function w(t) { this.tryEntries.push(t); } function m(r) { var e = r[4] || {}; e.type = \"normal\", e.arg = t, r[4] = e; } function Context(t) { this.tryEntries = [[-1]], t.forEach(w, this), this.reset(!0); } function x(r) { if (null != r) { var e = r[i]; if (e) return e.call(r); if (\"function\" == typeof r.next) return r; if (!isNaN(r.length)) { var o = -1, a = function e() { for (; ++o < r.length;) if (n.call(r, o)) return e.value = r[o], e.done = !1, e; return e.value = t, e.done = !0, e; }; return a.next = a; } } throw new TypeError(_typeof(r) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, c(v, \"constructor\", GeneratorFunctionPrototype), c(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = c(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), r.isGeneratorFunction = function (t) { var r = \"function\" == typeof t && t.constructor; return !!r && (r === GeneratorFunction || \"GeneratorFunction\" === (r.displayName || r.name)); }, r.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, c(t, u, \"GeneratorFunction\")), t.prototype = Object.create(v), t; }, r.awrap = function (t) { return { __await: t }; }, g(AsyncIterator.prototype), c(AsyncIterator.prototype, a, function () { return this; }), r.AsyncIterator = AsyncIterator, r.async = function (t, e, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(h(t, e, n, o), i); return r.isGeneratorFunction(e) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, g(v), c(v, u, \"Generator\"), c(v, i, function () { return this; }), c(v, \"toString\", function () { return \"[object Generator]\"; }), r.keys = function (t) { var r = Object(t), e = []; for (var n in r) e.unshift(n); return function t() { for (; e.length;) if ((n = e.pop()) in r) return t.value = n, t.done = !1, t; return t.done = !0, t; }; }, r.values = x, Context.prototype = { constructor: Context, reset: function reset(r) { if (this.prev = this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(m), !r) for (var e in this) \"t\" === e.charAt(0) && n.call(this, e) && !isNaN(+e.slice(1)) && (this[e] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0][4]; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(r) { if (this.done) throw r; var e = this; function n(t) { a.type = \"throw\", a.arg = r, e.next = t; } for (var o = e.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i[4], u = this.prev, c = i[1], h = i[2]; if (-1 === i[0]) return n(\"end\"), !1; if (!c && !h) throw Error(\"try statement without catch or finally\"); if (null != i[0] && i[0] <= u) { if (u < c) return this.method = \"next\", this.arg = t, n(c), !0; if (u < h) return n(h), !1; } } }, abrupt: function abrupt(t, r) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var n = this.tryEntries[e]; if (n[0] > -1 && n[0] <= this.prev && this.prev < n[2]) { var o = n; break; } } o && (\"break\" === t || \"continue\" === t) && o[0] <= r && r <= o[2] && (o = null); var i = o ? o[4] : {}; return i.type = t, i.arg = r, o ? (this.method = \"next\", this.next = o[2], f) : this.complete(i); }, complete: function complete(t, r) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && r && (this.next = r), f; }, finish: function finish(t) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var e = this.tryEntries[r]; if (e[2] === t) return this.complete(e[4], e[3]), m(e), f; } }, \"catch\": function _catch(t) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var e = this.tryEntries[r]; if (e[0] === t) { var n = e[4]; if (\"throw\" === n.type) { var o = n.arg; m(e); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(r, e, n) { return this.delegate = { i: x(r), r: e, n: n }, \"next\" === this.method && (this.arg = t), f; } }, r; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\n/**\n * qr-generator.js - FileToQR QR 코드 생성 모듈\n * 버전: 1.0.0\n * 최종 업데이트: 2025-06-15\n * \n * 이 모듈은 다양한 콘텐츠로 QR 코드를 생성하는 기능을 제공합니다:\n * - URL, 텍스트, 연락처 정보 등을 QR 코드로 변환\n * - 색상, 크기, 로고 등 커스터마이징 옵션\n * - 생성된 QR 코드 다운로드 (PNG, SVG, PDF)\n */\n\n// 로컬 QR 코드 라이브러리 파일 경로 시도 목록\nvar QR_LIB_PATHS = ['assets/js/vendor/qrcode.min.js', '/assets/js/vendor/qrcode.min.js', './assets/js/vendor/qrcode.min.js', '../js/vendor/qrcode.min.js', '../../assets/js/vendor/qrcode.min.js'];\n\n// QR 코드 생성 라이브러리 임포트 (QRCode.js 사용)\nvar importQRCodeLibrary = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n    return _regeneratorRuntime().wrap(function _callee2$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          if (!window.QRCode) {\n            _context3.next = 3;\n            break;\n          }\n          console.log('QRCode 라이브러리가 이미 전역 객체에 있습니다.');\n          return _context3.abrupt(\"return\", window.QRCode);\n        case 3:\n          _context3.prev = 3;\n          // QRCode 라이브러리 번들에서 가져오기 또는 CDN에서 로드\n          console.log('QRCode 라이브러리 로드 시도');\n\n          // 첫 번째 방법: 글로벌 스크립트 태그에서 로드된 경우\n          if (!(typeof QRCode !== 'undefined')) {\n            _context3.next = 9;\n            break;\n          }\n          console.log('QRCode가 글로벌 스코프에서 발견되었습니다.');\n          window.QRCode = QRCode;\n          return _context3.abrupt(\"return\", QRCode);\n        case 9:\n          return _context3.abrupt(\"return\", new Promise(/*#__PURE__*/function () {\n            var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(resolve, reject) {\n              var localPathFound, _loop, _i, _QR_LIB_PATHS, loadFromCDN;\n              return _regeneratorRuntime().wrap(function _callee$(_context2) {\n                while (1) switch (_context2.prev = _context2.next) {\n                  case 0:\n                    loadFromCDN = function _loadFromCDN() {\n                      var script = document.createElement('script');\n                      script.src = 'https://cdn.jsdelivr.net/npm/qrcode@1.5.3/build/qrcode.min.js';\n                      script.onload = function () {\n                        console.log('QRCode 라이브러리 CDN에서 로드 성공');\n                        window.QRCode = QRCode;\n                        resolve(QRCode);\n                      };\n                      script.onerror = function (error) {\n                        console.error('QRCode 라이브러리 로드 실패, 백업 CDN 시도:', error);\n\n                        // 백업 CDN 시도\n                        var backupScript = document.createElement('script');\n                        backupScript.src = 'https://cdn.rawgit.com/davidshimjs/qrcodejs/gh-pages/qrcode.min.js';\n                        backupScript.onload = function () {\n                          console.log('QRCode 라이브러리 백업 CDN에서 로드 성공');\n                          resolve(window.QRCode);\n                        };\n                        backupScript.onerror = function () {\n                          // 최종 백업: 인라인 기본 QR 코드 생성기 제공\n                          console.error('모든 QRCode 라이브러리 로드 실패, 내장 QR 생성기 사용');\n\n                          // 간단한 QR 코드 생성 API 제공\n                          window.QRCode = {\n                            toCanvas: function toCanvas(canvas, text, options) {\n                              var ctx = canvas.getContext('2d');\n                              ctx.fillStyle = (options === null || options === void 0 ? void 0 : options.colorLight) || '#FFFFFF';\n                              ctx.fillRect(0, 0, canvas.width, canvas.height);\n                              ctx.fillStyle = (options === null || options === void 0 ? void 0 : options.colorDark) || '#000000';\n                              ctx.font = 'bold 14px Arial';\n                              ctx.textAlign = 'center';\n                              ctx.fillText('QR 코드 생성 실패', canvas.width / 2, canvas.height / 2 - 20);\n                              ctx.font = '12px Arial';\n                              ctx.fillText('라이브러리를 로드할 수 없습니다', canvas.width / 2, canvas.height / 2 + 10);\n\n                              // 간단한 QR 코드처럼 보이는 패턴 그리기\n                              ctx.fillRect(canvas.width / 4, canvas.height / 4, 20, 20);\n                              ctx.fillRect(canvas.width * 3 / 4 - 20, canvas.height / 4, 20, 20);\n                              ctx.fillRect(canvas.width / 4, canvas.height * 3 / 4 - 20, 20, 20);\n                              return Promise.resolve();\n                            },\n                            CorrectLevel: {\n                              L: 1,\n                              M: 0,\n                              Q: 3,\n                              H: 2\n                            }\n                          };\n                          resolve(window.QRCode);\n                        };\n                        document.head.appendChild(backupScript);\n                      };\n                      document.head.appendChild(script);\n                    };\n                    // 로컬 파일이 있는지 확인 - 여러 경로 시도\n                    localPathFound = false;\n                    _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop() {\n                      var path, response, script;\n                      return _regeneratorRuntime().wrap(function _loop$(_context) {\n                        while (1) switch (_context.prev = _context.next) {\n                          case 0:\n                            path = _QR_LIB_PATHS[_i];\n                            _context.prev = 1;\n                            console.log(\"\\uB85C\\uCEEC \\uACBD\\uB85C \\uC2DC\\uB3C4: \".concat(path));\n                            _context.next = 5;\n                            return fetch(path, {\n                              method: 'HEAD'\n                            });\n                          case 5:\n                            response = _context.sent;\n                            if (!response.ok) {\n                              _context.next = 15;\n                              break;\n                            }\n                            console.log(\"\\uB85C\\uCEEC QRCode \\uB77C\\uC774\\uBE0C\\uB7EC\\uB9AC \\uD30C\\uC77C \\uBC1C\\uACAC (\".concat(path, \"), \\uB85C\\uB4DC \\uC911...\"));\n                            localPathFound = true;\n                            script = document.createElement('script');\n                            script.src = path;\n                            script.onload = function () {\n                              console.log('로컬 QRCode 라이브러리 로드 성공');\n                              window.QRCode = QRCode;\n                              resolve(QRCode);\n                            };\n                            script.onerror = function (error) {\n                              console.warn(\"\\uB85C\\uCEEC QRCode \\uB77C\\uC774\\uBE0C\\uB7EC\\uB9AC \\uD30C\\uC77C \\uB85C\\uB4DC \\uC2E4\\uD328 (\".concat(path, \"):\"), error);\n                              // 다음 경로 시도 대신 CDN으로 넘어감\n                              loadFromCDN();\n                            };\n                            document.head.appendChild(script);\n\n                            // 로컬 파일을 찾았으므로 루프 중단\n                            return _context.abrupt(\"return\", 1);\n                          case 15:\n                            _context.next = 20;\n                            break;\n                          case 17:\n                            _context.prev = 17;\n                            _context.t0 = _context[\"catch\"](1);\n                            console.warn(\"\\uB85C\\uCEEC \\uACBD\\uB85C \\uD655\\uC778 \\uC2E4\\uD328 (\".concat(path, \"):\"), _context.t0);\n                          case 20:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }, _loop, null, [[1, 17]]);\n                    });\n                    _i = 0, _QR_LIB_PATHS = QR_LIB_PATHS;\n                  case 4:\n                    if (!(_i < _QR_LIB_PATHS.length)) {\n                      _context2.next = 11;\n                      break;\n                    }\n                    return _context2.delegateYield(_loop(), \"t0\", 6);\n                  case 6:\n                    if (!_context2.t0) {\n                      _context2.next = 8;\n                      break;\n                    }\n                    return _context2.abrupt(\"break\", 11);\n                  case 8:\n                    _i++;\n                    _context2.next = 4;\n                    break;\n                  case 11:\n                    // 로컬 파일을 찾지 못했으면 CDN에서 로드\n                    if (!localPathFound) {\n                      console.log('로컬 QRCode 라이브러리 없음, CDN 시도...');\n                      loadFromCDN();\n                    }\n\n                    // CDN에서 로드하는 함수\n                  case 12:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }, _callee);\n            }));\n            return function (_x, _x2) {\n              return _ref2.apply(this, arguments);\n            };\n          }()));\n        case 12:\n          _context3.prev = 12;\n          _context3.t0 = _context3[\"catch\"](3);\n          console.error('QRCode 라이브러리 로드 중 오류 발생:', _context3.t0);\n          throw _context3.t0;\n        case 16:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee2, null, [[3, 12]]);\n  }));\n  return function importQRCodeLibrary() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\n// QR 코드 생성기 모듈\nvar QRGenerator = {\n  // 내부 상태\n  state: {\n    initialized: false,\n    qrLibrary: null,\n    currentOptions: {\n      content: '',\n      type: 'text',\n      foreground: '#000000',\n      background: '#FFFFFF',\n      size: 256,\n      margin: 4,\n      errorCorrectionLevel: 'M',\n      logo: null\n    },\n    generatedQR: null\n  },\n  /**\n   * 모듈 초기화\n   * @returns {Promise<boolean>} 초기화 성공 여부\n   */\n  init: function init() {\n    var _this = this;\n    return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n      return _regeneratorRuntime().wrap(function _callee3$(_context4) {\n        while (1) switch (_context4.prev = _context4.next) {\n          case 0:\n            if (!_this.state.initialized) {\n              _context4.next = 3;\n              break;\n            }\n            console.log('QRGenerator가 이미 초기화되어 있습니다.');\n            return _context4.abrupt(\"return\", true);\n          case 3:\n            _context4.prev = 3;\n            console.log('QR 코드 생성기 초기화 시작...');\n\n            // QR 코드 라이브러리 로드\n            console.log('QR 코드 라이브러리 로드 시도');\n            _context4.next = 8;\n            return importQRCodeLibrary();\n          case 8:\n            _this.state.qrLibrary = _context4.sent;\n            console.log('QR 코드 라이브러리 로드 성공:', _this.state.qrLibrary);\n\n            // UI 요소 초기화\n            console.log('UI 요소 초기화 시작');\n            _this._initUI();\n\n            // 이벤트 리스너 등록\n            console.log('이벤트 리스너 등록 시작');\n            _this._registerEventListeners();\n            _this.state.initialized = true;\n            console.log('QR 코드 생성기 초기화 완료. 상태:', _this.state);\n            return _context4.abrupt(\"return\", true);\n          case 19:\n            _context4.prev = 19;\n            _context4.t0 = _context4[\"catch\"](3);\n            console.error('QR 코드 생성기 초기화 중 에러 발생:', _context4.t0);\n            // 에러 상세 추적\n            console.error('스택 트레이스:', _context4.t0.stack);\n            console.error('에러 발생 시 모듈 상태:', JSON.stringify(_this.state));\n            return _context4.abrupt(\"return\", false);\n          case 25:\n          case \"end\":\n            return _context4.stop();\n        }\n      }, _callee3, null, [[3, 19]]);\n    }))();\n  },\n  /**\n   * QR 코드 생성 (공개 메서드)\n   * 폼에서 데이터를 수집하여 QR 코드 생성\n   */\n  generateQRCode: function generateQRCode() {\n    console.log('QRGenerator.generateQRCode 호출됨');\n\n    // 상태 확인\n    if (!this.state.initialized) {\n      console.error('QRGenerator가 초기화되지 않았습니다. init() 먼저 호출하세요.');\n      return;\n    }\n    console.log('QR 코드 생성 시작, 현재 상태:', this.state);\n    this._handleFormSubmit();\n  },\n  /**\n     * QR 코드 다운로드 (공개 메서드)\n     * @param {string} format - 다운로드 형식 (png, svg, jpeg)\n     */\n  downloadQRCode: function downloadQRCode(format) {\n    console.log(\"QRGenerator.downloadQRCode \\uD638\\uCD9C\\uB428: \".concat(format));\n\n    // 상태 확인\n    if (!this.state.initialized) {\n      console.error('QRGenerator가 초기화되지 않았습니다. init() 먼저 호출하세요.');\n      return;\n    }\n    if (!this.state.generatedQR) {\n      console.error('생성된 QR 코드가 없습니다. generateQRCode()를 먼저 호출하세요.');\n      return;\n    }\n    this._downloadQRCode(format);\n  },\n  /**\n   * UI 요소 초기화\n   * @private\n   */\n  _initUI: function _initUI() {\n    var _this2 = this;\n    // UI 요소가 로드되기를 기다림\n    var _checkElements = function checkElements() {\n      var qrForm = document.getElementById('qr-form');\n      var contentInput = document.getElementById('qr-content');\n      var qrPreview = document.getElementById('qr-preview');\n      if (!qrForm || !contentInput || !qrPreview) {\n        // DOM 요소가 아직 없으면 100ms 후 다시 시도\n        setTimeout(_checkElements, 100);\n        return;\n      }\n\n      // URL에서 초기 내용 가져오기\n      var queryParams = new URLSearchParams(window.location.search);\n      var initialContent = queryParams.get('content') || '';\n      var initialType = queryParams.get('type') || 'text';\n      if (initialContent) {\n        contentInput.value = initialContent;\n        _this2.state.currentOptions.content = initialContent;\n        _this2.state.currentOptions.type = initialType;\n\n        // URL 파라미터가 있으면 자동으로 QR 코드 생성\n        _this2._generateQRCode();\n      }\n\n      // 색상 선택기 초기화\n      var fgColorPicker = document.getElementById('qr-foreground');\n      var bgColorPicker = document.getElementById('qr-background');\n      if (fgColorPicker) fgColorPicker.value = _this2.state.currentOptions.foreground;\n      if (bgColorPicker) bgColorPicker.value = _this2.state.currentOptions.background;\n\n      // 크기 슬라이더 초기화\n      var sizeSlider = document.getElementById('qr-size');\n      if (sizeSlider) {\n        sizeSlider.value = _this2.state.currentOptions.size;\n        var sizeValue = document.getElementById('qr-size-value');\n        if (sizeValue) sizeValue.textContent = \"\".concat(_this2.state.currentOptions.size, \"px\");\n      }\n\n      // 여백 슬라이더 초기화\n      var marginSlider = document.getElementById('qr-margin');\n      if (marginSlider) {\n        marginSlider.value = _this2.state.currentOptions.margin;\n        var marginValue = document.getElementById('qr-margin-value');\n        if (marginValue) marginValue.textContent = _this2.state.currentOptions.margin;\n      }\n\n      // 오류 수정 레벨 선택기 초기화\n      var ecLevelSelect = document.getElementById('qr-error-correction');\n      if (ecLevelSelect) ecLevelSelect.value = _this2.state.currentOptions.errorCorrectionLevel;\n    };\n    _checkElements();\n  },\n  /**\n     * 이벤트 리스너 등록\n     * @private\n     */\n  _registerEventListeners: function _registerEventListeners() {\n    var _this3 = this;\n    document.addEventListener('DOMContentLoaded', function () {\n      // QR 코드 생성 폼\n      var qrForm = document.getElementById('qr-form');\n      if (qrForm) {\n        qrForm.addEventListener('submit', function (e) {\n          e.preventDefault();\n          _this3._handleFormSubmit();\n        });\n      }\n\n      // 내용 타입 변경\n      var typeSelector = document.getElementById('qr-type');\n      if (typeSelector) {\n        typeSelector.addEventListener('change', function () {\n          _this3._updateContentPlaceholder();\n        });\n      }\n\n      // 색상 변경\n      var fgColorPicker = document.getElementById('qr-foreground');\n      var bgColorPicker = document.getElementById('qr-background');\n      if (fgColorPicker) {\n        fgColorPicker.addEventListener('change', function () {\n          _this3.state.currentOptions.foreground = fgColorPicker.value;\n          if (_this3.state.generatedQR) _this3._generateQRCode();\n        });\n      }\n      if (bgColorPicker) {\n        bgColorPicker.addEventListener('change', function () {\n          _this3.state.currentOptions.background = bgColorPicker.value;\n          if (_this3.state.generatedQR) _this3._generateQRCode();\n        });\n      }\n\n      // 크기 변경\n      var sizeSlider = document.getElementById('qr-size');\n      if (sizeSlider) {\n        sizeSlider.addEventListener('input', function () {\n          _this3.state.currentOptions.size = parseInt(sizeSlider.value, 10);\n          var sizeValue = document.getElementById('qr-size-value');\n          if (sizeValue) sizeValue.textContent = \"\".concat(_this3.state.currentOptions.size, \"px\");\n          if (_this3.state.generatedQR) _this3._generateQRCode();\n        });\n      }\n\n      // 여백 변경\n      var marginSlider = document.getElementById('qr-margin');\n      if (marginSlider) {\n        marginSlider.addEventListener('input', function () {\n          _this3.state.currentOptions.margin = parseInt(marginSlider.value, 10);\n          var marginValue = document.getElementById('qr-margin-value');\n          if (marginValue) marginValue.textContent = _this3.state.currentOptions.margin;\n          if (_this3.state.generatedQR) _this3._generateQRCode();\n        });\n      }\n\n      // 오류 수정 레벨 변경\n      var ecLevelSelect = document.getElementById('qr-error-correction');\n      if (ecLevelSelect) {\n        ecLevelSelect.addEventListener('change', function () {\n          _this3.state.currentOptions.errorCorrectionLevel = ecLevelSelect.value;\n          if (_this3.state.generatedQR) _this3._generateQRCode();\n        });\n      }\n\n      // 로고 이미지 변경\n      var logoInput = document.getElementById('qr-logo');\n      if (logoInput) {\n        logoInput.addEventListener('change', function (e) {\n          var file = e.target.files[0];\n          if (file) {\n            var reader = new FileReader();\n            reader.onload = function (e) {\n              _this3.state.currentOptions.logo = e.target.result;\n              if (_this3.state.generatedQR) _this3._generateQRCode();\n            };\n            reader.readAsDataURL(file);\n          } else {\n            _this3.state.currentOptions.logo = null;\n            if (_this3.state.generatedQR) _this3._generateQRCode();\n          }\n        });\n      }\n\n      // 다운로드 버튼\n      var pngDownloadBtn = document.getElementById('download-png');\n      var svgDownloadBtn = document.getElementById('download-svg');\n      if (pngDownloadBtn) {\n        pngDownloadBtn.addEventListener('click', function () {\n          _this3._downloadQRCode('png');\n        });\n      }\n      if (svgDownloadBtn) {\n        svgDownloadBtn.addEventListener('click', function () {\n          _this3._downloadQRCode('svg');\n        });\n      }\n    });\n  },\n  /**\n     * 콘텐츠 타입에 따른 입력 플레이스홀더 업데이트\n     * @private\n   */\n  _updateContentPlaceholder: function _updateContentPlaceholder() {\n    var typeSelector = document.getElementById('qr-type');\n    var contentInput = document.getElementById('qr-content');\n    if (!typeSelector || !contentInput) return;\n    var type = typeSelector.value;\n    var placeholder = '';\n    switch (type) {\n      case 'url':\n        placeholder = 'https://example.com';\n        break;\n      case 'email':\n        placeholder = 'mailto:example@example.com';\n        break;\n      case 'tel':\n        placeholder = 'tel:+821012345678';\n        break;\n      case 'sms':\n        placeholder = 'sms:+821012345678?body=Hello';\n        break;\n      case 'wifi':\n        placeholder = 'WIFI:S:NetworkName;T:WPA;P:Password;;';\n        break;\n      case 'geo':\n        placeholder = 'geo:37.5665,126.9780';\n        break;\n      case 'vcard':\n        placeholder = 'BEGIN:VCARD\\nVERSION:3.0\\nN:홍길동\\nTEL:+821012345678\\nEMAIL:example@example.com\\nEND:VCARD';\n        break;\n      default:\n        placeholder = '텍스트를 입력하세요';\n    }\n    contentInput.placeholder = placeholder;\n  },\n  /**\n   * 폼 제출 핸들러\n   * @private\n   */\n  _handleFormSubmit: function _handleFormSubmit() {\n    console.log('QRGenerator._handleFormSubmit 호출됨');\n\n    // URL 또는 텍스트 입력 필드 확인\n    var contentInputs = {\n      'url': document.getElementById('url-input'),\n      'text': document.getElementById('text-input'),\n      'email': document.getElementById('email-address'),\n      'phone': document.getElementById('phone-input'),\n      'vcard': document.getElementById('vcard-name')\n    };\n\n    // 활성화된 입력 폼 찾기\n    var activeForm = document.querySelector('.content-form.active');\n    console.log('활성화된 입력 폼:', activeForm === null || activeForm === void 0 ? void 0 : activeForm.id);\n    if (!activeForm) {\n      console.error('활성화된 입력 폼을 찾을 수 없습니다.');\n      return;\n    }\n\n    // 폼 유형 결정\n    var formType = activeForm.id.split('-')[0]; // 'url-form' -> 'url'\n    console.log('결정된 폼 유형:', formType);\n\n    // 해당 유형의 입력 필드 확인\n    var contentInput = contentInputs[formType];\n    if (!contentInput) {\n      console.error(\"\\uD3FC \\uC720\\uD615 \".concat(formType, \"\\uC5D0 \\uB300\\uD55C \\uC785\\uB825 \\uD544\\uB4DC\\uB97C \\uCC3E\\uC744 \\uC218 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"));\n      return;\n    }\n    var content = contentInput.value.trim();\n    console.log('입력된 콘텐츠:', content);\n    if (!content) {\n      console.warn('QR 코드 내용이 비어 있습니다.');\n      alert('QR 코드 내용을 입력해주세요.');\n      return;\n    }\n\n    // 상태 업데이트\n    this.state.currentOptions.content = content;\n    this.state.currentOptions.type = formType;\n    console.log('QR 코드 옵션 업데이트:', this.state.currentOptions);\n\n    // QR 코드 생성\n    this._generateQRCode();\n  },\n  /**\n     * QR 코드 생성\n     * @private\n     */\n  _generateQRCode: function _generateQRCode() {\n    var _this4 = this;\n    return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n      var qrPreview, downloadBtns, formattedContent, options, canvas;\n      return _regeneratorRuntime().wrap(function _callee4$(_context5) {\n        while (1) switch (_context5.prev = _context5.next) {\n          case 0:\n            console.log('QRGenerator._generateQRCode 호출됨');\n            qrPreview = document.getElementById('qr-preview');\n            downloadBtns = document.getElementById('download-options');\n            if (qrPreview) {\n              _context5.next = 6;\n              break;\n            }\n            console.error('QR 코드 프리뷰 컨테이너를 찾을 수 없습니다.');\n            return _context5.abrupt(\"return\");\n          case 6:\n            _context5.prev = 6;\n            // 로딩 상태 표시\n            console.log('QR 코드 생성 중... 로딩 상태 표시');\n            qrPreview.innerHTML = \"\\n        <div class=\\\"flex justify-center items-center h-64\\\">\\n          <div class=\\\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-600\\\"></div>\\n        </div>\\n      \";\n\n            // 내용 포맷팅\n            console.log('내용 포맷팅 시작');\n            formattedContent = _this4._formatContent();\n            console.log('포맷팅된 내용:', formattedContent);\n\n            // QR 코드 옵션 설정\n            options = {\n              text: formattedContent,\n              width: _this4.state.currentOptions.size,\n              height: _this4.state.currentOptions.size,\n              colorDark: _this4.state.currentOptions.foreground,\n              colorLight: _this4.state.currentOptions.background,\n              margin: _this4.state.currentOptions.margin,\n              correctLevel: _this4._getErrorCorrectionLevel()\n            };\n            console.log('QR 코드 옵션:', options);\n\n            // QR 코드 라이브러리 확인\n            if (_this4.state.qrLibrary) {\n              _context5.next = 17;\n              break;\n            }\n            console.error('QR 코드 라이브러리가 로드되지 않았습니다.');\n            throw new Error('QR 코드 라이브러리가 초기화되지 않았습니다.');\n          case 17:\n            // QR 코드 생성 (캔버스)\n            console.log('QR 코드 캔버스 생성 시작');\n            canvas = document.createElement('canvas'); // 라이브러리 메서드 확인\n            if (!(typeof _this4.state.qrLibrary.toCanvas !== 'function')) {\n              _context5.next = 23;\n              break;\n            }\n            console.error('QR 라이브러리 toCanvas 메서드를 찾을 수 없습니다.');\n            console.log('QR 라이브러리 구조:', _this4.state.qrLibrary);\n            throw new Error('QR 코드 라이브러리가 필요한 메서드를 지원하지 않습니다.');\n          case 23:\n            _context5.next = 25;\n            return _this4.state.qrLibrary.toCanvas(canvas, formattedContent, options);\n          case 25:\n            console.log('QR 코드 캔버스 생성 완료');\n\n            // 로고 추가 (있는 경우)\n            if (_this4.state.currentOptions.logo) {\n              console.log('로고 추가 시작');\n              _this4._addLogoToCanvas(canvas);\n            } else {\n              // 결과 표시\n              console.log('QR 코드 프리뷰 표시');\n              qrPreview.innerHTML = '';\n              qrPreview.appendChild(canvas);\n\n              // 다운로드 버튼 표시\n              if (downloadBtns) {\n                console.log('다운로드 버튼 표시');\n                downloadBtns.style.display = 'block';\n              }\n\n              // 생성된 QR 코드 저장\n              _this4.state.generatedQR = canvas;\n              console.log('생성된 QR 코드가 상태에 저장됨');\n            }\n            _context5.next = 34;\n            break;\n          case 29:\n            _context5.prev = 29;\n            _context5.t0 = _context5[\"catch\"](6);\n            console.error('QR 코드 생성 중 오류 발생:', _context5.t0);\n            console.error('스택 트레이스:', _context5.t0.stack);\n            qrPreview.innerHTML = \"\\n        <div class=\\\"p-4 bg-red-100 rounded-lg text-red-800\\\">\\n          <h3 class=\\\"font-medium\\\">QR \\uCF54\\uB4DC \\uC0DD\\uC131 \\uC2E4\\uD328</h3>\\n          <p>\".concat(_context5.t0.message, \"</p>\\n          <div class=\\\"mt-2 text-xs bg-red-50 p-2 rounded-md overflow-auto\\\">\\n            <pre>\").concat(_context5.t0.stack || '스택 트레이스 없음', \"</pre>\\n          </div>\\n        </div>\\n      \");\n          case 34:\n          case \"end\":\n            return _context5.stop();\n        }\n      }, _callee4, null, [[6, 29]]);\n    }))();\n  },\n  /**\n   * 내용 타입에 따른 포맷팅\n   * @returns {string} 포맷팅된 내용\n   * @private\n   */\n  _formatContent: function _formatContent() {\n    var content = this.state.currentOptions.content;\n    var type = this.state.currentOptions.type;\n    if (!content) return '';\n    switch (type) {\n      case 'url':\n        if (!content.startsWith('http://') && !content.startsWith('https://')) {\n          return \"https://\".concat(content);\n        }\n        return content;\n      case 'email':\n        if (!content.startsWith('mailto:')) {\n          return \"mailto:\".concat(content);\n        }\n        return content;\n      case 'tel':\n        if (!content.startsWith('tel:')) {\n          return \"tel:\".concat(content);\n        }\n        return content;\n      case 'sms':\n        if (!content.startsWith('sms:')) {\n          return \"sms:\".concat(content);\n        }\n        return content;\n      case 'wifi':\n        if (!content.startsWith('WIFI:')) {\n          // 기본 WiFi 형식 확인\n          if (content.includes(';') && content.includes(':')) {\n            return content;\n          }\n          // 간단한 입력을 WiFi 형식으로 변환\n          return \"WIFI:S:\".concat(content, \";T:WPA;P:password;;\");\n        }\n        return content;\n      case 'geo':\n        if (!content.startsWith('geo:')) {\n          return \"geo:\".concat(content);\n        }\n        return content;\n      case 'vcard':\n        if (!content.startsWith('BEGIN:VCARD')) {\n          return \"BEGIN:VCARD\\nVERSION:3.0\\nN:\".concat(content, \"\\nEND:VCARD\");\n        }\n        return content;\n      default:\n        return content;\n    }\n  },\n  /**\n   * 오류 수정 레벨 반환\n   * @returns {number} QRCode.js 오류 수정 레벨\n   * @private\n   */\n  _getErrorCorrectionLevel: function _getErrorCorrectionLevel() {\n    switch (this.state.currentOptions.errorCorrectionLevel) {\n      case 'L':\n        return this.state.qrLibrary.CorrectLevel.L;\n      // 약 7%\n      case 'M':\n        return this.state.qrLibrary.CorrectLevel.M;\n      // 약 15%\n      case 'Q':\n        return this.state.qrLibrary.CorrectLevel.Q;\n      // 약 25%\n      case 'H':\n        return this.state.qrLibrary.CorrectLevel.H;\n      // 약 30%\n      default:\n        return this.state.qrLibrary.CorrectLevel.M;\n    }\n  },\n  /**\n   * 캔버스에 로고 추가\n   * @param {HTMLCanvasElement} canvas - QR 코드 캔버스\n   * @private\n   */\n  _addLogoToCanvas: function _addLogoToCanvas(canvas) {\n    var _this5 = this;\n    var qrPreview = document.getElementById('qr-preview');\n    var downloadBtns = document.getElementById('download-buttons');\n    if (!qrPreview) return;\n    var ctx = canvas.getContext('2d');\n    var size = this.state.currentOptions.size;\n    var logoImg = new Image();\n    logoImg.onload = function () {\n      // 로고 크기 계산 (QR 코드 크기의 약 20%)\n      var logoSize = size * 0.2;\n      var logoX = (size - logoSize) / 2;\n      var logoY = (size - logoSize) / 2;\n\n      // 로고 배경 (흰색 원)\n      ctx.fillStyle = '#FFFFFF';\n      ctx.beginPath();\n      ctx.arc(size / 2, size / 2, logoSize / 1.8, 0, 2 * Math.PI);\n      ctx.fill();\n\n      // 로고 그리기\n      ctx.drawImage(logoImg, logoX, logoY, logoSize, logoSize);\n\n      // 결과 표시\n      qrPreview.innerHTML = '';\n      qrPreview.appendChild(canvas);\n\n      // 다운로드 버튼 표시\n      if (downloadBtns) downloadBtns.classList.remove('hidden');\n\n      // 생성된 QR 코드 저장\n      _this5.state.generatedQR = canvas;\n    };\n    logoImg.onerror = function () {\n      console.error('로고 이미지 로드 실패');\n\n      // 로고 없이 결과 표시\n      qrPreview.innerHTML = '';\n      qrPreview.appendChild(canvas);\n\n      // 다운로드 버튼 표시\n      if (downloadBtns) downloadBtns.classList.remove('hidden');\n\n      // 생성된 QR 코드 저장\n      _this5.state.generatedQR = canvas;\n    };\n    logoImg.src = this.state.currentOptions.logo;\n  },\n  /**\n   * QR 코드 다운로드\n   * @param {string} format - 다운로드 형식 ('png', 'svg')\n   * @private\n   */\n  _downloadQRCode: function _downloadQRCode(format) {\n    if (!this.state.generatedQR) {\n      alert('먼저 QR 코드를 생성해주세요.');\n      return;\n    }\n    var canvas = this.state.generatedQR;\n    var content = this.state.currentOptions.content;\n\n    // 파일명 생성\n    var filename = \"qrcode_\".concat(new Date().getTime());\n    if (format === 'png') {\n      var dataUrl = canvas.toDataURL('image/png');\n      var link = document.createElement('a');\n      link.href = dataUrl;\n      link.download = \"\".concat(filename, \".png\");\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    } else if (format === 'svg') {\n      // 캔버스를 SVG로 변환\n      this._canvasToSVG(canvas, \"\".concat(filename, \".svg\"));\n    }\n  },\n  /**\n   * 캔버스를 SVG로 변환\n   * @param {HTMLCanvasElement} canvas - 변환할 캔버스\n   * @param {string} filename - 다운로드 파일명\n   * @private\n   */\n  _canvasToSVG: function _canvasToSVG(canvas, filename) {\n    var ctx = canvas.getContext('2d');\n    var imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n    var data = imageData.data;\n    var svgContent = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 \".concat(canvas.width, \" \").concat(canvas.height, \"\\\" width=\\\"\").concat(canvas.width, \"\\\" height=\\\"\").concat(canvas.height, \"\\\">\");\n\n    // 배경 추가\n    svgContent += \"<rect width=\\\"\".concat(canvas.width, \"\\\" height=\\\"\").concat(canvas.height, \"\\\" fill=\\\"\").concat(this.state.currentOptions.background, \"\\\"/>\");\n\n    // 픽셀 데이터 처리\n    for (var y = 0; y < canvas.height; y++) {\n      for (var x = 0; x < canvas.width; x++) {\n        var i = (y * canvas.width + x) * 4;\n        var r = data[i];\n        var g = data[i + 1];\n        var b = data[i + 2];\n        var a = data[i + 3];\n\n        // 어두운 픽셀만 QR 코드 데이터로 처리\n        var isDark = r < 128 && g < 128 && b < 128 && a > 0;\n        if (isDark) {\n          svgContent += \"<rect x=\\\"\".concat(x, \"\\\" y=\\\"\").concat(y, \"\\\" width=\\\"1\\\" height=\\\"1\\\" fill=\\\"\").concat(this.state.currentOptions.foreground, \"\\\"/>\");\n        }\n      }\n    }\n    svgContent += '</svg>';\n\n    // SVG 다운로드\n    var blob = new Blob([svgContent], {\n      type: 'image/svg+xml'\n    });\n    var url = URL.createObjectURL(blob);\n    var link = document.createElement('a');\n    link.href = url;\n    link.download = filename;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n  }\n};\n\n// 글로벌 네임스페이스에 등록\nif (typeof window !== 'undefined') {\n  window.FileToQR = window.FileToQR || {};\n  window.FileToQR.QRGenerator = QRGenerator;\n\n  // 브라우저 환경에서 직접 로드된 경우에 대한 처리\n  if (typeof document !== 'undefined' && document.readyState !== 'loading') {\n    console.log('QRGenerator 모듈이 직접 로드되었습니다. 자동 초기화를 시도합니다.');\n    setTimeout(function () {\n      // 이미 DOM이 로드되었다면 초기화 시도\n      if (!QRGenerator.state.initialized) {\n        QRGenerator.init().then(function (success) {\n          console.log('QRGenerator 자동 초기화 결과:', success ? '성공' : '실패');\n        });\n      }\n    }, 100);\n  } else if (typeof document !== 'undefined') {\n    // DOM이 아직 로드되지 않았다면 이벤트 리스너 등록\n    document.addEventListener('DOMContentLoaded', function () {\n      console.log('DOM 로드 완료 후 QRGenerator 자동 초기화 시도');\n      if (!QRGenerator.state.initialized) {\n        QRGenerator.init().then(function (success) {\n          console.log('QRGenerator 자동 초기화 결과:', success ? '성공' : '실패');\n        });\n      }\n    });\n  }\n}\n/* unused harmony default export */ var __WEBPACK_DEFAULT_EXPORT__ = ((/* unused pure expression or super */ null && (QRGenerator)));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///890\n")}},Q=>{var U;U=890,Q(Q.s=U)}]);