"use strict";(self.webpackChunkfiletoqr=self.webpackChunkfiletoqr||[]).push([[704],{950:()=>{eval('\n// UNUSED EXPORTS: default\n\n;// ./assets/js/core/config.js\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n/**\r\n * config.js - FileToQR 애플리케이션 설정\r\n * 버전: 1.1.0\r\n * 최종 업데이트: 2025-07-26\r\n * \r\n * 이 모듈은 애플리케이션 전반에서 사용되는 설정과 상수를 제공합니다.\r\n * - 지원 언어 목록\r\n * - 기본 언어 설정\r\n * - 페이지 경로 정보\r\n * - 기타 앱 상수\r\n */\n\n// 전역 객체 설정\nwindow.FileToQR = window.FileToQR || {};\nwindow.FileToQR.config = window.FileToQR.config || {};\n\n/**\r\n * 애플리케이션 버전\r\n */\nvar APP_VERSION = \'2.0.0\';\n\n/**\r\n * 지원 언어 설정\r\n */\nvar LANGUAGE_CONFIG = {\n  // 지원하는 언어 목록\n  supportedLanguages: [\'ko\', \'en\', \'zh\', \'ja\'],\n  // 기본 언어 (언어를 감지할 수 없는 경우 사용)\n  defaultLanguage: \'ko\',\n  // RTL(오른쪽에서 왼쪽) 언어 목록\n  rtlLanguages: [\'ar\', \'he\']\n};\n\n/**\r\n * 페이지 관련 설정\r\n */\nvar PAGE_CONFIG = {\n  // 기본 페이지 목록 및 HTML 파일명\n  pages: {\n    home: \'index.html\',\n    convert: \'convert.html\',\n    qrcode: \'qrcode.html\',\n    timer: \'timer.html\',\n    help: \'help.html\',\n    contact: \'contact.html\',\n    privacy: \'privacy.html\',\n    terms: \'terms.html\'\n  },\n  // i18n 경로 키와 페이지 매핑\n  i18nKeys: {\n    \'home\': \'urls.home\',\n    \'convert\': \'urls.convert\',\n    \'qrcode\': \'urls.qrcode\',\n    \'timer\': \'urls.timer\',\n    \'help\': \'urls.help\',\n    \'contact\': \'urls.contact\',\n    \'privacy\': \'urls.privacy\',\n    \'terms\': \'urls.terms\'\n  }\n};\n\n/**\r\n * UI 관련 설정\r\n */\nvar UI_CONFIG = {\n  // 링크 표준화 설정\n  linkStandardization: {\n    includeExtension: true\n  },\n  // 로딩 설정\n  loading: {\n    minDisplayTime: 500,\n    // 로딩 표시 최소 시간(ms)\n    fadeOutTime: 300 // 페이드 아웃 시간(ms)\n  }\n};\n\n/**\r\n * 경로 관련 설정\r\n */\nvar PATH_CONFIG = {\n  i18n: \'/assets/i18n/\',\n  components: \'/components/\',\n  partials: \'/components/partials/\',\n  assets: \'/assets/\'\n};\n\n/**\r\n * 저장소 관련 설정\r\n */\nvar STORAGE_CONFIG = {\n  // 로컬 스토리지 키 목록\n  keys: {\n    language: \'fileToQR_lang\',\n    theme: \'fileToQR_theme\',\n    lastVisit: \'fileToQR_lastVisit\'\n  }\n};\n\n// 설정 객체 생성\nvar Config = {\n  APP_VERSION: APP_VERSION,\n  LANGUAGE_CONFIG: LANGUAGE_CONFIG,\n  PAGE_CONFIG: PAGE_CONFIG,\n  UI_CONFIG: UI_CONFIG,\n  PATH_CONFIG: PATH_CONFIG,\n  STORAGE_CONFIG: STORAGE_CONFIG,\n  /**\r\n   * 현재 언어가 RTL 언어인지 확인\r\n   * @param {string} lang - 언어 코드\r\n   * @returns {boolean} RTL 언어 여부\r\n   */\n  isRTL: function isRTL(lang) {\n    return LANGUAGE_CONFIG.rtlLanguages.includes(lang);\n  },\n  /**\r\n   * 지원하는 언어인지 확인\r\n   * @param {string} lang - 언어 코드\r\n   * @returns {boolean} 지원 언어 여부\r\n   */\n  isSupportedLanguage: function isSupportedLanguage(lang) {\n    return LANGUAGE_CONFIG.supportedLanguages.includes(lang);\n  },\n  /**\r\n   * 페이지 ID로 HTML 파일 경로 가져오기\r\n   * @param {string} pageId - 페이지 ID\r\n   * @returns {string} HTML 파일 경로\r\n   */\n  getPagePath: function getPagePath(pageId) {\n    return PAGE_CONFIG.pages[pageId] || null;\n  },\n  /**\r\n   * 페이지 ID로 i18n URL 키 가져오기\r\n   * @param {string} pageId - 페이지 ID\r\n   * @returns {string} i18n URL 키\r\n   */\n  getPageI18nKey: function getPageI18nKey(pageId) {\n    return PAGE_CONFIG.i18nKeys[pageId] || null;\n  },\n  /**\r\n   * 파일 경로에서 페이지 ID 추출\r\n   * @param {string} path - 파일 경로\r\n   * @returns {string|null} 페이지 ID 또는 null\r\n   */\n  getPageIdFromPath: function getPageIdFromPath(path) {\n    var cleanPath = path.endsWith(\'.html\') ? path.slice(0, -5) : path;\n    for (var _i = 0, _Object$entries = Object.entries(PAGE_CONFIG.pages); _i < _Object$entries.length; _i++) {\n      var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n        id = _Object$entries$_i[0],\n        pagePath = _Object$entries$_i[1];\n      var pageCleanPath = pagePath.endsWith(\'.html\') ? pagePath.slice(0, -5) : pagePath;\n      if (cleanPath === pageCleanPath) {\n        return id;\n      }\n    }\n    return null;\n  }\n};\n\n// 전역 객체에 등록\nwindow.FileToQR.config = Config;\n\n// Export for ES modules\n/* harmony default export */ const config = (Config);\n;// ./assets/js/utils/url-utils.js\nfunction _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }\nfunction _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || url_utils_unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return url_utils_arrayLikeToArray(r); }\nfunction url_utils_slicedToArray(r, e) { return url_utils_arrayWithHoles(r) || url_utils_iterableToArrayLimit(r, e) || url_utils_unsupportedIterableToArray(r, e) || url_utils_nonIterableRest(); }\nfunction url_utils_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction url_utils_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction url_utils_arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = url_utils_unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }\nfunction url_utils_unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return url_utils_arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? url_utils_arrayLikeToArray(r, a) : void 0; } }\nfunction url_utils_arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\n/**\r\n * url-utils.js - FileToQR URL 유틸리티\r\n * 버전: 1.3.5\r\n * 최종 업데이트: 2025-07-28\r\n * \r\n * 이 모듈은 URL과 관련된 유틸리티 함수를 제공합니다.\r\n * - URL 매개변수 처리\r\n * - 다국어 URL 경로 처리\r\n * - 내부 페이지 URL 관리\r\n */\n\n\n\n// 전역 객체 설정\nwindow.FileToQR = window.FileToQR || {};\nwindow.FileToQR.utils = window.FileToQR.utils || {};\n\n/**\r\n * URL 유틸리티 모듈\r\n */\nvar UrlUtils = {\n  /**\r\n   * URL 쿼리 매개변수를 객체로 변환\r\n   * @param {string} [url=window.location.href] - 분석할 URL (기본값: 현재 URL)\r\n   * @returns {Object} 쿼리 매개변수 객체\r\n   */\n  getQueryParams: function getQueryParams() {\n    var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.location.href;\n    var params = {};\n    var queryString = url.split(\'?\')[1];\n    if (!queryString) return params;\n    var searchParams = new URLSearchParams(queryString);\n    var _iterator = _createForOfIteratorHelper(searchParams.entries()),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var _step$value = url_utils_slicedToArray(_step.value, 2),\n          key = _step$value[0],\n          value = _step$value[1];\n        params[key] = value;\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    return params;\n  },\n  /**\r\n   * URL에 쿼리 매개변수 추가 또는 업데이트\r\n   * @param {Object} params - 추가할 매개변수 객체\r\n   * @param {string} [url=window.location.href] - 기본 URL\r\n   * @returns {string} 업데이트된 URL\r\n   */\n  updateQueryParams: function updateQueryParams(params) {\n    var url = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : window.location.href;\n    var urlObj = new URL(url);\n    for (var _i = 0, _Object$entries = Object.entries(params); _i < _Object$entries.length; _i++) {\n      var _Object$entries$_i = url_utils_slicedToArray(_Object$entries[_i], 2),\n        key = _Object$entries$_i[0],\n        value = _Object$entries$_i[1];\n      urlObj.searchParams.set(key, value);\n    }\n    return urlObj.toString();\n  },\n  /**\r\n   * URL에서 쿼리 매개변수 제거\r\n   * @param {Array<string>} paramsToRemove - 제거할 매개변수 이름 배열\r\n   * @param {string} [url=window.location.href] - 기본 URL\r\n   * @returns {string} 업데이트된 URL\r\n   */\n  removeQueryParams: function removeQueryParams(paramsToRemove) {\n    var url = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : window.location.href;\n    var urlObj = new URL(url);\n    paramsToRemove.forEach(function (param) {\n      urlObj.searchParams["delete"](param);\n    });\n    return urlObj.toString();\n  },\n  /**\r\n   * URL에서 언어 코드 추출\r\n   * @param {string} [url=window.location.href] - 분석할 URL\r\n   * @returns {string|null} 언어 코드 또는 null (찾지 못한 경우)\r\n   */\n  getLanguageFromUrl: function getLanguageFromUrl() {\n    var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.location.href;\n    try {\n      var urlObj = new URL(url);\n      var pathParts = urlObj.pathname.split(\'/\').filter(function (part) {\n        return part;\n      });\n      var supportedLangs = config.LANGUAGE_CONFIG.supportedLanguages;\n      if (pathParts.length > 0 && supportedLangs.includes(pathParts[0])) {\n        return pathParts[0];\n      }\n      return null;\n    } catch (error) {\n      console.error(\'URL에서 언어 추출 중 오류:\', error);\n      return null;\n    }\n  },\n  /**\r\n   * 현재 URL의 언어 버전 URL 생성\r\n   * @param {string} lang - 언어 코드\r\n   * @param {string} [url=window.location.href] - 기본 URL\r\n   * @returns {string} 언어 버전 URL\r\n   */\n  getLanguageUrl: function getLanguageUrl(lang) {\n    var url = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : window.location.href;\n    try {\n      var urlObj = new URL(url);\n      var pathParts = urlObj.pathname.split(\'/\').filter(function (part) {\n        return part;\n      });\n      var currentLang = this.getLanguageFromUrl(url);\n      var defaultLang = config.LANGUAGE_CONFIG.defaultLanguage;\n\n      // 언어 코드가 지원되지 않는 경우 기본 언어 사용\n      if (!config.isSupportedLanguage(lang)) {\n        console.warn("\\uC9C0\\uC6D0\\uD558\\uC9C0 \\uC54A\\uB294 \\uC5B8\\uC5B4: ".concat(lang, ", \\uAE30\\uBCF8 \\uC5B8\\uC5B4(").concat(defaultLang, ")\\uB85C \\uB300\\uCCB4"));\n        lang = defaultLang;\n      }\n\n      // 새 경로 파트 배열 생성\n      var newPathParts = _toConsumableArray(pathParts);\n\n      // 현재 URL에 언어 코드가 있는 경우\n      if (currentLang) {\n        // 첫 번째 경로 파트를 언어 코드로 교체\n        newPathParts[0] = lang;\n      } else {\n        // 언어 코드가 기본 언어가 아닌 경우, 경로 맨 앞에 추가\n        if (lang !== defaultLang) {\n          newPathParts.unshift(lang);\n        }\n      }\n\n      // 기본 언어로 전환하고 현재 언어가 있는 경우\n      if (lang === defaultLang && currentLang) {\n        // 기본 언어 코드 제거 (첫 번째 경로 파트)\n        newPathParts.shift();\n      }\n\n      // 새 경로 생성\n      urlObj.pathname = \'/\' + newPathParts.join(\'/\');\n      return urlObj.toString();\n    } catch (error) {\n      console.error(\'언어 URL 생성 중 오류:\', error, {\n        lang: lang,\n        url: url,\n        currentLang: this.getLanguageFromUrl(url)\n      });\n      return url; // 오류 발생 시 원래 URL 반환\n    }\n  },\n  /**\r\n   * i18n 다국어 URL을 생성하는 함수\r\n   * @param {string} path - 페이지 경로 (예: \'index.html\', \'convert.html\')\r\n   * @param {string} [lang=null] - 언어 코드 (null이면 현재 언어 사용)\r\n   * @param {Object} [options={}] - 추가 옵션\r\n   * @returns {string} 생성된 URL\r\n   */\n  getI18nUrl: function getI18nUrl(path) {\n    var lang = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    try {\n      var defaultOptions = {\n        absolute: false,\n        defaultLang: config.LANGUAGE_CONFIG.defaultLanguage,\n        useBaseUrl: true\n      };\n      var opts = _objectSpread(_objectSpread({}, defaultOptions), options);\n\n      // 현재 언어 확인 - 우선순위에 따라 결정\n      var currentLang;\n      if (lang) {\n        // 1. 명시적 언어 코드가 제공된 경우\n        currentLang = lang;\n      } else if (window.FileToQR && window.FileToQR.i18n && typeof window.FileToQR.i18n.getCurrentLang === \'function\') {\n        // 2. i18n 모듈에서 현재 언어를 가져올 수 있는 경우\n        currentLang = window.FileToQR.i18n.getCurrentLang();\n      } else {\n        // 3. URL에서 언어를 추출하거나 기본값 사용\n        currentLang = this.getLanguageFromUrl() || opts.defaultLang;\n      }\n\n      // 시작 및 끝 슬래시 제거\n      var cleanPath = path.replace(/^\\/|\\/$/g, \'\');\n      var urlPath;\n\n      // 기본 언어인 경우 언어 경로 없음 (선택적으로 설정 가능)\n      if (currentLang === opts.defaultLang && !opts.alwaysIncludeLang) {\n        urlPath = "/".concat(cleanPath);\n      } else {\n        urlPath = "/".concat(currentLang, "/").concat(cleanPath);\n      }\n\n      // 절대 URL 요청 시\n      if (opts.absolute) {\n        var _baseUrl = window.location.origin;\n        return "".concat(_baseUrl).concat(urlPath);\n      }\n\n      // 기본 URL 사용 여부\n      if (opts.useBaseUrl) {\n        var basePath = this.getBasePath();\n        // 첫 슬래시 제거하여 상대 경로와 연결\n        var relPath = urlPath.replace(/^\\//, \'\');\n        return "".concat(baseUrl).concat(relPath);\n      }\n      return urlPath;\n    } catch (error) {\n      console.error(\'i18n URL 생성 중 오류:\', error, {\n        path: path,\n        lang: lang,\n        options: options\n      });\n      return path; // 오류 발생 시 원래 경로 반환\n    }\n  },\n  /**\r\n   * 페이지 ID로 URL 생성\r\n   * @param {string} pageId - 페이지 ID\r\n   * @param {string} [lang=null] - 언어 코드 (null이면 현재 언어 사용)\r\n   * @param {Object} [options={}] - 추가 옵션\r\n   * @returns {string} 페이지 URL\r\n   */\n  getPageUrl: function getPageUrl(pageId) {\n    var lang = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    try {\n      var pagePath = config.getPagePath(pageId);\n      if (!pagePath) {\n        console.warn("\\uC54C \\uC218 \\uC5C6\\uB294 \\uD398\\uC774\\uC9C0 ID: ".concat(pageId));\n        return \'/\';\n      }\n      return this.getI18nUrl(pagePath, lang, options);\n    } catch (error) {\n      console.error(\'페이지 URL 생성 중 오류:\', error, {\n        pageId: pageId,\n        lang: lang,\n        options: options\n      });\n      return \'/\'; // 오류 발생 시 홈페이지로 이동\n    }\n  },\n  /**\r\n   * 현재 페이지의 다른 언어 버전 URL 가져오기\r\n   * @param {string} lang - 언어 코드\r\n   * @returns {string} 현재 페이지의 다른 언어 URL\r\n   */\n  getAlternateURL: function getAlternateURL(lang) {\n    return this.getLanguageUrl(lang);\n  },\n  /**\r\n   * 기본 경로 가져오기 - 상대 경로 계산을 위한 함수\r\n   * @returns {string} 기본 경로\r\n   */\n  getBasePath: function getBasePath() {\n    try {\n      // 현재 URL 경로 분석\n      var currentPath = window.location.pathname;\n      var pathParts = currentPath.split(\'/\').filter(function (part) {\n        return part;\n      });\n      var supportedLangs = config.LANGUAGE_CONFIG.supportedLanguages;\n\n      // 기본값은 상대 경로 \'./\'\n      var basePath = \'./\';\n\n      // URL에 언어 코드가 포함된 경우 - 상위 디렉토리로 이동\n      if (pathParts.length > 0 && supportedLangs.includes(pathParts[0])) {\n        basePath = \'../\';\n      }\n\n      // 추가적인 중첩 깊이가 있는 경우 (언어 코드 이후에 추가 디렉토리)\n      if (pathParts.length > 1) {\n        var additionalDepth = pathParts.length - (supportedLangs.includes(pathParts[0]) ? 1 : 0);\n        if (additionalDepth > 0) {\n          // 추가 깊이에 따라 \'../\' 추가\n          basePath = \'../\'.repeat(additionalDepth + (basePath === \'../\' ? 0 : 1));\n        }\n      }\n      return basePath;\n    } catch (error) {\n      console.error(\'기본 경로 계산 중 오류:\', error);\n      return \'./\'; // 오류 발생 시 현재 디렉토리 반환\n    }\n  },\n  /**\r\n   * 주어진 URL이 외부 URL인지 확인\r\n   * @param {string} url - 확인할 URL\r\n   * @returns {boolean} 외부 URL 여부\r\n   */\n  isExternalUrl: function isExternalUrl(url) {\n    try {\n      // 상대 URL인 경우 내부로 판단\n      if (!url.startsWith(\'http://\') && !url.startsWith(\'https://\') && !url.startsWith(\'//\')) {\n        return false;\n      }\n\n      // 호스트명 비교\n      var currentHost = window.location.hostname;\n      var urlObj = new URL(url, window.location.origin);\n      return urlObj.hostname !== currentHost;\n    } catch (error) {\n      console.warn(\'URL 검증 중 오류 발생:\', error);\n      return false;\n    }\n  },\n  /**\r\n   * URL 경로에서 페이지 ID 추출\r\n   * @param {string} [url=window.location.href] - 분석할 URL\r\n   * @returns {string} 페이지 ID\r\n   */\n  getPageIdFromUrl: function getPageIdFromUrl() {\n    var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.location.href;\n    try {\n      var urlObj = new URL(url);\n      var pathParts = urlObj.pathname.split(\'/\').filter(function (part) {\n        return part;\n      });\n      var supportedLangs = config.LANGUAGE_CONFIG.supportedLanguages;\n\n      // 언어 코드가 있는 경우 건너뜀\n      var startIdx = 0;\n      if (pathParts.length > 0 && supportedLangs.includes(pathParts[0])) {\n        startIdx = 1;\n      }\n\n      // 파일명 추출 (경로의 마지막 부분)\n      if (pathParts.length > startIdx) {\n        var fileName = pathParts[pathParts.length - 1];\n        // .html 확장자가 있으면 제거\n        var pageId = fileName.replace(/\\.html$/, \'\');\n        return pageId;\n      }\n\n      // 기본값 반환\n      return \'index\';\n    } catch (error) {\n      console.error(\'페이지 ID 추출 중 오류:\', error);\n      return \'index\';\n    }\n  }\n};\n\n// 전역 객체에 등록\nwindow.FileToQR.utils = window.FileToQR.utils || {};\nwindow.FileToQR.utils.url = UrlUtils;\n\n// Export for ES modules\n/* harmony default export */ const url_utils = (UrlUtils);\n;// ./assets/js/utils/i18n-utils.js\nfunction i18n_utils_typeof(o) { "@babel/helpers - typeof"; return i18n_utils_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, i18n_utils_typeof(o); }\nfunction i18n_utils_createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = i18n_utils_unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }\nfunction i18n_utils_unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return i18n_utils_arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? i18n_utils_arrayLikeToArray(r, a) : void 0; } }\nfunction i18n_utils_arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return r; }; var t, r = {}, e = Object.prototype, n = e.hasOwnProperty, o = "function" == typeof Symbol ? Symbol : {}, i = o.iterator || "@@iterator", a = o.asyncIterator || "@@asyncIterator", u = o.toStringTag || "@@toStringTag"; function c(t, r, e, n) { return Object.defineProperty(t, r, { value: e, enumerable: !n, configurable: !n, writable: !n }); } try { c({}, ""); } catch (t) { c = function c(t, r, e) { return t[r] = e; }; } function h(r, e, n, o) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype); return c(a, "_invoke", function (r, e, n) { var o = 1; return function (i, a) { if (3 === o) throw Error("Generator is already running"); if (4 === o) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var u = n.delegate; if (u) { var c = d(u, n); if (c) { if (c === f) continue; return c; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (1 === o) throw o = 4, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = 3; var h = s(r, e, n); if ("normal" === h.type) { if (o = n.done ? 4 : 2, h.arg === f) continue; return { value: h.arg, done: n.done }; } "throw" === h.type && (o = 4, n.method = "throw", n.arg = h.arg); } }; }(r, n, new Context(o || [])), !0), a; } function s(t, r, e) { try { return { type: "normal", arg: t.call(r, e) }; } catch (t) { return { type: "throw", arg: t }; } } r.wrap = h; var f = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var l = {}; c(l, i, function () { return this; }); var p = Object.getPrototypeOf, y = p && p(p(x([]))); y && y !== e && n.call(y, i) && (l = y); var v = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(l); function g(t) { ["next", "throw", "return"].forEach(function (r) { c(t, r, function (t) { return this._invoke(r, t); }); }); } function AsyncIterator(t, r) { function e(o, i, a, u) { var c = s(t[o], t, i); if ("throw" !== c.type) { var h = c.arg, f = h.value; return f && "object" == i18n_utils_typeof(f) && n.call(f, "__await") ? r.resolve(f.__await).then(function (t) { e("next", t, a, u); }, function (t) { e("throw", t, a, u); }) : r.resolve(f).then(function (t) { h.value = t, a(h); }, function (t) { return e("throw", t, a, u); }); } u(c.arg); } var o; c(this, "_invoke", function (t, n) { function i() { return new r(function (r, o) { e(t, n, r, o); }); } return o = o ? o.then(i, i) : i(); }, !0); } function d(r, e) { var n = e.method, o = r.i[n]; if (o === t) return e.delegate = null, "throw" === n && r.i["return"] && (e.method = "return", e.arg = t, d(r, e), "throw" === e.method) || "return" !== n && (e.method = "throw", e.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), f; var i = s(o, r.i, e.arg); if ("throw" === i.type) return e.method = "throw", e.arg = i.arg, e.delegate = null, f; var a = i.arg; return a ? a.done ? (e[r.r] = a.value, e.next = r.n, "return" !== e.method && (e.method = "next", e.arg = t), e.delegate = null, f) : a : (e.method = "throw", e.arg = new TypeError("iterator result is not an object"), e.delegate = null, f); } function w(t) { this.tryEntries.push(t); } function m(r) { var e = r[4] || {}; e.type = "normal", e.arg = t, r[4] = e; } function Context(t) { this.tryEntries = [[-1]], t.forEach(w, this), this.reset(!0); } function x(r) { if (null != r) { var e = r[i]; if (e) return e.call(r); if ("function" == typeof r.next) return r; if (!isNaN(r.length)) { var o = -1, a = function e() { for (; ++o < r.length;) if (n.call(r, o)) return e.value = r[o], e.done = !1, e; return e.value = t, e.done = !0, e; }; return a.next = a; } } throw new TypeError(i18n_utils_typeof(r) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, c(v, "constructor", GeneratorFunctionPrototype), c(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = c(GeneratorFunctionPrototype, u, "GeneratorFunction"), r.isGeneratorFunction = function (t) { var r = "function" == typeof t && t.constructor; return !!r && (r === GeneratorFunction || "GeneratorFunction" === (r.displayName || r.name)); }, r.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, c(t, u, "GeneratorFunction")), t.prototype = Object.create(v), t; }, r.awrap = function (t) { return { __await: t }; }, g(AsyncIterator.prototype), c(AsyncIterator.prototype, a, function () { return this; }), r.AsyncIterator = AsyncIterator, r.async = function (t, e, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(h(t, e, n, o), i); return r.isGeneratorFunction(e) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, g(v), c(v, u, "Generator"), c(v, i, function () { return this; }), c(v, "toString", function () { return "[object Generator]"; }), r.keys = function (t) { var r = Object(t), e = []; for (var n in r) e.unshift(n); return function t() { for (; e.length;) if ((n = e.pop()) in r) return t.value = n, t.done = !1, t; return t.done = !0, t; }; }, r.values = x, Context.prototype = { constructor: Context, reset: function reset(r) { if (this.prev = this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(m), !r) for (var e in this) "t" === e.charAt(0) && n.call(this, e) && !isNaN(+e.slice(1)) && (this[e] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0][4]; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(r) { if (this.done) throw r; var e = this; function n(t) { a.type = "throw", a.arg = r, e.next = t; } for (var o = e.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i[4], u = this.prev, c = i[1], h = i[2]; if (-1 === i[0]) return n("end"), !1; if (!c && !h) throw Error("try statement without catch or finally"); if (null != i[0] && i[0] <= u) { if (u < c) return this.method = "next", this.arg = t, n(c), !0; if (u < h) return n(h), !1; } } }, abrupt: function abrupt(t, r) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var n = this.tryEntries[e]; if (n[0] > -1 && n[0] <= this.prev && this.prev < n[2]) { var o = n; break; } } o && ("break" === t || "continue" === t) && o[0] <= r && r <= o[2] && (o = null); var i = o ? o[4] : {}; return i.type = t, i.arg = r, o ? (this.method = "next", this.next = o[2], f) : this.complete(i); }, complete: function complete(t, r) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && r && (this.next = r), f; }, finish: function finish(t) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var e = this.tryEntries[r]; if (e[2] === t) return this.complete(e[4], e[3]), m(e), f; } }, "catch": function _catch(t) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var e = this.tryEntries[r]; if (e[0] === t) { var n = e[4]; if ("throw" === n.type) { var o = n.arg; m(e); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(r, e, n) { return this.delegate = { i: x(r), r: e, n: n }, "next" === this.method && (this.arg = t), f; } }, r; }\nfunction i18n_utils_ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction i18n_utils_objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? i18n_utils_ownKeys(Object(t), !0).forEach(function (r) { i18n_utils_defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : i18n_utils_ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction i18n_utils_defineProperty(e, r, t) { return (r = i18n_utils_toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction i18n_utils_toPropertyKey(t) { var i = i18n_utils_toPrimitive(t, "string"); return "symbol" == i18n_utils_typeof(i) ? i : i + ""; }\nfunction i18n_utils_toPrimitive(t, r) { if ("object" != i18n_utils_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != i18n_utils_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\n/**\n * i18n-utils.js - FileToQR 다국어 지원 유틸리티\n * 버전: 1.2.0\n * 최종 업데이트: 2025-07-20\n * \n * 이 모듈은 다국어 지원 관련 유틸리티 함수를 제공합니다.\n * - 언어 코드 감지 및 관리\n * - 텍스트 번역\n * - 다국어 경로 처리\n */\n\n// 의존성\n\n\n\n// 전역 객체 설정\nwindow.FileToQR = window.FileToQR || {};\nwindow.FileToQR.i18n = window.FileToQR.i18n || {};\n\n/**\n * 다국어 지원(i18n) 유틸리티 모듈\n */\nvar I18nUtils = {\n  // 내부 상태\n  state: {\n    currentLang: \'\',\n    translations: {},\n    defaultLang: \'ko\',\n    supportedLangs: [\'ko\', \'en\', \'zh\', \'ja\'],\n    isLoaded: false\n  },\n  /**\n   * i18n 초기화 함수\n   * @param {Object} [options={}] - 초기화 옵션\n   * @returns {Promise<boolean>} 초기화 성공 여부\n   */\n  init: function init() {\n    var _arguments = arguments,\n      _this = this;\n    return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var options, defaultOptions, opts;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            options = _arguments.length > 0 && _arguments[0] !== undefined ? _arguments[0] : {};\n            _context.prev = 1;\n            console.log(\'i18n 초기화 시작:\', options);\n\n            // 구성 옵션 설정\n            defaultOptions = {\n              defaultLang: config.LANGUAGE_CONFIG.defaultLanguage || \'ko\',\n              supportedLangs: config.LANGUAGE_CONFIG.supportedLanguages || [\'ko\', \'en\', \'zh\', \'ja\'],\n              loadTranslations: true,\n              updateElements: true\n            };\n            opts = i18n_utils_objectSpread(i18n_utils_objectSpread({}, defaultOptions), options); // 내부 상태 업데이트\n            _this.state.defaultLang = opts.defaultLang;\n            _this.state.supportedLangs = opts.supportedLangs;\n\n            // 현재 언어 감지 (URL에서 언어 코드 추출)\n            _this.detectCurrentLanguage();\n            console.log(\'감지된 현재 언어:\', _this.state.currentLang);\n\n            // 번역 데이터 로드\n            if (!opts.loadTranslations) {\n              _context.next = 12;\n              break;\n            }\n            _context.next = 12;\n            return _this.loadTranslations();\n          case 12:\n            // 페이지 요소 번역 적용\n            if (opts.updateElements) {\n              _this.updatePageElements();\n            }\n\n            // 상태 표시: 초기화 완료\n            _this.state.isLoaded = true;\n            console.log(\'i18n 초기화 완료\');\n            return _context.abrupt("return", true);\n          case 18:\n            _context.prev = 18;\n            _context.t0 = _context["catch"](1);\n            console.error(\'i18n 초기화 오류:\', _context.t0);\n            return _context.abrupt("return", false);\n          case 22:\n          case "end":\n            return _context.stop();\n        }\n      }, _callee, null, [[1, 18]]);\n    }))();\n  },\n  /**\n   * 현재 언어 감지 및 설정\n   * 우선순위: URL 매개변수 > URL 경로 > 저장된 설정 > 브라우저 설정 > 기본값\n   */\n  detectCurrentLanguage: function detectCurrentLanguage() {\n    try {\n      var detectedLang = null;\n\n      // 1. URL 매개변수에서 언어 코드 확인 (예: ?lang=ko)\n      var urlParams = new URLSearchParams(window.location.search);\n      var paramLang = urlParams.get(\'lang\');\n      if (paramLang && this.state.supportedLangs.includes(paramLang)) {\n        detectedLang = paramLang;\n        console.log(\'URL 매개변수에서 언어 감지:\', detectedLang);\n      }\n\n      // 2. URL 경로에서 언어 코드 확인 (예: /ko/index.html)\n      if (!detectedLang) {\n        var pathLang = url_utils.getLanguageFromUrl();\n        if (pathLang && this.state.supportedLangs.includes(pathLang)) {\n          detectedLang = pathLang;\n          console.log(\'URL 경로에서 언어 감지:\', detectedLang);\n        }\n      }\n\n      // 3. 로컬 스토리지에서 언어 설정 확인\n      if (!detectedLang) {\n        var storedLang = localStorage.getItem(\'filetoqr_language\');\n        if (storedLang && this.state.supportedLangs.includes(storedLang)) {\n          detectedLang = storedLang;\n          console.log(\'저장된 설정에서 언어 감지:\', detectedLang);\n        }\n      }\n\n      // 4. 브라우저 설정 확인\n      if (!detectedLang) {\n        var browserLang = navigator.language.split(\'-\')[0];\n        if (this.state.supportedLangs.includes(browserLang)) {\n          detectedLang = browserLang;\n          console.log(\'브라우저 설정에서 언어 감지:\', detectedLang);\n        }\n      }\n\n      // 5. 감지된 언어가 없으면 기본 언어 사용\n      if (!detectedLang) {\n        detectedLang = this.state.defaultLang;\n        console.log(\'기본 언어 사용:\', detectedLang);\n      }\n\n      // 감지된 언어 설정\n      this.state.currentLang = detectedLang;\n      localStorage.setItem(\'filetoqr_language\', detectedLang);\n      document.documentElement.lang = detectedLang;\n\n      // 언어에 따른 텍스트 방향 설정\n      var isRTL = [\'ar\', \'he\', \'fa\', \'ur\'].includes(detectedLang);\n      document.documentElement.dir = isRTL ? \'rtl\' : \'ltr\';\n      return detectedLang;\n    } catch (error) {\n      console.error(\'언어 감지 중 오류:\', error);\n      // 오류 발생 시 기본 언어 사용\n      this.state.currentLang = this.state.defaultLang;\n      return this.state.defaultLang;\n    }\n  },\n  /**\n   * 현재 언어 가져오기\n   * @returns {string} 현재 언어 코드\n   */\n  getCurrentLang: function getCurrentLang() {\n    return this.state.currentLang || this.state.defaultLang;\n  },\n  /**\n   * 현재 언어 설정\n   * @param {string} langCode - 언어 코드\n   * @param {boolean} [reload=false] - 페이지 새로고침 여부\n   * @returns {boolean} 설정 성공 여부\n   */\n  setLanguage: function setLanguage(langCode) {\n    var reload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    try {\n      // 지원하지 않는 언어인 경우 거부\n      if (!this.state.supportedLangs.includes(langCode)) {\n        console.warn("\\uC9C0\\uC6D0\\uD558\\uC9C0 \\uC54A\\uB294 \\uC5B8\\uC5B4: ".concat(langCode));\n        return false;\n      }\n\n      // 이미 같은 언어로 설정된 경우 중복 작업 방지\n      if (this.state.currentLang === langCode) {\n        console.log(\'이미 해당 언어로 설정되어 있음:\', langCode);\n        return true;\n      }\n\n      // 현재 언어 업데이트\n      this.state.currentLang = langCode;\n      localStorage.setItem(\'filetoqr_language\', langCode);\n      document.documentElement.lang = langCode;\n\n      // RTL 언어 처리\n      var isRTL = [\'ar\', \'he\', \'fa\', \'ur\'].includes(langCode);\n      document.documentElement.dir = isRTL ? \'rtl\' : \'ltr\';\n      console.log(\'언어 변경됨:\', langCode);\n\n      // 페이지 새로고침 옵션\n      if (reload) {\n        window.location.reload();\n        return true;\n      }\n\n      // 페이지 요소 업데이트\n      this.updatePageElements();\n      return true;\n    } catch (error) {\n      console.error(\'언어 설정 중 오류:\', error);\n      return false;\n    }\n  },\n  /**\n   * 번역 리소스 로드 함수\n   * @param {string} [lang=null] - 로드할 언어 (null이면 현재 언어)\n   * @returns {Promise<Object>} 번역 데이터\n   */\n  loadTranslations: function loadTranslations() {\n    var _arguments2 = arguments,\n      _this2 = this;\n    return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n      var lang, langCode, basePath, langPaths, translationData, loadError, _i, _langPaths, path, response;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            lang = _arguments2.length > 0 && _arguments2[0] !== undefined ? _arguments2[0] : null;\n            langCode = lang || _this2.state.currentLang;\n            _context2.prev = 2;\n            if (!_this2.state.translations[langCode]) {\n              _context2.next = 6;\n              break;\n            }\n            console.log("\\uBC88\\uC5ED \\uB370\\uC774\\uD130 \\uCE90\\uC2DC\\uC5D0\\uC11C \\uB85C\\uB4DC: ".concat(langCode));\n            return _context2.abrupt("return", _this2.state.translations[langCode]);\n          case 6:\n            console.log("\\uBC88\\uC5ED \\uB370\\uC774\\uD130 \\uB85C\\uB4DC \\uC911: ".concat(langCode));\n\n            // 상대 경로 계산\n            basePath = url_utils.getBasePath(); // 번역 파일 가져오기\n            langPaths = ["".concat(basePath, "assets/i18n/").concat(langCode, ".json"), "/assets/i18n/".concat(langCode, ".json"), "../assets/i18n/".concat(langCode, ".json"), "../../assets/i18n/".concat(langCode, ".json")];\n            translationData = null;\n            loadError = null; // 각 경로 시도\n            _i = 0, _langPaths = langPaths;\n          case 12:\n            if (!(_i < _langPaths.length)) {\n              _context2.next = 34;\n              break;\n            }\n            path = _langPaths[_i];\n            _context2.prev = 14;\n            console.log("\\uBC88\\uC5ED \\uD30C\\uC77C \\uACBD\\uB85C \\uC2DC\\uB3C4: ".concat(path));\n            _context2.next = 18;\n            return fetch(path);\n          case 18:\n            response = _context2.sent;\n            if (!response.ok) {\n              _context2.next = 25;\n              break;\n            }\n            _context2.next = 22;\n            return response.json();\n          case 22:\n            translationData = _context2.sent;\n            console.log("\\uBC88\\uC5ED \\uD30C\\uC77C \\uB85C\\uB4DC \\uC131\\uACF5: ".concat(path));\n            return _context2.abrupt("break", 34);\n          case 25:\n            _context2.next = 31;\n            break;\n          case 27:\n            _context2.prev = 27;\n            _context2.t0 = _context2["catch"](14);\n            loadError = _context2.t0;\n            console.warn("\\uBC88\\uC5ED \\uD30C\\uC77C \\uB85C\\uB4DC \\uC2E4\\uD328 (".concat(path, "):"), _context2.t0);\n          case 31:\n            _i++;\n            _context2.next = 12;\n            break;\n          case 34:\n            if (!(!translationData && langCode !== _this2.state.defaultLang)) {\n              _context2.next = 37;\n              break;\n            }\n            console.warn("".concat(langCode, " \\uBC88\\uC5ED \\uB85C\\uB4DC \\uC2E4\\uD328, \\uAE30\\uBCF8 \\uC5B8\\uC5B4(").concat(_this2.state.defaultLang, ") \\uC2DC\\uB3C4"));\n            return _context2.abrupt("return", _this2.loadTranslations(_this2.state.defaultLang));\n          case 37:\n            // 최종 실패 시 빈 객체 반환\n            if (!translationData) {\n              console.error(\'모든 번역 파일 로드 실패:\', loadError);\n              translationData = {};\n            }\n\n            // 번역 데이터 캐싱\n            _this2.state.translations[langCode] = translationData;\n            return _context2.abrupt("return", translationData);\n          case 42:\n            _context2.prev = 42;\n            _context2.t1 = _context2["catch"](2);\n            console.error("\\uBC88\\uC5ED \\uB370\\uC774\\uD130 \\uB85C\\uB4DC \\uC911 \\uC624\\uB958 (".concat(langCode, "):"), _context2.t1);\n            return _context2.abrupt("return", {});\n          case 46:\n          case "end":\n            return _context2.stop();\n        }\n      }, _callee2, null, [[2, 42], [14, 27]]);\n    }))();\n  },\n  /**\n   * 번역 키에 해당하는 텍스트 가져오기\n   * @param {string} key - 번역 키 (예: \'common.welcome\')\n   * @param {Object} [params={}] - 치환할 매개변수\n   * @param {string} [defaultValue=null] - 기본값\n   * @returns {string} 번역된 텍스트\n   */\n  translate: function translate(key) {\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    try {\n      // 번역 데이터 확인\n      var langData = this.state.translations[this.state.currentLang];\n      if (!langData) {\n        console.warn("\\uBC88\\uC5ED \\uB370\\uC774\\uD130\\uAC00 \\uB85C\\uB4DC\\uB418\\uC9C0 \\uC54A\\uC74C: ".concat(this.state.currentLang));\n        return defaultValue || key;\n      }\n\n      // 중첩 키 처리 (예: \'common.welcome\')\n      var keyParts = key.split(\'.\');\n      var result = langData;\n      var _iterator = i18n_utils_createForOfIteratorHelper(keyParts),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var part = _step.value;\n          if (result && result[part] !== undefined) {\n            result = result[part];\n          } else {\n            // 번역 키를 찾을 수 없음\n            console.warn("\\uBC88\\uC5ED \\uD0A4 \\uC5C6\\uC74C: ".concat(key));\n            return defaultValue || key;\n          }\n        }\n\n        // 문자열이 아닌 경우 처리\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      if (typeof result !== \'string\') {\n        console.warn("\\uBC88\\uC5ED \\uACB0\\uACFC\\uAC00 \\uBB38\\uC790\\uC5F4 \\uC544\\uB2D8: ".concat(key), result);\n        return defaultValue || key;\n      }\n\n      // 매개변수 치환\n      var translatedText = result;\n      if (params && Object.keys(params).length > 0) {\n        Object.keys(params).forEach(function (paramKey) {\n          translatedText = translatedText.replace(new RegExp("{{\\\\s*".concat(paramKey, "\\\\s*}}"), \'g\'), params[paramKey]);\n        });\n      }\n      return translatedText;\n    } catch (error) {\n      console.error(\'번역 중 오류:\', error);\n      return defaultValue || key;\n    }\n  },\n  /**\n   * 페이지 요소 업데이트 (data-i18n 속성 사용)\n   */\n  updatePageElements: function updatePageElements() {\n    var _this3 = this;\n    try {\n      // 번역 적용할 요소 선택\n      var elements = document.querySelectorAll(\'[data-i18n]\');\n      console.log("\\uBC88\\uC5ED \\uC801\\uC6A9\\uD560 \\uC694\\uC18C \\uC218: ".concat(elements.length));\n      elements.forEach(function (element) {\n        var key = element.getAttribute(\'data-i18n\');\n        var params = {};\n\n        // 매개변수 속성 처리\n        var dataAttrs = Array.from(element.attributes).filter(function (attr) {\n          return attr.name.startsWith(\'data-i18n-param-\');\n        });\n        dataAttrs.forEach(function (attr) {\n          var paramName = attr.name.replace(\'data-i18n-param-\', \'\');\n          params[paramName] = attr.value;\n        });\n\n        // 번역 적용\n        var translatedText = _this3.translate(key, params, null);\n        if (translatedText !== null && translatedText !== key) {\n          // HTML 허용 여부 확인\n          if (element.hasAttribute(\'data-i18n-html\')) {\n            element.innerHTML = translatedText;\n          } else {\n            element.textContent = translatedText;\n          }\n        }\n      });\n      console.log(\'페이지 요소 번역 완료\');\n    } catch (error) {\n      console.error(\'페이지 요소 번역 중 오류:\', error);\n    }\n  },\n  /**\n   * 다른 언어 버전의 페이지로 이동\n   * @param {string} lang - 언어 코드\n   * @returns {boolean} 성공 여부\n   */\n  navigateToLanguage: function navigateToLanguage(lang) {\n    try {\n      // 지원하지 않는 언어 확인\n      if (!this.state.supportedLangs.includes(lang)) {\n        console.warn("\\uC9C0\\uC6D0\\uD558\\uC9C0 \\uC54A\\uB294 \\uC5B8\\uC5B4\\uB85C \\uC774\\uB3D9 \\uC2DC\\uB3C4: ".concat(lang));\n        return false;\n      }\n\n      // 로컬 스토리지에 언어 설정 저장\n      localStorage.setItem(\'filetoqr_language\', lang);\n\n      // URL 유틸리티 활용하여 다국어 URL 생성\n      var newUrl = url_utils.getLanguageUrl(lang);\n\n      // 새 URL로 이동\n      console.log("\\uC5B8\\uC5B4 \\uBCC0\\uACBD\\uC5D0 \\uB530\\uB978 \\uC774\\uB3D9: ".concat(newUrl));\n      window.location.href = newUrl;\n      return true;\n    } catch (error) {\n      console.error(\'언어 페이지 이동 중 오류:\', error);\n      return false;\n    }\n  }\n};\n\n// 전역 객체에 등록\nwindow.FileToQR.i18n = I18nUtils;\n\n// 페이지 로드 시 자동 초기화\ndocument.addEventListener(\'DOMContentLoaded\', function () {\n  console.log(\'DOM 로드 완료, i18n 자동 초기화 시작\');\n  I18nUtils.init()["catch"](function (error) {\n    console.error(\'i18n 자동 초기화 실패:\', error);\n  });\n});\n\n// Export for ES modules\n/* harmony default export */ const i18n_utils = (I18nUtils);\n;// ./assets/js/core/app-core.js\nfunction app_core_typeof(o) { "@babel/helpers - typeof"; return app_core_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, app_core_typeof(o); }\nfunction app_core_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ app_core_regeneratorRuntime = function _regeneratorRuntime() { return r; }; var t, r = {}, e = Object.prototype, n = e.hasOwnProperty, o = "function" == typeof Symbol ? Symbol : {}, i = o.iterator || "@@iterator", a = o.asyncIterator || "@@asyncIterator", u = o.toStringTag || "@@toStringTag"; function c(t, r, e, n) { return Object.defineProperty(t, r, { value: e, enumerable: !n, configurable: !n, writable: !n }); } try { c({}, ""); } catch (t) { c = function c(t, r, e) { return t[r] = e; }; } function h(r, e, n, o) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype); return c(a, "_invoke", function (r, e, n) { var o = 1; return function (i, a) { if (3 === o) throw Error("Generator is already running"); if (4 === o) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var u = n.delegate; if (u) { var c = d(u, n); if (c) { if (c === f) continue; return c; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (1 === o) throw o = 4, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = 3; var h = s(r, e, n); if ("normal" === h.type) { if (o = n.done ? 4 : 2, h.arg === f) continue; return { value: h.arg, done: n.done }; } "throw" === h.type && (o = 4, n.method = "throw", n.arg = h.arg); } }; }(r, n, new Context(o || [])), !0), a; } function s(t, r, e) { try { return { type: "normal", arg: t.call(r, e) }; } catch (t) { return { type: "throw", arg: t }; } } r.wrap = h; var f = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var l = {}; c(l, i, function () { return this; }); var p = Object.getPrototypeOf, y = p && p(p(x([]))); y && y !== e && n.call(y, i) && (l = y); var v = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(l); function g(t) { ["next", "throw", "return"].forEach(function (r) { c(t, r, function (t) { return this._invoke(r, t); }); }); } function AsyncIterator(t, r) { function e(o, i, a, u) { var c = s(t[o], t, i); if ("throw" !== c.type) { var h = c.arg, f = h.value; return f && "object" == app_core_typeof(f) && n.call(f, "__await") ? r.resolve(f.__await).then(function (t) { e("next", t, a, u); }, function (t) { e("throw", t, a, u); }) : r.resolve(f).then(function (t) { h.value = t, a(h); }, function (t) { return e("throw", t, a, u); }); } u(c.arg); } var o; c(this, "_invoke", function (t, n) { function i() { return new r(function (r, o) { e(t, n, r, o); }); } return o = o ? o.then(i, i) : i(); }, !0); } function d(r, e) { var n = e.method, o = r.i[n]; if (o === t) return e.delegate = null, "throw" === n && r.i["return"] && (e.method = "return", e.arg = t, d(r, e), "throw" === e.method) || "return" !== n && (e.method = "throw", e.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), f; var i = s(o, r.i, e.arg); if ("throw" === i.type) return e.method = "throw", e.arg = i.arg, e.delegate = null, f; var a = i.arg; return a ? a.done ? (e[r.r] = a.value, e.next = r.n, "return" !== e.method && (e.method = "next", e.arg = t), e.delegate = null, f) : a : (e.method = "throw", e.arg = new TypeError("iterator result is not an object"), e.delegate = null, f); } function w(t) { this.tryEntries.push(t); } function m(r) { var e = r[4] || {}; e.type = "normal", e.arg = t, r[4] = e; } function Context(t) { this.tryEntries = [[-1]], t.forEach(w, this), this.reset(!0); } function x(r) { if (null != r) { var e = r[i]; if (e) return e.call(r); if ("function" == typeof r.next) return r; if (!isNaN(r.length)) { var o = -1, a = function e() { for (; ++o < r.length;) if (n.call(r, o)) return e.value = r[o], e.done = !1, e; return e.value = t, e.done = !0, e; }; return a.next = a; } } throw new TypeError(app_core_typeof(r) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, c(v, "constructor", GeneratorFunctionPrototype), c(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = c(GeneratorFunctionPrototype, u, "GeneratorFunction"), r.isGeneratorFunction = function (t) { var r = "function" == typeof t && t.constructor; return !!r && (r === GeneratorFunction || "GeneratorFunction" === (r.displayName || r.name)); }, r.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, c(t, u, "GeneratorFunction")), t.prototype = Object.create(v), t; }, r.awrap = function (t) { return { __await: t }; }, g(AsyncIterator.prototype), c(AsyncIterator.prototype, a, function () { return this; }), r.AsyncIterator = AsyncIterator, r.async = function (t, e, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(h(t, e, n, o), i); return r.isGeneratorFunction(e) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, g(v), c(v, u, "Generator"), c(v, i, function () { return this; }), c(v, "toString", function () { return "[object Generator]"; }), r.keys = function (t) { var r = Object(t), e = []; for (var n in r) e.unshift(n); return function t() { for (; e.length;) if ((n = e.pop()) in r) return t.value = n, t.done = !1, t; return t.done = !0, t; }; }, r.values = x, Context.prototype = { constructor: Context, reset: function reset(r) { if (this.prev = this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(m), !r) for (var e in this) "t" === e.charAt(0) && n.call(this, e) && !isNaN(+e.slice(1)) && (this[e] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0][4]; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(r) { if (this.done) throw r; var e = this; function n(t) { a.type = "throw", a.arg = r, e.next = t; } for (var o = e.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i[4], u = this.prev, c = i[1], h = i[2]; if (-1 === i[0]) return n("end"), !1; if (!c && !h) throw Error("try statement without catch or finally"); if (null != i[0] && i[0] <= u) { if (u < c) return this.method = "next", this.arg = t, n(c), !0; if (u < h) return n(h), !1; } } }, abrupt: function abrupt(t, r) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var n = this.tryEntries[e]; if (n[0] > -1 && n[0] <= this.prev && this.prev < n[2]) { var o = n; break; } } o && ("break" === t || "continue" === t) && o[0] <= r && r <= o[2] && (o = null); var i = o ? o[4] : {}; return i.type = t, i.arg = r, o ? (this.method = "next", this.next = o[2], f) : this.complete(i); }, complete: function complete(t, r) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && r && (this.next = r), f; }, finish: function finish(t) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var e = this.tryEntries[r]; if (e[2] === t) return this.complete(e[4], e[3]), m(e), f; } }, "catch": function _catch(t) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var e = this.tryEntries[r]; if (e[0] === t) { var n = e[4]; if ("throw" === n.type) { var o = n.arg; m(e); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(r, e, n) { return this.delegate = { i: x(r), r: e, n: n }, "next" === this.method && (this.arg = t), f; } }, r; }\nfunction app_core_createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = app_core_unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }\nfunction app_core_unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return app_core_arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? app_core_arrayLikeToArray(r, a) : void 0; } }\nfunction app_core_arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction app_core_asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction app_core_asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { app_core_asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { app_core_asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\n/**\n * app-core.js - FileToQR 애플리케이션 코어 모듈\n * 버전: 1.2.0\n * 최종 업데이트: 2025-07-26\n * 참조: ../../docs/architecture/module-registry.md\n * \n * 이 모듈은 애플리케이션의 핵심 기능을 관리합니다:\n * - 모듈 초기화 및 등록\n * - 이벤트 관리\n * - 네비게이션 및 라우팅\n * - 전역 상태 관리\n * - 컴포넌트 시스템 관리\n * - 버전 관리\n * - 페이지별 초기화\n * - 다국어 지원\n * \n * 참고: 이 모듈과 main.js의 역할 구분\n * - app-core.js: 애플리케이션의 핵심 구성 요소, 공통 유틸리티 및 모듈 정의\n * - main.js: 특정 페이지 로직과 컴포넌트의 초기화를 처리합니다.\n * \n * 두 모듈 모두 유지하는 이유는 다음과 같습니다:\n * 1. app-core.js는 구성 및 유틸리티에 집중하며 전체 애플리케이션에서 공유됩니다.\n * 2. main.js는 페이지별 특정 로직과 컴포넌트 초기화를 처리합니다.\n * 3. 이러한 분리는 단일 책임 원칙을 지키며 유지보수성을 높입니다.\n */\n\n// 디버깅을 위한 로그 추가\nconsole.log(\'app-core.js 로딩 시작\');\n\n// 필요한 모듈 임포트\n\n\n\n\n// 글로벌 네임스페이스 설정\nwindow.FileToQR = window.FileToQR || {};\n\n// 애플리케이션 버전\nvar app_core_APP_VERSION = config.APP_VERSION;\n\n/**\n * 현재 페이지 식별자 반환\n * @returns {string} 페이지 식별자\n */\nfunction getCurrentPage() {\n  try {\n    return url_utils.getPageIdFromUrl() || \'unknown\';\n  } catch (error) {\n    console.error(\'현재 페이지 확인 중 오류 발생:\', error);\n    return \'unknown\';\n  }\n}\n\n/**\n * 페이지 이동 함수\n * @param {string} url - 이동할 URL\n * @param {boolean} [newTab=false] - 새 탭에서 열기 여부\n */\nfunction navigateTo(url) {\n  var newTab = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  try {\n    // URL 열기\n    if (newTab) {\n      window.open(url, \'_blank\');\n    } else {\n      window.location.href = url;\n    }\n  } catch (error) {\n    console.error(\'페이지 이동 중 오류 발생:\', error);\n  }\n}\n\n/**\n * 기본 경로 가져오기\n * @returns {string} 기본 경로\n */\nfunction getBasePath() {\n  return url_utils.getBasePath();\n}\n\n/**\n * 애플리케이션 초기화\n * @returns {Promise<void>}\n */\nfunction init() {\n  return _init.apply(this, arguments);\n}\n/**\n * 로딩 인디케이터 표시\n */\nfunction _init() {\n  _init = app_core_asyncToGenerator(/*#__PURE__*/app_core_regeneratorRuntime().mark(function _callee() {\n    var handlebarsScript;\n    return app_core_regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          console.log("FileToQR \\uC560\\uD50C\\uB9AC\\uCF00\\uC774\\uC158 \\uCD08\\uAE30\\uD654 \\uC2DC\\uC791 (v".concat(app_core_APP_VERSION, ")"));\n          _context.prev = 1;\n          // 1. 로딩 인디케이터 표시\n          showLoadingIndicator();\n\n          // 2. 유틸리티 모듈 초기화 (순서 중요)\n          console.log(\'기본 유틸리티 모듈 초기화 시작\');\n\n          // a. URL 유틸리티 초기화\n          console.log(\'URL 유틸리티 초기화\');\n          // URL 유틸리티는 자체 초기화 함수가 없으므로 넘어감\n\n          // b. 다국어 지원 초기화\n          console.log(\'다국어 지원 초기화\');\n          _context.next = 8;\n          return i18n_utils.init({\n            useSavedLang: true,\n            detectBrowserLang: true\n          });\n        case 8:\n          _context.prev = 8;\n          if (!(typeof window.FileToQR.TemplateUtils !== \'undefined\')) {\n            _context.next = 22;\n            break;\n          }\n          console.log(\'템플릿 유틸리티 발견, 초기화 시작\');\n\n          // 동적으로 Handlebars 로드 시도\n          if (window.Handlebars) {\n            _context.next = 17;\n            break;\n          }\n          handlebarsScript = document.createElement(\'script\');\n          handlebarsScript.src = \'https://cdn.jsdelivr.net/npm/handlebars@latest/dist/handlebars.min.js\';\n\n          // Handlebars 로드 대기\n          _context.next = 16;\n          return new Promise(function (resolve, reject) {\n            handlebarsScript.onload = resolve;\n            handlebarsScript.onerror = reject;\n            document.head.appendChild(handlebarsScript);\n          });\n        case 16:\n          console.log(\'Handlebars 라이브러리 동적 로드 완료\');\n        case 17:\n          _context.next = 19;\n          return window.FileToQR.TemplateUtils.init();\n        case 19:\n          console.log(\'템플릿 유틸리티 초기화 완료\');\n\n          // 템플릿 처리\n          _context.next = 22;\n          return window.FileToQR.TemplateUtils.processTemplates();\n        case 22:\n          _context.next = 27;\n          break;\n        case 24:\n          _context.prev = 24;\n          _context.t0 = _context["catch"](8);\n          console.error(\'템플릿 유틸리티 초기화 실패:\', _context.t0);\n          // 계속 진행 - 템플릿 없이도 기본 기능은 작동할 수 있도록\n        case 27:\n          _context.next = 29;\n          return initCurrentPage();\n        case 29:\n          // 5. 페이지 내 링크 업데이트\n          updateInternalLinks();\n\n          // 6. 언어 선택기 설정\n          initLanguageSelector();\n\n          // 7. 로딩 인디케이터 숨기기\n          console.log(\'초기화 완료 - 로딩 인디케이터 숨김\');\n          hideLoadingIndicator();\n\n          // 8. 초기화 완료 후 추가 작업 실행\n          onAppInitialized();\n          console.log(\'애플리케이션 초기화 완료\');\n          _context.next = 42;\n          break;\n        case 37:\n          _context.prev = 37;\n          _context.t1 = _context["catch"](1);\n          console.error(\'애플리케이션 초기화 실패:\', _context.t1);\n          // 로딩 인디케이터 숨기기\n          hideLoadingIndicator();\n          // 오류 메시지 표시\n          showErrorMessage(\'애플리케이션 초기화 중 오류가 발생했습니다.\');\n        case 42:\n        case "end":\n          return _context.stop();\n      }\n    }, _callee, null, [[1, 37], [8, 24]]);\n  }));\n  return _init.apply(this, arguments);\n}\nfunction showLoadingIndicator() {\n  // 이미 존재하는 로딩 인디케이터 확인\n  var loadingIndicator = document.getElementById(\'loading-indicator\');\n\n  // 없는 경우만 생성\n  if (!loadingIndicator) {\n    loadingIndicator = document.createElement(\'div\');\n    loadingIndicator.id = \'loading-indicator\';\n    loadingIndicator.className = \'loading-overlay\';\n    loadingIndicator.innerHTML = "\\n      <div class=\\"loading-container\\">\\n        <div class=\\"loading-spinner\\"></div>\\n        <p class=\\"loading-text\\">\\uB85C\\uB529 \\uC911... \\uD398\\uC774\\uC9C0\\uAC00 \\uB85C\\uB4DC\\uB418\\uC9C0 \\uC54A\\uC73C\\uBA74 \\uC0C8\\uB85C\\uACE0\\uCE68\\uD558\\uC138\\uC694.</p>\\n      </div>\\n    ";\n\n    // 스타일 추가\n    var style = document.createElement(\'style\');\n    style.textContent = "\\n      .loading-overlay {\\n        position: fixed;\\n        top: 0;\\n        left: 0;\\n        width: 100%;\\n        height: 100%;\\n        background-color: rgba(255, 255, 255, 0.9);\\n        display: flex;\\n        justify-content: center;\\n        align-items: center;\\n        z-index: 9999;\\n        transition: opacity 0.5s;\\n      }\\n      .loading-overlay.fade-out {\\n        opacity: 0;\\n      }\\n      .loading-container {\\n        text-align: center;\\n        padding: 2rem;\\n        background-color: white;\\n        border-radius: 0.5rem;\\n        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\\n      }\\n      .loading-spinner {\\n        display: inline-block;\\n        width: 40px;\\n        height: 40px;\\n        border: 4px solid rgba(66, 153, 225, 0.2);\\n        border-radius: 50%;\\n        border-top-color: #4299e1;\\n        animation: spin 1s ease-in-out infinite;\\n        margin-bottom: 1rem;\\n      }\\n      @keyframes spin {\\n        to { transform: rotate(360deg); }\\n      }\\n      .loading-text {\\n        color: #4a5568;\\n        font-size: 1rem;\\n        margin: 0;\\n      }\\n    ";\n    document.head.appendChild(style);\n    document.body.appendChild(loadingIndicator);\n  }\n}\n\n/**\n * 로딩 인디케이터 숨기기\n */\nfunction hideLoadingIndicator() {\n  var loadingIndicator = document.getElementById(\'loading-indicator\');\n  if (loadingIndicator) {\n    console.log(\'로딩 인디케이터 숨기기 실행\');\n    // 즉시 제거로 변경\n    if (loadingIndicator.parentNode) {\n      loadingIndicator.parentNode.removeChild(loadingIndicator);\n      console.log(\'로딩 인디케이터 제거 완료\');\n    }\n  }\n}\n\n/**\n * 현재 페이지 초기화 (페이지별 로직)\n * @private\n * @returns {Promise<void>}\n */\nfunction initCurrentPage() {\n  return _initCurrentPage.apply(this, arguments);\n}\n/**\n * 홈 페이지 초기화\n * @private\n */\nfunction _initCurrentPage() {\n  _initCurrentPage = app_core_asyncToGenerator(/*#__PURE__*/app_core_regeneratorRuntime().mark(function _callee2() {\n    var pageId, pageInitializers;\n    return app_core_regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          // 현재 페이지 ID 가져오기\n          pageId = getCurrentPage();\n          console.log("\\uD398\\uC774\\uC9C0\\uBCC4 \\uCD08\\uAE30\\uD654 \\uC2DC\\uC791: ".concat(pageId));\n\n          // 페이지별 초기화 함수 매핑\n          pageInitializers = {\n            \'home\': initHomePage,\n            \'convert\': initConvertPage,\n            \'qrcode\': initQRCodePage,\n            \'timer\': initTimerPage,\n            \'help\': initHelpPage,\n            \'contact\': initContactPage,\n            \'privacy\': initPrivacyPage,\n            \'terms\': initTermsPage\n          }; // 초기화 함수 실행\n          if (!(pageInitializers[pageId] && typeof pageInitializers[pageId] === \'function\')) {\n            _context2.next = 9;\n            break;\n          }\n          _context2.next = 7;\n          return pageInitializers[pageId]();\n        case 7:\n          _context2.next = 10;\n          break;\n        case 9:\n          console.log("".concat(pageId, " \\uD398\\uC774\\uC9C0\\uC5D0 \\uB300\\uD55C \\uBCC4\\uB3C4 \\uCD08\\uAE30\\uD654 \\uD568\\uC218 \\uC5C6\\uC74C"));\n        case 10:\n          console.log("".concat(pageId, " \\uD398\\uC774\\uC9C0 \\uCD08\\uAE30\\uD654 \\uC644\\uB8CC"));\n          _context2.next = 16;\n          break;\n        case 13:\n          _context2.prev = 13;\n          _context2.t0 = _context2["catch"](0);\n          console.error(\'페이지 초기화 실패:\', _context2.t0);\n        case 16:\n        case "end":\n          return _context2.stop();\n      }\n    }, _callee2, null, [[0, 13]]);\n  }));\n  return _initCurrentPage.apply(this, arguments);\n}\nfunction initHomePage() {\n  console.log(\'홈페이지 초기화\');\n\n  // 시작하기 버튼 이벤트만 남겨둠\n  var getStartedBtns = document.querySelectorAll(\'.get-started-btn\');\n  getStartedBtns.forEach(function (btn) {\n    btn.addEventListener(\'click\', function () {\n      navigateTo(\'convert.html\');\n    });\n  });\n}\n\n/**\n * 변환 페이지 초기화\n * @private\n */\nfunction initConvertPage() {\n  console.log(\'변환 페이지 초기화\');\n\n  // convert.js 스크립트 로드 상태 확인\n  var convertScripts = Array.from(document.scripts).filter(function (script) {\n    return script.src && (script.src.includes(\'/convert.js\') || script.src.includes(\'convert.bundle.js\'));\n  });\n  if (convertScripts.length === 0) {\n    console.warn(\'convert.js 스크립트를 찾을 수 없습니다. 동적으로 로드합니다.\');\n\n    // 필요시 동적으로 스크립트 로드\n    var script = document.createElement(\'script\');\n    script.src = \'assets/js/pages/convert.js\';\n    script.type = \'module\';\n    document.head.appendChild(script);\n\n    // 스크립트 로드 완료 후 컨트롤러 초기화\n    script.onload = function () {\n      initConvertPageController();\n    };\n  } else {\n    // 스크립트가 이미 로드된 경우 컨트롤러 초기화\n    setTimeout(initConvertPageController, 100);\n  }\n}\n\n/**\n * 변환 페이지 컨트롤러 초기화 헬퍼 함수\n */\nfunction initConvertPageController() {\n  if (window.FileToQR && window.FileToQR.ConvertPageController) {\n    console.log(\'변환 페이지 컨트롤러 초기화 시작\');\n    window.FileToQR.ConvertPageController.init();\n    console.log(\'변환 페이지 컨트롤러 초기화 완료\');\n  } else {\n    console.error(\'ConvertPageController를 찾을 수 없습니다\');\n  }\n}\n\n/**\n * QR 코드 페이지 초기화\n * @private\n */\nfunction initQRCodePage() {\n  console.log(\'QR 코드 페이지 초기화\');\n}\n\n/**\n * 타이머 페이지 초기화\n * @private\n */\nfunction initTimerPage() {\n  console.log(\'타이머 페이지 초기화\');\n}\n\n/**\n * 도움말 페이지 초기화\n * @private\n */\nfunction initHelpPage() {\n  console.log(\'도움말 페이지 초기화\');\n}\n\n/**\n * 문의하기 페이지 초기화\n * @private\n */\nfunction initContactPage() {\n  console.log(\'문의하기 페이지 초기화\');\n}\n\n/**\n * 개인정보 처리방침 페이지 초기화\n * @private\n */\nfunction initPrivacyPage() {\n  console.log(\'개인정보 처리방침 페이지 초기화\');\n}\n\n/**\n * 이용약관 페이지 초기화\n * @private\n */\nfunction initTermsPage() {\n  console.log(\'이용약관 페이지 초기화\');\n}\n\n/**\n * 템플릿 처리 및 렌더링\n */\nfunction processTemplates() {\n  try {\n    if (window.Handlebars && window.FileToQR.TemplateUtils) {\n      // 템플릿 요소 검색\n      var templateElements = document.querySelectorAll(\'[data-template]\');\n      console.log("\\uD15C\\uD50C\\uB9BF \\uC694\\uC18C \\uBC1C\\uACAC: ".concat(templateElements.length, "\\uAC1C"));\n\n      // 각 템플릿 요소 처리\n      templateElements.forEach(function (element) {\n        var templateName = element.getAttribute(\'data-template\');\n        var templateData = element.getAttribute(\'data-template-data\');\n        if (templateName) {\n          console.log("\\uD15C\\uD50C\\uB9BF \\uB80C\\uB354\\uB9C1 \\uC2DC\\uB3C4: ".concat(templateName));\n          var data = {};\n\n          // 템플릿 데이터 파싱 시도\n          if (templateData) {\n            try {\n              data = JSON.parse(templateData);\n            } catch (err) {\n              console.error("\\uD15C\\uD50C\\uB9BF \\uB370\\uC774\\uD130 JSON \\uD30C\\uC2F1 \\uC624\\uB958: ".concat(templateName), err);\n            }\n          }\n\n          // 현재 페이지 및 언어 정보 추가\n          var currentLang = getCurrentLanguage();\n          data.pageId = getCurrentPage();\n          data.currentLang = currentLang;\n          data.basePath = getBasePath();\n\n          // 템플릿 렌더링\n          window.FileToQR.TemplateUtils.loadComponent(templateName, element, data.basePath, data).then(function () {\n            console.log("\\uD15C\\uD50C\\uB9BF \\uB80C\\uB354\\uB9C1 \\uC131\\uACF5: ".concat(templateName));\n\n            // 렌더링 후 이벤트 발생\n            var event = new CustomEvent(\'template:rendered\', {\n              detail: {\n                templateName: templateName,\n                element: element\n              }\n            });\n            document.dispatchEvent(event);\n          })["catch"](function (err) {\n            console.error("\\uD15C\\uD50C\\uB9BF \\uB80C\\uB354\\uB9C1 \\uC2E4\\uD328: ".concat(templateName), err);\n          });\n        }\n      });\n\n      // 인라인 파티셜 처리\n      var partialElements = document.querySelectorAll(\'[data-partial]\');\n      partialElements.forEach(function (element) {\n        var partialName = element.getAttribute(\'data-partial\');\n        var partialData = element.getAttribute(\'data-partial-data\');\n        if (partialName && window.Handlebars.partials[partialName]) {\n          var data = {};\n\n          // 파티셜 데이터 파싱 시도\n          if (partialData) {\n            try {\n              data = JSON.parse(partialData);\n            } catch (err) {\n              console.error("\\uD30C\\uD2F0\\uC15C \\uB370\\uC774\\uD130 JSON \\uD30C\\uC2F1 \\uC624\\uB958: ".concat(partialName), err);\n            }\n          }\n\n          // 기본 데이터 추가\n          data.currentLang = getCurrentLanguage();\n          data.basePath = getBasePath();\n\n          // 파티셜 렌더링\n          var template = window.Handlebars.partials[partialName];\n          var compiledTemplate = typeof template === \'function\' ? template : window.Handlebars.compile(template);\n          element.innerHTML = compiledTemplate(data);\n          console.log("\\uD30C\\uD2F0\\uC15C \\uB80C\\uB354\\uB9C1 \\uC644\\uB8CC: ".concat(partialName));\n        }\n      });\n    }\n  } catch (error) {\n    console.error(\'템플릿 처리 중 오류:\', error);\n  }\n}\n\n/**\n * 현재 언어 코드 가져오기\n * @returns {string} 언어 코드\n */\nfunction getCurrentLanguage() {\n  return i18n_utils.getCurrentLang();\n}\n\n/**\n * 페이지 내 모든 내부 링크 업데이트\n */\nfunction updateInternalLinks() {\n  // 모든 앵커 태그 가져오기\n  var links = document.querySelectorAll(\'a\');\n  var _iterator = app_core_createForOfIteratorHelper(links),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var link = _step.value;\n      var href = link.getAttribute(\'href\');\n\n      // href 속성이 없거나 외부 링크, 앵커 링크, 자바스크립트 링크인 경우 건너뛰기\n      if (!href || href.startsWith(\'http\') || href.startsWith(\'#\') || href.startsWith(\'javascript:\') || href.startsWith(\'mailto:\') || href.startsWith(\'tel:\')) {\n        continue;\n      }\n\n      // 특수 data-i18n-url 속성이 있는 경우 (다국어 URL)\n      if (link.hasAttribute(\'data-i18n-url\')) {\n        var urlKey = link.getAttribute(\'data-i18n-url\');\n        var newHref = i18n_utils.getUrlFromKey(urlKey);\n        if (newHref) {\n          link.setAttribute(\'href\', newHref);\n        }\n        continue;\n      }\n\n      // 일반 내부 링크인 경우, 현재 언어 설정에 맞게 URL 업데이트\n      if (!url_utils.isExternalUrl(href)) {\n        var currentLang = i18n_utils.getCurrentLang();\n        var defaultLang = config.LANGUAGE_CONFIG.defaultLanguage;\n\n        // 기본 언어가 아닌 경우에만 변경\n        if (currentLang !== defaultLang) {\n          try {\n            var _newHref = url_utils.getI18nUrl(href, currentLang);\n            link.setAttribute(\'href\', _newHref);\n          } catch (error) {\n            console.warn("\\uB9C1\\uD06C ".concat(href, " \\uCC98\\uB9AC \\uC2E4\\uD328:"), error);\n          }\n        }\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\n\n/**\n * 언어 선택기 초기화 함수\n */\nfunction initLanguageSelector() {\n  try {\n    // 드롭다운 열기/닫기 함수\n    var openDropdown = function openDropdown() {\n      langSelector.classList.add(\'open\');\n      langToggle.setAttribute(\'aria-expanded\', \'true\');\n      langDropdown.setAttribute(\'aria-hidden\', \'false\');\n      // 첫 번째 옵션에 포커스\n      if (langOptions.length > 0) langOptions[0].focus();\n    };\n    var closeDropdown = function closeDropdown() {\n      langSelector.classList.remove(\'open\');\n      langToggle.setAttribute(\'aria-expanded\', \'false\');\n      langDropdown.setAttribute(\'aria-hidden\', \'true\');\n    }; // 토글 버튼 클릭\n    var langSelector = document.querySelector(\'.language-selector\');\n    var langToggle = document.getElementById(\'lang-selector-toggle\');\n    var langDropdown = document.getElementById(\'lang-dropdown-menu\');\n    var langOptions = document.querySelectorAll(\'.lang-option\');\n    if (!langSelector || !langToggle || !langDropdown) {\n      console.warn(\'언어 선택기 요소를 찾을 수 없음\');\n      return;\n    }\n    // 현재 언어 표시 업데이트\n    updateLanguageDisplay();\n    langToggle.addEventListener(\'click\', function (e) {\n      e.preventDefault();\n      e.stopPropagation();\n      if (langSelector.classList.contains(\'open\')) {\n        closeDropdown();\n      } else {\n        openDropdown();\n      }\n    });\n    // 외부 클릭 시 닫기\n    document.addEventListener(\'mousedown\', function (e) {\n      if (!langSelector.contains(e.target)) {\n        closeDropdown();\n      }\n    });\n    // ESC 키로 닫기 및 키보드 접근성\n    langToggle.addEventListener(\'keydown\', function (e) {\n      if (e.key === \'ArrowDown\' || e.key === \'Enter\' || e.key === \' \') {\n        e.preventDefault();\n        openDropdown();\n      }\n    });\n    langDropdown.addEventListener(\'keydown\', function (e) {\n      var focusable = Array.from(langOptions);\n      var idx = focusable.indexOf(document.activeElement);\n      if (e.key === \'ArrowDown\') {\n        e.preventDefault();\n        var next = (idx + 1) % focusable.length;\n        focusable[next].focus();\n      } else if (e.key === \'ArrowUp\') {\n        e.preventDefault();\n        var prev = (idx - 1 + focusable.length) % focusable.length;\n        focusable[prev].focus();\n      } else if (e.key === \'Escape\') {\n        e.preventDefault();\n        closeDropdown();\n        langToggle.focus();\n      } else if (e.key === \'Tab\') {\n        // 드롭다운 내에서만 순환\n        if (e.shiftKey && idx === 0) {\n          e.preventDefault();\n          focusable[focusable.length - 1].focus();\n        } else if (!e.shiftKey && idx === focusable.length - 1) {\n          e.preventDefault();\n          focusable[0].focus();\n        }\n      }\n    });\n    // 언어 옵션 클릭 처리\n    langOptions.forEach(function (option) {\n      option.setAttribute(\'tabindex\', \'0\');\n      option.addEventListener(\'click\', function (e) {\n        e.preventDefault();\n        var lang = this.getAttribute(\'data-lang\');\n        if (lang) {\n          langOptions.forEach(function (opt) {\n            return opt.classList.remove(\'active\');\n          });\n          this.classList.add(\'active\');\n          if (window.FileToQR && window.FileToQR.i18n) {\n            window.FileToQR.i18n.navigateToLanguage(lang);\n          } else {\n            var currentPath = window.location.pathname;\n            var newPath;\n            if (currentPath.match(/^\\/(ko|en|zh|ja)\\//)) {\n              newPath = currentPath.replace(/^\\/(ko|en|zh|ja)\\//, "/".concat(lang, "/"));\n            } else {\n              var pageName = currentPath.split(\'/\').pop() || \'index.html\';\n              newPath = "/".concat(lang, "/").concat(pageName);\n            }\n            window.location.href = newPath;\n          }\n        }\n      });\n      // 키보드 엔터/스페이스로 선택\n      option.addEventListener(\'keydown\', function (e) {\n        if (e.key === \'Enter\' || e.key === \' \') {\n          e.preventDefault();\n          this.click();\n        }\n      });\n    });\n    // ARIA 속성 보강\n    langToggle.setAttribute(\'aria-haspopup\', \'listbox\');\n    langToggle.setAttribute(\'aria-controls\', \'lang-dropdown-menu\');\n    langDropdown.setAttribute(\'role\', \'listbox\');\n    langDropdown.setAttribute(\'aria-hidden\', \'true\');\n    langOptions.forEach(function (option) {\n      option.setAttribute(\'role\', \'option\');\n    });\n    console.log(\'언어 선택기 접근성 및 일관성 개선 완료\');\n  } catch (error) {\n    console.error(\'언어 선택기 초기화 오류:\', error);\n  }\n}\n\n/**\n * 현재 언어에 맞게 언어 선택기 표시 업데이트\n */\nfunction updateLanguageDisplay() {\n  try {\n    var langSelector = document.getElementById(\'lang-selector-toggle\');\n    if (!langSelector) return;\n\n    // 언어별 표시 이름\n    var langNames = {\n      \'ko\': \'한국어\',\n      \'en\': \'English\',\n      \'zh\': \'中文\',\n      \'ja\': \'日本語\'\n    };\n\n    // 현재 언어 감지\n    var currentLang = \'ko\'; // 기본값\n\n    // FileToQR i18n 객체 사용\n    if (window.FileToQR && window.FileToQR.i18n) {\n      currentLang = window.FileToQR.i18n.getCurrentLang();\n    } else {\n      // URL에서 언어 추출\n      var pathMatch = window.location.pathname.match(/^\\/(ko|en|zh|ja)\\//);\n      if (pathMatch) {\n        currentLang = pathMatch[1];\n      }\n    }\n\n    // 언어 선택기 텍스트 업데이트\n    var langLabel = langSelector.querySelector(\'.lang-label\');\n    if (langLabel) {\n      langLabel.textContent = langNames[currentLang] || langNames[\'ko\'];\n    }\n\n    // 언어 플래그 아이콘 업데이트\n    var flagIcon = langSelector.querySelector(\'.lang-flag-icon\');\n    if (flagIcon) {\n      // 모든 플래그 클래스 제거\n      flagIcon.classList.remove(\'ko-flag\', \'en-flag\', \'zh-flag\', \'ja-flag\');\n      // 현재 언어에 맞는 플래그 클래스 추가\n      flagIcon.classList.add("".concat(currentLang, "-flag"));\n      // 플래그 이미지 경로를 JS에서 동적으로 할당\n      var basePath = \'./\';\n      if (typeof getBasePath === \'function\') {\n        basePath = getBasePath();\n      }\n      // basePath가 \'/\'로 끝나지 않도록 보정\n      if (basePath.endsWith(\'/\')) basePath = basePath;\n      var flagPath = "".concat(basePath, "assets/images/flags/").concat(currentLang, ".svg");\n      flagIcon.style.backgroundImage = "url(\'".concat(flagPath, "\')");\n    }\n\n    // 현재 선택된 언어 옵션 강조\n    var langOptions = document.querySelectorAll(\'.lang-option\');\n    langOptions.forEach(function (option) {\n      var optionLang = option.getAttribute(\'data-lang\');\n      option.classList.remove(\'active\');\n      if (optionLang === currentLang) {\n        option.classList.add(\'active\');\n      }\n    });\n  } catch (error) {\n    console.error(\'언어 표시 업데이트 오류:\', error);\n  }\n}\n\n/**\n * 애플리케이션 초기화 이후 추가 작업\n */\nfunction onAppInitialized() {\n  // 언어 변경 이벤트 리스너 추가\n  window.addEventListener(\'languageChanged\', function (event) {\n    var lang = event.detail.language;\n    updateInternalLinks();\n    console.log("\\uC5B8\\uC5B4 \\uBCC0\\uACBD \\uAC10\\uC9C0: ".concat(lang));\n  });\n\n  // 기타 전역 이벤트 리스너 설정\n  // ...\n}\n\n// 전역 객체에 등록\nwindow.FileToQR.app = {\n  init: init,\n  getCurrentPage: getCurrentPage,\n  navigateTo: navigateTo,\n  getBasePath: getBasePath,\n  getCurrentLanguage: getCurrentLanguage\n};\n\n// DOMContentLoaded 이벤트 시 앱 초기화\ndocument.addEventListener(\'DOMContentLoaded\', function () {\n  window.FileToQR.app.init();\n});\n\n// Export for ES modules\n/* harmony default export */ const app_core = ({\n  init: init,\n  getCurrentPage: getCurrentPage,\n  navigateTo: navigateTo,\n  getBasePath: getBasePath,\n  getCurrentLanguage: getCurrentLanguage\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///950\n')}},Q=>{var F;F=950,Q(Q.s=F)}]);